import type {
  BrowseConfigurationType,
  BrowseParamsEvent,
} from "@app/lib/actions/types/browse";
import type {
  ConversationIncludeFileConfigurationType,
  ConversationIncludeFileParamsEvent,
} from "@app/lib/actions/types/conversation/include_file";
import type {
  DustAppRunBlockEvent,
  DustAppRunConfigurationType,
  DustAppRunParamsEvent,
} from "@app/lib/actions/types/dust_app_run";
import type {
  ProcessConfigurationType,
  ProcessParamsEvent,
} from "@app/lib/actions/types/process";
import type {
  ReasoningConfigurationType,
  ReasoningStartedEvent,
  ReasoningThinkingEvent,
  ReasoningTokensEvent,
} from "@app/lib/actions/types/reasoning";
import type {
  RetrievalConfigurationType,
  RetrievalParamsEvent,
} from "@app/lib/actions/types/retrieval";
import type {
  SearchLabelsConfigurationType,
  SearchLabelsParamsEvent,
} from "@app/lib/actions/types/search_labels";
import type {
  TablesQueryConfigurationType,
  TablesQueryModelOutputEvent,
  TablesQueryOutputEvent,
  TablesQueryStartedEvent,
} from "@app/lib/actions/types/tables_query";
import type {
  WebsearchConfigurationType,
  WebsearchParamsEvent,
} from "@app/lib/actions/types/websearch";

/**
 * Agent Action configuration
 */

export type AgentActionConfigurationType =
  | BrowseConfigurationType
  | DustAppRunConfigurationType
  | ProcessConfigurationType
  | ReasoningConfigurationType
  | RetrievalConfigurationType
  | TablesQueryConfigurationType
  | WebsearchConfigurationType;

type ConversationAgentActionConfigurationType =
  ConversationIncludeFileConfigurationType;

type SearchLabelsAgentActionConfigurationType = SearchLabelsConfigurationType;

export type ActionConfigurationType =
  | AgentActionConfigurationType
  | ConversationAgentActionConfigurationType
  | SearchLabelsAgentActionConfigurationType;

type UnsavedConfiguration<T> = Omit<T, "id" | "sId">;

// We need to apply Omit to each member of the union separately rather than the whole union
// because Omit<A | B, "k"> is different from Omit<A, "k"> | Omit<B, "k">.
// The first form loses the discriminated union properties needed for type narrowing.
export type UnsavedAgentActionConfigurationType =
  | UnsavedConfiguration<TablesQueryConfigurationType>
  | UnsavedConfiguration<RetrievalConfigurationType>
  | UnsavedConfiguration<DustAppRunConfigurationType>
  | UnsavedConfiguration<ProcessConfigurationType>
  | UnsavedConfiguration<WebsearchConfigurationType>
  | UnsavedConfiguration<BrowseConfigurationType>
  | UnsavedConfiguration<ReasoningConfigurationType>;

export type AgentAction =
  | AgentActionConfigurationType["type"]
  | ConversationAgentActionConfigurationType["type"];

// Each AgentActionConfigurationType is capable of generating this type at runtime to specify which
// inputs should be generated by the model. As an example, to run the retrieval action for which the
// `relativeTimeFrame` has been specified in the configuration but for which the `query` is "auto",
// it would generate:
//
// ```
// { inputs: [{ name: "query", description: "...", type: "string" }]
// ```
//
// The params generator model for this action would be tasked to generate that query. If the
// retrieval configuration sets `relativeTimeFrame` to "auto" as well we would get:
//
// ```
// {
//   inputs: [
//     { name: "query", description: "...", type: "string" },
//     { name: "relativeTimeFrame", description: "...", type: "string" },
//   ]
// }
// ```
export type AgentActionSpecification = {
  name: string;
  description: string;
  inputs: {
    name: string;
    description: string;
    type: "string" | "number" | "boolean" | "array";
    items?: {
      type: "string" | "number" | "boolean";
    };
  }[];
};

// Event sent during the execution of an action. These are action specific.
export type AgentActionSpecificEvent =
  | BrowseParamsEvent
  | ConversationIncludeFileParamsEvent
  | DustAppRunBlockEvent
  | DustAppRunParamsEvent
  | ProcessParamsEvent
  | ReasoningStartedEvent
  | ReasoningThinkingEvent
  | ReasoningTokensEvent
  | RetrievalParamsEvent
  | SearchLabelsParamsEvent
  | TablesQueryModelOutputEvent
  | TablesQueryOutputEvent
  | TablesQueryStartedEvent
  | WebsearchParamsEvent;
