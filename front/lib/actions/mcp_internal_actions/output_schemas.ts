import { INTERNAL_MIME_TYPES } from "@dust-tt/client";
import type {
  CallToolResult,
  Notification,
} from "@modelcontextprotocol/sdk/types.js";
import { NotificationSchema } from "@modelcontextprotocol/sdk/types.js";
import { z } from "zod";

import { MCP_TOOL_STAKE_LEVELS } from "@app/lib/actions/constants";
import type { SupportedFileContentType } from "@app/types";
import { FILE_FORMATS } from "@app/types";

// File generated by the tool during its execution.

const ToolGeneratedFileSchema = z.object({
  text: z.string(),
  uri: z.string(),
  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.FILE),
  fileId: z.string(),
  title: z.string(),
  contentType: z.enum(
    Object.keys(FILE_FORMATS) as [
      SupportedFileContentType,
      ...SupportedFileContentType[],
    ]
  ),
  snippet: z.string().nullable(),
});

export type ToolGeneratedFileType = z.infer<typeof ToolGeneratedFileSchema>;

export function isToolGeneratedFile(
  outputBlock: CallToolResult["content"][number]
): outputBlock is { type: "resource"; resource: ToolGeneratedFileType } {
  return (
    outputBlock.type === "resource" &&
    ToolGeneratedFileSchema.safeParse(outputBlock.resource).success
  );
}

// Thinking tokens generated during the tool execution.

const ThinkingOutputSchema = z.object({
  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.THINKING),
  text: z.string(),
  uri: z.literal(""),
});

export type ThinkingOutputType = z.infer<typeof ThinkingOutputSchema>;

export function isThinkingOutput(
  outputBlock: CallToolResult["content"][number]
): outputBlock is { type: "resource"; resource: ThinkingOutputType } {
  return (
    outputBlock.type === "resource" &&
    ThinkingOutputSchema.safeParse(outputBlock.resource).success
  );
}

// Final output of the reasoning when successful with the non-CoT tokens.

export const ReasoningSuccessOutputSchema = z.object({
  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.REASONING_SUCCESS),
  text: z.string(),
  uri: z.literal(""),
});

export type ReasoningSuccessOutputType = z.infer<
  typeof ReasoningSuccessOutputSchema
>;

export function isReasoningSuccessOutput(
  outputBlock: CallToolResult["content"][number]
): outputBlock is { type: "resource"; resource: ReasoningSuccessOutputType } {
  return (
    outputBlock.type === "resource" &&
    ReasoningSuccessOutputSchema.safeParse(outputBlock.resource).success
  );
}

// SQL query generated during the tool execution.

const SqlQueryOutputSchema = z.object({
  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.SQL_QUERY),
  text: z.string(),
  uri: z.literal(""),
});

export type SqlQueryOutputType = z.infer<typeof SqlQueryOutputSchema>;

export function isSqlQueryOutput(
  outputBlock: CallToolResult["content"][number]
): outputBlock is { type: "resource"; resource: SqlQueryOutputType } {
  return (
    outputBlock.type === "resource" &&
    SqlQueryOutputSchema.safeParse(outputBlock.resource).success
  );
}

// Resource with a name.

type ResourceWithName = {
  name: string;
};

export const isResourceWithName = (
  resource: object
): resource is ResourceWithName => {
  return "name" in resource && typeof resource.name === "string";
};

export const DatabaseSchemaResourceSchema = z.object({
  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.DATABASE_SCHEMA),
  text: z.string(),
  uri: z.string(),
});

export type DatabaseSchemaResourceType = z.infer<
  typeof DatabaseSchemaResourceSchema
>;

export const isDatabaseSchemaResourceType = (
  outputBlock: CallToolResult["content"][number]
): outputBlock is {
  type: "resource";
  resource: DatabaseSchemaResourceType;
} => {
  return (
    outputBlock.type === "resource" &&
    DatabaseSchemaResourceSchema.safeParse(outputBlock.resource).success
  );
};

export const QueryWritingInstructionsResourceSchema = z.object({
  mimeType: z.literal(
    INTERNAL_MIME_TYPES.TOOL_OUTPUT.QUERY_WRITING_INSTRUCTIONS
  ),
  text: z.string(),
  uri: z.string(),
});

export type QueryWritingInstructionsResourceType = z.infer<
  typeof QueryWritingInstructionsResourceSchema
>;

export const isQueryWritingInstructionsResourceType = (
  outputBlock: CallToolResult["content"][number]
): outputBlock is {
  type: "resource";
  resource: QueryWritingInstructionsResourceType;
} => {
  return (
    outputBlock.type === "resource" &&
    QueryWritingInstructionsResourceSchema.safeParse(outputBlock.resource)
      .success
  );
};

export const ExampleRowsResourceSchema = z.object({
  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.EXAMPLE_ROWS),
  text: z.string(),
  uri: z.string(),
});

export type ExampleRowsResourceType = z.infer<typeof ExampleRowsResourceSchema>;

export const isExampleRowsResourceType = (
  outputBlock: CallToolResult["content"][number]
): outputBlock is { type: "resource"; resource: ExampleRowsResourceType } => {
  return (
    outputBlock.type === "resource" &&
    ExampleRowsResourceSchema.safeParse(outputBlock.resource).success
  );
};

export const GetDatabaseSchemaMarkerResourceSchema = z.object({
  mimeType: z.literal(
    INTERNAL_MIME_TYPES.TOOL_OUTPUT.GET_DATABASE_SCHEMA_MARKER
  ),
  text: z.string(),
  uri: z.literal(""),
});

export type GetDatabaseSchemaMarkerResourceType = z.infer<
  typeof GetDatabaseSchemaMarkerResourceSchema
>;

export function isGetDatabaseSchemaMarkerResourceType(
  outputBlock: CallToolResult["content"][number]
): outputBlock is {
  type: "resource";
  resource: GetDatabaseSchemaMarkerResourceType;
} {
  return (
    outputBlock.type === "resource" &&
    GetDatabaseSchemaMarkerResourceSchema.safeParse(outputBlock.resource)
      .success
  );
}

export const ExecuteTablesQueryMarkerResourceSchema = z.object({
  mimeType: z.literal(
    INTERNAL_MIME_TYPES.TOOL_OUTPUT.EXECUTE_TABLES_QUERY_MARKER
  ),
  text: z.string(),
  uri: z.literal(""),
});

export type ExecuteTablesQueryMarkerResourceType = z.infer<
  typeof ExecuteTablesQueryMarkerResourceSchema
>;

export function isExecuteTablesQueryMarkerResourceType(
  outputBlock: CallToolResult["content"][number]
): outputBlock is {
  type: "resource";
  resource: ExecuteTablesQueryMarkerResourceType;
} {
  return (
    outputBlock.type === "resource" &&
    ExecuteTablesQueryMarkerResourceSchema.safeParse(outputBlock.resource)
      .success
  );
}

export const ExecuteTablesQueryErrorResourceSchema = z.object({
  mimeType: z.literal(
    INTERNAL_MIME_TYPES.TOOL_OUTPUT.EXECUTE_TABLES_QUERY_ERROR
  ),
  text: z.string(),
  uri: z.literal(""),
});

export type ExecuteTablesQueryErrorResourceType = z.infer<
  typeof ExecuteTablesQueryErrorResourceSchema
>;

export const isExecuteTablesQueryErrorResourceType = (
  outputBlock: CallToolResult["content"][number]
): outputBlock is {
  type: "resource";
  resource: ExecuteTablesQueryErrorResourceType;
} => {
  return (
    outputBlock.type === "resource" &&
    ExecuteTablesQueryErrorResourceSchema.safeParse(outputBlock.resource)
      .success
  );
};

// Data source search outputs: query and results.

export const SearchQueryResourceSchema = z.object({
  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.DATA_SOURCE_SEARCH_QUERY),
  text: z.string(),
  uri: z.literal(""),
});

export type SearchQueryResourceType = z.infer<typeof SearchQueryResourceSchema>;

export const isSearchQueryResourceType = (
  outputBlock: CallToolResult["content"][number]
): outputBlock is { type: "resource"; resource: SearchQueryResourceType } => {
  return (
    outputBlock.type === "resource" &&
    SearchQueryResourceSchema.safeParse(outputBlock.resource).success
  );
};

export const SearchResultResourceSchema = z.object({
  mimeType: z.literal(
    INTERNAL_MIME_TYPES.TOOL_OUTPUT.DATA_SOURCE_SEARCH_RESULT
  ),
  uri: z.string(),
  text: z.string(),

  // Document metadata
  id: z.string(),
  tags: z.array(z.string()),
  ref: z.string(),
  chunks: z.array(z.string()),
  source: z.object({
    name: z.string(),
    provider: z.string().optional(),
  }),
});

export type SearchResultResourceType = z.infer<
  typeof SearchResultResourceSchema
>;

export const isSearchResultResourceType = (
  outputBlock: CallToolResult["content"][number]
): outputBlock is { type: "resource"; resource: SearchResultResourceType } => {
  return (
    outputBlock.type === "resource" &&
    SearchResultResourceSchema.safeParse(outputBlock.resource).success
  );
};

// Data source inclusion outputs, query and results
export const IncludeQueryResourceSchema = z.object({
  mimeType: z.literal(
    INTERNAL_MIME_TYPES.TOOL_OUTPUT.DATA_SOURCE_INCLUDE_QUERY
  ),
  text: z.string(),
  uri: z.literal(""),
});

export type IncludeQueryResourceType = z.infer<
  typeof IncludeQueryResourceSchema
>;

export const isIncludeQueryResourceType = (
  outputBlock: CallToolResult["content"][number]
): outputBlock is { type: "resource"; resource: IncludeQueryResourceType } => {
  return (
    outputBlock.type === "resource" &&
    IncludeQueryResourceSchema.safeParse(outputBlock.resource).success
  );
};

export const WarningResourceSchema = z.object({
  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.WARNING),
  warningTitle: z.string(),
  text: z.string(),
  warningData: z.record(z.string(), z.unknown()).optional(),
  uri: z.literal(""),
});

export type WarningResourceType = z.infer<typeof WarningResourceSchema>;

export const isWarningResourceType = (
  outputBlock: CallToolResult["content"][number]
): outputBlock is {
  type: "resource";
  resource: WarningResourceType;
} => {
  return (
    outputBlock.type === "resource" &&
    WarningResourceSchema.safeParse(outputBlock.resource).success
  );
};

export const IncludeResultResourceSchema = z.object({
  mimeType: z.literal(
    INTERNAL_MIME_TYPES.TOOL_OUTPUT.DATA_SOURCE_INCLUDE_RESULT
  ),
  uri: z.string(),
  text: z.string(),

  // Document metadata
  id: z.string(),
  tags: z.array(z.string()),
  ref: z.string(),
  chunks: z.array(z.string()),
  source: z.object({
    name: z.string(),
    provider: z.string().optional(),
  }),
});

export type IncludeResultResourceType = z.infer<
  typeof IncludeResultResourceSchema
>;

export const isIncludeResultResourceType = (
  outputBlock: CallToolResult["content"][number]
): outputBlock is { type: "resource"; resource: IncludeResultResourceType } => {
  return (
    outputBlock.type === "resource" &&
    IncludeResultResourceSchema.safeParse(outputBlock.resource).success
  );
};

// Websearch results.

export const WebsearchQueryResourceSchema = z.object({
  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.WEBSEARCH_QUERY),
  text: z.string(),
  uri: z.literal(""),
});

export type WebsearchQueryResourceType = z.infer<
  typeof WebsearchQueryResourceSchema
>;

export const isWebsearchQueryResourceType = (
  outputBlock: CallToolResult["content"][number]
): outputBlock is {
  type: "resource";
  resource: WebsearchQueryResourceType;
} => {
  return (
    outputBlock.type === "resource" &&
    WebsearchQueryResourceSchema.safeParse(outputBlock.resource).success
  );
};

export const WebsearchResultResourceSchema = z.object({
  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.WEBSEARCH_RESULT),
  title: z.string(),
  text: z.string(),
  uri: z.string(),
  reference: z.string(),
});

export type WebsearchResultResourceType = z.infer<
  typeof WebsearchResultResourceSchema
>;

export const isWebsearchResultResourceType = (
  outputBlock: CallToolResult["content"][number]
): outputBlock is {
  type: "resource";
  resource: WebsearchResultResourceType;
} => {
  return (
    outputBlock.type === "resource" &&
    WebsearchResultResourceSchema.safeParse(outputBlock.resource).success
  );
};

// Browse results.

export const BrowseResultResourceSchema = z.object({
  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.BROWSE_RESULT),
  requestedUrl: z.string(),
  uri: z.string(), // Browsed url, might differ from the requested url
  text: z.string(),
  title: z.string().optional(),
  description: z.string().optional(),
  responseCode: z.string(),
  errorMessage: z.string().optional(),
});

export type BrowseResultResourceType = z.infer<
  typeof BrowseResultResourceSchema
>;

export const isBrowseResultResourceType = (
  outputBlock: CallToolResult["content"][number]
): outputBlock is {
  type: "resource";
  resource: BrowseResultResourceType;
} => {
  return (
    outputBlock.type === "resource" &&
    BrowseResultResourceSchema.safeParse(outputBlock.resource).success
  );
};

// RunAgent results.

export const RunAgentQueryResourceSchema = z.object({
  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.RUN_AGENT_QUERY),
  text: z.string(),
  childAgentId: z.string(),
  uri: z.literal(""),
});

export type RunAgentQueryResourceType = z.infer<
  typeof RunAgentQueryResourceSchema
>;

export const isRunAgentQueryResourceType = (
  outputBlock: CallToolResult["content"][number]
): outputBlock is {
  type: "resource";
  resource: RunAgentQueryResourceType;
} => {
  return (
    outputBlock.type === "resource" &&
    RunAgentQueryResourceSchema.safeParse(outputBlock.resource).success
  );
};

export const RunAgentResultResourceSchema = z.object({
  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.RUN_AGENT_RESULT),
  conversationId: z.string(),
  text: z.string(),
  chainOfThought: z.string().optional(),
  uri: z.string(),
});

export type RunAgentResultResourceType = z.infer<
  typeof RunAgentResultResourceSchema
>;

export const isRunAgentResultResourceType = (
  outputBlock: CallToolResult["content"][number]
): outputBlock is {
  type: "resource";
  resource: RunAgentResultResourceType;
} => {
  return (
    outputBlock.type === "resource" &&
    RunAgentResultResourceSchema.safeParse(outputBlock.resource).success
  );
};

// Extract data outputs: query and results.

export const ExtractQueryResourceSchema = z.object({
  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.EXTRACT_QUERY),
  text: z.string(),
  uri: z.literal(""),
});

export type ExtractQueryResourceType = z.infer<
  typeof ExtractQueryResourceSchema
>;

export const isExtractQueryResourceType = (
  outputBlock: CallToolResult["content"][number]
): outputBlock is { type: "resource"; resource: ExtractQueryResourceType } => {
  return (
    outputBlock.type === "resource" &&
    ExtractQueryResourceSchema.safeParse(outputBlock.resource).success
  );
};

export const ExtractResultResourceSchema = z.object({
  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.EXTRACT_RESULT),
  uri: z.string(),
  text: z.string(),

  // File metadata
  fileId: z.string(),
  title: z.string(),
  contentType: z.string(),
  snippet: z.string().nullable(),
});

export type ExtractResultResourceType = z.infer<
  typeof ExtractResultResourceSchema
>;

export const isExtractResultResourceType = (
  outputBlock: CallToolResult["content"][number]
): outputBlock is { type: "resource"; resource: ExtractResultResourceType } => {
  return (
    outputBlock.type === "resource" &&
    ExtractResultResourceSchema.safeParse(outputBlock.resource).success
  );
};

/**
 * Notification output types.
 */

const NotificationImageContentSchema = z.object({
  type: z.literal("image"),
  mimeType: z.string(),
});

type ImageProgressOutput = z.infer<typeof NotificationImageContentSchema>;

// Schema for the resource of a notification where the tool is asking for tool approval.
// This schema contains all the information that the MCP server runner
// needs to emit an event for tool approval.
const NotificationToolApproveBubbleUpContentSchema = z.object({
  type: z.literal("tool_approval_bubble_up"),
  configurationId: z.string(),
  conversationId: z.string(),
  messageId: z.string(),
  actionId: z.string(),
  inputs: z.record(z.unknown()),
  stake: z.enum(MCP_TOOL_STAKE_LEVELS).optional(),
  metadata: z.object({
    mcpServerName: z.string(),
    toolName: z.string(),
    agentName: z.string(),
  }),
});

type NotificationToolApproveBubbleUpContentType = z.infer<
  typeof NotificationToolApproveBubbleUpContentSchema
>;

export function isToolApproveBubbleUpNotificationType(
  notificationOutput: ProgressNotificationOutput
): notificationOutput is NotificationToolApproveBubbleUpContentType {
  return NotificationToolApproveBubbleUpContentSchema.safeParse(
    notificationOutput
  ).success;
}

export function isImageProgressOutput(
  output: ProgressNotificationOutput
): output is ImageProgressOutput {
  return output !== undefined && output.type === "image";
}

const NotificationTextContentSchema = z.object({
  type: z.literal("text"),
  text: z.string(),
});

const NotificationRunAgentContentSchema = z.object({
  type: z.literal("run_agent"),
  childAgentId: z.string(),
  conversationId: z.string(),
  query: z.string(),
});

type RunAgentProgressOutput = z.infer<typeof NotificationRunAgentContentSchema>;

export function isRunAgentProgressOutput(
  output: ProgressNotificationOutput
): output is RunAgentProgressOutput {
  return (
    output !== undefined &&
    output.type === "run_agent" &&
    "childAgentId" in output
  );
}

export const ProgressNotificationOutputSchema = z
  .union([
    NotificationImageContentSchema,
    NotificationTextContentSchema,
    NotificationToolApproveBubbleUpContentSchema,
    NotificationRunAgentContentSchema,
  ])
  .optional();

type ProgressNotificationOutput = z.infer<
  typeof ProgressNotificationOutputSchema
>;

export const ProgressNotificationContentSchema = z.object({
  // Required for the MCP protocol.
  progress: z.number(),
  total: z.number(),
  progressToken: z.union([z.string(), z.number()]),
  // Custom data.
  data: z.object({
    label: z.string(),
    output: ProgressNotificationOutputSchema,
  }),
});

export type ProgressNotificationContentType = z.infer<
  typeof ProgressNotificationContentSchema
>;

export const MCPProgressNotificationSchema = NotificationSchema.extend({
  method: z.literal("notifications/progress"),
  params: ProgressNotificationContentSchema,
});

export type MCPProgressNotificationType = z.infer<
  typeof MCPProgressNotificationSchema
>;

export function isMCPProgressNotificationType(
  notification: Notification
): notification is MCPProgressNotificationType {
  return MCPProgressNotificationSchema.safeParse(notification).success;
}
