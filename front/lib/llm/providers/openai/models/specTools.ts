import type {
  EasyInputMessage,
  ResponseFunctionToolCall,
} from "openai/resources/responses/responses.mjs";

import type { FinalModelConversationType } from "@app/lib/api/assistant/preprocessing";

export interface FunctionCallOutput {
  /**
   * The unique ID of the function tool call generated by the model.
   */
  call_id: string;

  /**
   * A JSON string of the output of the function tool call.
   */
  output: string;

  /**
   * The type of the function tool call output. Always `function_call_output`.
   */
  type: "function_call_output";

  /**
   * The unique ID of the function tool call output. Populated when this item is
   * returned via API.
   */
  id?: string;

  /**
   * The status of the item. One of `in_progress`, `completed`, or `incomplete`.
   * Populated when items are returned via API.
   */
  status?: "in_progress" | "completed" | "incomplete";
}

export function conversationToOpenAIInput(
  input: FinalModelConversationType
): (EasyInputMessage | FunctionCallOutput | ResponseFunctionToolCall)[] {
  const { messages } = input;
  const result: (
    | EasyInputMessage
    | FunctionCallOutput
    | ResponseFunctionToolCall
  )[] = [];

  for (const message of messages) {
    if (message.role === "user") {
      // Transform to EasyInputMessage with role "user"
      const textContent = Array.isArray(message.content)
        ? message.content
            .map((c) => {
              if (c.type === "text") {
                return c.text;
              }
              return String(c);
            })
            .join("\n")
        : String(message.content || "");

      result.push({
        type: "message",
        role: "user",
        content: textContent,
      });
    } else if (message.role === "function") {
      // Transform to ResponseInputItem.FunctionCallOutput
      result.push({
        type: "function_call_output",
        call_id: message.function_call_id,
        output:
          typeof message.content === "string"
            ? message.content
            : JSON.stringify(message.content),
      });
    } else if (message.role === "assistant") {
      // Check if it has function_calls property
      if ("function_calls" in message && message.function_calls) {
        // Transform to ResponseFunctionToolCall(s)
        for (const fc of message.function_calls) {
          result.push({
            type: "function_call",
            call_id: fc.id,
            name: fc.name,
            arguments: fc.arguments,
          });
        }
      } else if ("name" in message) {
        // Transform to EasyInputMessage with role "assistant"
        result.push({
          type: "message",
          role: "assistant",
          content: message.content,
        });
      }
    }
  }

  return result;
}
