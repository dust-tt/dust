name: "Build Docker Image"
description: "Builds a Docker image using Cloud Build"

inputs:
  project_id:
    description: "Google Cloud project ID"
    required: true
  region:
    description: "Region to build in"
    required: true
  component:
    description: "Component name"
    required: true
  workload_identity_provider:
    description: "Workload Identity Provider"
    required: true
  dd_api_key:
    description: "Datadog api key"
    required: false
  dd_client_token:
    description: "Datadog client token"
    required: false
  commit_sha:
    description: "Commit SHA"
    required: true
  commit_sha_long:
    description: "Commit SHA long"
    required: false
  virtuoso_license_key:
    description: "Virtuoso license key"
    required: false

runs:
  using: "composite"
  steps:
    - id: "auth"
      name: "Authenticate to Google Cloud"
      uses: "google-github-actions/auth@v2"
      with:
        create_credentials_file: true
        workload_identity_provider: ${{ inputs.workload_identity_provider }}
        service_account: "github-build-invoker@${{ inputs.project_id }}.iam.gserviceaccount.com"

    - name: "Configure GCP Artifact Auth"
      uses: "google-github-actions/setup-gcloud@v2"
      with:
        install_components: "docker-credential-gcr"

    - name: "Configure GCP Docker Auth"
      shell: bash
      run: gcloud auth configure-docker ${{ inputs.region }}-docker.pkg.dev --quiet

    - name: "Build and Push with Cloud Build"
      shell: bash
      run: |
        COMPONENT="${{ inputs.component }}"

        # Determine environment and base component name
        if [[ ${COMPONENT} == *"-qa" ]]; then
          ENV="qa"
          BASE_COMPONENT=${COMPONENT%-qa}
        elif [[ ${COMPONENT} == *"-edge" ]]; then
          ENV="edge"
          BASE_COMPONENT=${COMPONENT%-edge}
        else
          ENV="prod"
          BASE_COMPONENT=${COMPONENT}
        fi

        CONFIG_FILE=".github/configs/${{ inputs.region }}/.env.${ENV}"

        build_args=()
        while IFS='=' read -r key value; do
          [[ -n "$key" ]] && build_args+=("--build-arg" "$(echo "$key" | xargs)=$(echo "$value" | xargs)")
        done < "$CONFIG_FILE"

        # Only set the Virtuoso license key if provided
        if [[ -n "${{ inputs.virtuoso_license_key }}" ]]; then
          build_args+=("--build-arg NEXT_PUBLIC_VIRTUOSO_LICENSE_KEY=${{ inputs.virtuoso_license_key }}")
        fi

        # Only set the Datadog API key if provided
        if [[ -n "${{ inputs.dd_api_key }}" ]]; then
          build_args+=("--build-arg DATADOG_API_KEY=${{ inputs.dd_api_key }}")
        fi

        # Only set the Datadog client token for front and front-edge builds
        if [[ "$COMPONENT" == "front" || "$COMPONENT" == "front-edge" ]]; then
          build_args+=("--build-arg NEXT_PUBLIC_DATADOG_CLIENT_TOKEN=${{ inputs.dd_client_token }}")
          build_args+=("--build-arg NEXT_PUBLIC_DATADOG_SERVICE=$COMPONENT")
        fi

        # Create substitutions for build args
        substitutions="_DOCKERFILE=./dockerfiles/${BASE_COMPONENT}.Dockerfile"
        substitutions+=",_IMAGE_TAG=${{ inputs.region }}-docker.pkg.dev/${{ inputs.project_id }}/dust-images/${{ inputs.component }}:${{ inputs.commit_sha }}"
        substitutions+=",_COMMIT_HASH=${{ inputs.commit_sha }}"
        substitutions+=",_COMMIT_HASH_LONG=${{ inputs.commit_sha_long }}"

        # Add build args as environment variables in a temp cloudbuild file
        cp ./.github/actions/build-image/cloudbuild.yaml /tmp/cloudbuild.yaml

        # Add build args to the docker build step
        for ((i=0; i<${#build_args[@]}; i++)); do
          if [[ "${build_args[i]}" == "--build-arg" && $((i+1)) < ${#build_args[@]} ]]; then
            # Next element is the actual build arg
            i=$((i+1))
            arg="${build_args[i]}"
            # Add each build arg as a separate --build-arg line
            sed -i "/- 'COMMIT_HASH_LONG=\$_COMMIT_HASH_LONG'/a\\      - '--build-arg'\\      - '$arg'" /tmp/cloudbuild.yaml
          fi
        done

        gcloud builds submit --quiet \
          --config=/tmp/cloudbuild.yaml \
          --substitutions="$substitutions" \
          .
