name: Publish Sparkle Alpha

on:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: publish_sparkle_rc
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20.13.0
          cache: "npm"
          cache-dependency-path: ./sparkle/package-lock.json

      - name: Build and test
        working-directory: sparkle
        run: npm ci && npm run build

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20.13.0
          registry-url: "https://registry.npmjs.org"

      - name: Generate RC version
        working-directory: sparkle
        run: |
          # Get the latest published version from npm (excludes RC versions with 'rc' tag)
          # Example: if latest is 0.201, we want to create RCs for 0.202
          LATEST_VERSION=$(npm view @dust-tt/sparkle version)
          echo "Latest published version: $LATEST_VERSION"
          
          # Increment the patch version to create the RC base version
          # Example: 0.201 becomes 0.202 for RC versioning
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
          NEXT_PATCH=$((PATCH + 1))
          BASE_VERSION="${MAJOR}.${MINOR}.${NEXT_PATCH}"
          echo "RC base version: $BASE_VERSION"
          
          # Check if there are existing RC versions for this base version
          # Example: look for 0.202-rc-1, 0.202-rc-2, etc.
          EXISTING_RCS=$(npm view @dust-tt/sparkle versions --json | jq -r '.[]' | grep "^${BASE_VERSION}-rc-" | sort -V | tail -n1 || echo "")
          
          if [ -z "$EXISTING_RCS" ]; then
            # No existing RC versions found, start with rc-1
            # Example: 0.202-rc-1
            RC_VERSION="${BASE_VERSION}-rc-1"
          else
            # Found existing RC versions, increment the RC number
            # Example: if 0.202-rc-2 exists, create 0.202-rc-3
            RC_NUMBER=$(echo "$EXISTING_RCS" | sed "s/^${BASE_VERSION}-rc-//")
            NEXT_RC_NUMBER=$((RC_NUMBER + 1))
            RC_VERSION="${BASE_VERSION}-rc-${NEXT_RC_NUMBER}"
          fi
          
          echo "Generated RC version: $RC_VERSION"
          # Update package.json version without creating a git tag
          npm version $RC_VERSION --no-git-tag-version

      - name: Publish RC
        working-directory: sparkle
        run: |
          npm ci && npm run build && npm publish --tag rc
          RC_VERSION=$(node -p "require('./package.json').version")
          echo "ðŸš€ Successfully published Sparkle RC: $RC_VERSION"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
