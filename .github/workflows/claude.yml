name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full depth for better git operations

      # Setup Node.js for JS/TS projects
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.13.0

      # Setup Rust for core project
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      # Pre-build SDK only as it's a dependency for other projects
      - name: Build SDK
        run: |
          # Install global tools
          npm install -g tsx

          # Pre-build SDK as it's a dependency for front and connectors
          cd sdks/js && npm install && npm run build && cd ../..

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # Specify model (defaults to Claude Sonnet 4, using Claude Opus 4)
          model: "claude-opus-4-20250514"

          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"

          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"

          # Allow Claude to use all available tools
          allowed_tools: |
            Agent,
            Bash,
            Edit,
            Glob,
            Grep,
            LS,
            MultiEdit,
            NotebookEdit,
            NotebookRead,
            Read,
            TodoRead,
            TodoWrite,
            WebFetch,
            WebSearch,
            Write

          # Custom instructions based on CLAUDE.md
          custom_instructions: |
            ### 1. General Principles

            - Never make changes to the codebase that the user did not ask for.
            - Unless explicitly requested to modify code, output must remain strictly conversational.
            - Always make the minimal changes required—never more.
            - Follow all **CODING_RULES.md** files in each project directory (core, front). Review them before altering code.
            - Avoid "defensive" patterns (default values, removing tests, non-null assertions).
            - Add comments **only** for complex, non-obvious logic; wrap at ~100 characters.
            - Write code that fails fast and explicitly; assume valid inputs.

            ### 2. Code Modification & Compilation

            - **TypeScript**: run `npx tsc --noEmit` in the project directory before committing changes.
            - **Rust**: run `cargo check` in the project directory before committing changes.
            - Never attempt to run servers, applications, or execute code—compile only.

            ### 3. Error Handling

            - Let exceptions propagate; do **not** catch your own thrown errors.
            - Default for new functions: allow exceptions to bubble up.
            - Use `Result<T, E>` **only** when downstream handling is required.
            - Use `try/catch` solely to convert external library errors into the project's `Result` type.
              - Limit the `try/catch` scope to the specific statement that may throw.
            - Only use catching / returning `Result` in functions that already return `Result`.
            - Replace `err as Error` with `normalizeError()`.

            ### 4. Testing & Execution

            - Never add tests unless asked.
            - Never run tests unless asked.

            ### 5. Naming & Refactoring

            - When renaming a function, **do not** keep the old name for backward compatibility.

            ### 6. Planning Requests

            - If asked to create a plan, propose actions only—**no code changes** until approval.

            ### 8. Internet Access

            - Use your WebSearch tools to search the internet.
            - This is required to find documentation for libraries, latest package versions, etc.

            ### 9. Import Rules

            - For TypeScript, place all imports at the top of the file; never use async imports.

            ### Project-specific Build Commands:

            **front**: cd front && npm ci && npx tsc --noEmit && npm run lint && npm run format:check
            **connectors**: cd connectors && npm install && npm run build && npm run lint && npm run format:check
            **cli**: cd cli && npm ci && npx tsc && npm run lint
            **core**: cd core && cargo check && cargo fmt --all -- --check
            **extension**: cd extension && npm ci && npm run build && npm run lint
            **sparkle**: cd sparkle && npm install && npm run build && npm run lint
            **viz**: cd viz && npm install && npm run build && npm run check
            **sdks/js**: Already pre-built; if changes made: cd sdks/js && npm run build && npm run lint

            ### Important Rules:
            - Install dependencies once per project when first needed (npm ci or npm install)
            - For TypeScript projects, run `npx tsc --noEmit` before committing
            - For Rust projects, run `cargo check` before committing
            - SDK is pre-built; rebuild only if you modify it
            - Never run servers or execute applications, only build/lint/typecheck
            - Follow all CODING_RULES.md files in each project directory
            - Let exceptions propagate, avoid defensive patterns
            - Make minimal changes required
            - Use normalizeError() instead of `err as Error`

          # Environment variables for Claude
          claude_env: |
            NODE_ENV: test
