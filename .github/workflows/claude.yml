name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full depth for better git operations

      # Setup Node.js for JS/TS projects
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.13.0

      # Setup Rust for core project
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      # Pre-build SDK only as it's a dependency for other projects
      - name: Build SDK
        run: |
          # Install global tools
          npm install -g tsx

          # Pre-build SDK as it's a dependency for front and connectors
          cd sdks/js && npm install && npm run build && cd ../..

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # Specify model (defaults to Claude Sonnet 4, using Claude Opus 4)
          model: "claude-opus-4-20250514"

          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"

          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"

          # Allow Claude to use all available tools
          allowed_tools: |
            Agent,
            Bash,
            Edit,
            Glob,
            Grep,
            LS,
            MultiEdit,
            NotebookEdit,
            NotebookRead,
            Read,
            TodoRead,
            TodoWrite,
            WebFetch,
            WebSearch,
            Write

          # Custom instructions based on CLAUDE.md
          custom_instructions: |
            ### Build/Lint/Typecheck Commands by Project:

            **front**: cd front && npm ci && npx tsc --noEmit && npm run lint && npm run format:check
            **connectors**: cd connectors && npm install && npm run build && npm run lint && npm run format:check
            **cli**: cd cli && npm ci && npx tsc && npm run lint
            **core**: cd core && cargo check && cargo fmt --all -- --check
            **extension**: cd extension && npm ci && npm run build && npm run lint
            **sparkle**: cd sparkle && npm install && npm run build && npm run lint
            **viz**: cd viz && npm install && npm run build && npm run check
            **sdks/js**: Already pre-built; if changes made: cd sdks/js && npm run build && npm run lint

            ### Important Rules:
            - Install dependencies once per project when first needed (npm ci or npm install)
            - For TypeScript projects, run `npx tsc --noEmit` before committing
            - For Rust projects, run `cargo check` before committing
            - SDK is pre-built; rebuild only if you modify it
            - Never run servers or execute applications, only build/lint/typecheck
            - Follow all CODING_RULES.md files in each project directory
            - Let exceptions propagate, avoid defensive patterns
            - Make minimal changes required
            - Use normalizeError() instead of `err as Error`

          # Environment variables for Claude
          claude_env: |
            NODE_ENV: test
