name: Reusable Deploy Workflow

on:
  workflow_call:
    inputs:
      regions:
        description: "Regions to revert"
        type: string
        required: true
      component:
        description: "Component name"
        type: string
        required: true
    secrets:
      GCLOUD_US_PROJECT_ID:
        required: true
      GCLOUD_EU_PROJECT_ID:
        required: true
      SLACK_CHANNEL_ID:
        required: true
      SLACK_BOT_TOKEN:
        required: true
      INFRA_DISPATCH_APP_ID:
        required: true
      INFRA_DISPATCH_APP_PRIVATE_KEY:
        required: true

jobs:
  check-branch:
    runs-on: ubuntu-latest
    if: ${{ !inputs.enforce_main || github.ref == 'refs/heads/main' }}
    steps:
      - name: Check branch condition
        run: |
          if [[ "${{ inputs.enforce_main }}" == "true" && "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "Deployments are only allowed from the main branch"
            exit 1
          fi

  prepare:
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.short_sha.outputs.short_sha }}
    steps:
      - uses: actions/checkout@v3
      - name: Get short sha
        id: short_sha
        run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  notify-start:
    needs: [prepare]
    runs-on: ubuntu-latest
    outputs:
      thread_ts: ${{ steps.build_message.outputs.thread_ts }}
    steps:
      - uses: actions/checkout@v3

      - name: Notify Build And Deploy Start
        id: build_message
        if: ${{ inputs.component != 'front-qa'}}
        uses: ./.github/actions/slack-notify
        with:
          step: "start"
          channel: ${{ secrets.SLACK_CHANNEL_ID }}
          component: ${{ inputs.component }}
          image_tag: ${{ needs.prepare.outputs.short_sha }}
          region: ${{ inputs.regions }}
          slack_token: ${{ secrets.SLACK_BOT_TOKEN }}
          is_revert: true

  create-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          if [ "${{ inputs.regions }}" = "all" ]; then
            echo "matrix=[\"us-central1\",\"europe-west1\"]" >> $GITHUB_OUTPUT
          else
            echo "matrix=[\"${{ inputs.regions }}\"]" >> $GITHUB_OUTPUT
          fi

  build:
    permissions:
      contents: read
      id-token: write
    needs: [prepare, notify-start, create-matrix]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: ${{ fromJson(needs.create-matrix.outputs.matrix) }}
      fail-fast: true

    steps:
      - uses: actions/checkout@v3

      - name: Set project ID
        id: project
        run: |
          if [ "${{ matrix.region }}" = "us-central1" ]; then
            echo "PROJECT_ID=${{ secrets.GCLOUD_US_PROJECT_ID }}" >> $GITHUB_OUTPUT
          else
            echo "PROJECT_ID=${{ secrets.GCLOUD_EU_PROJECT_ID }}" >> $GITHUB_OUTPUT
          fi

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v2"
        with:
          create_credentials_file: true
          workload_identity_provider: "projects/357744735673/locations/global/workloadIdentityPools/github-pool-apps/providers/github-provider-apps"
          service_account: "github-build-invoker@${{ steps.project.outputs.PROJECT_ID }}.iam.gserviceaccount.com"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v2"

  revert:
    needs: [prepare, notify-start, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Generate token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.INFRA_DISPATCH_APP_ID }}
          private-key: ${{ secrets.INFRA_DISPATCH_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: dust-infra

      - name: Trigger dust-infra workflow
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            await github.rest.repos.createDispatchEvent({
              owner: '${{ github.repository_owner }}',
              repo: 'dust-infra',
              event_type: 'trigger-component-revert',
              client_payload: {
                regions: '${{ inputs.regions }}',
                component: '${{ inputs.component }}',
                image_tag: '${{ needs.prepare.outputs.short_sha }}',
                slack_thread_ts: "${{ needs.notify-start.outputs.thread_ts }}",
                slack_channel: '${{ secrets.SLACK_CHANNEL_ID }}',
                run_playwright: false,
              }
            })

      - name: Notify Failure
        if: failure()
        uses: ./.github/actions/slack-notify
        with:
          step: "failure"
          channel: ${{ secrets.SLACK_CHANNEL_ID }}
          component: ${{ inputs.component }}
          image_tag: ${{ needs.prepare.outputs.short_sha }}
          region: ${{ inputs.regions }}
          slack_token: ${{ secrets.SLACK_BOT_TOKEN }}
          thread_ts: "${{ needs.notify-start.outputs.thread_ts }}"
