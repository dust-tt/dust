name: Deploy Prodbox EU (TMP)

on:
  workflow_dispatch:
    inputs:
      regions:
        description: "Regions to deploy to"
        required: true
        default: "us-central1"
        type: choice
        options:
          - "europe-west1"
      check_deployment_blocked:
        description: "Check #deployment locks or force deploy"
        required: true
        default: "check"
        type: choice
        options:
          - "check"
          - "force (dangerous)"

concurrency:
  group: deploy_prodbox
  cancel-in-progress: false

env:
  GCLOUD_US_PROJECT_ID: ${{ secrets.GCLOUD_US_PROJECT_ID }}
  GCLOUD_EU_PROJECT_ID: ${{ secrets.GCLOUD_EU_PROJECT_ID }}
  IMAGE_NAME: prodbox

jobs:
  notify-start:
    runs-on: ubuntu-latest
    outputs:
      thread_ts: ${{ steps.build_message.outputs.thread_ts }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ssh-key: "${{ secrets.PRODBOX_PRIVATE_DEPLOY_KEY }}"

      - name: Get short sha
        id: short_sha
        run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Notify Build And Deploy Start
        id: build_message
        uses: ./.github/actions/slack-notify
        with:
          step: "start"
          component: "prodbox"
          image_tag: ${{ steps.short_sha.outputs.short_sha }}
          channel: ${{ secrets.SLACK_CHANNEL_ID }}
          slack_token: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Slack Check Deployment Blocked
        if: ${{ github.event.inputs.check_deployment_blocked != 'force (dangerous)' }}
        id: check_deployment_blocked
        uses: ./.github/actions/slack-check-deployment-blocked
        with:
          component: "prodbox"
          channel: ${{ secrets.SLACK_CHANNEL_ID }}
          slack_token: ${{ secrets.SLACK_BOT_TOKEN }}

  create-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          if [ "${{ github.event.inputs.regions }}" = "all" ]; then
            echo "matrix=[\"us-central1\",\"europe-west1\"]" >> $GITHUB_OUTPUT
          else
            echo "matrix=[\"${{ github.event.inputs.regions }}\"]" >> $GITHUB_OUTPUT
          fi

  build:
    permissions:
      contents: read
      id-token: write
    needs: [notify-start, create-matrix]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: ${{ fromJson(needs.create-matrix.outputs.matrix) }}
      fail-fast: true

    steps:
      - uses: actions/checkout@v3
      - name: Get short sha
        id: short_sha
        run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - id: "project"
        run: |
          if [ "${{ matrix.region }}" = "us-central1" ]; then
            echo "PROJECT_ID=${{ secrets.GCLOUD_US_PROJECT_ID }}" >> $GITHUB_OUTPUT
          else
            echo "PROJECT_ID=${{ secrets.GCLOUD_EU_PROJECT_ID }}" >> $GITHUB_OUTPUT
          fi

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          create_credentials_file: true
          workload_identity_provider: "projects/357744735673/locations/global/workloadIdentityPools/github-pool-apps/providers/github-provider-apps"
          service_account: "cloudbuild-publisher@${{ steps.project.outputs.PROJECT_ID }}.iam.gserviceaccount.com"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Build image for ${{ matrix.region }}
        run: |
          chmod +x ./k8s/cloud-build.sh
          ./k8s/cloud-build.sh \
            --image-name=$IMAGE_NAME \
            --dockerfile-path=./prodbox.Dockerfile \
            --working-dir=./ \
            --gcloud-ignore-file=.gcloudignore-prodbox \
            --region=${{ matrix.region }} \
            --project-id=${{ steps.project.outputs.PROJECT_ID }}

      - name: Notify Failure
        if: failure()
        uses: ./.github/actions/slack-notify
        with:
          step: "failure"
          component: "prodbox"
          image_tag: ${{ steps.short_sha.outputs.short_sha }}
          channel: ${{ secrets.SLACK_CHANNEL_ID }}
          slack_token: ${{ secrets.SLACK_BOT_TOKEN }}
          thread_ts: "${{ needs.notify-start.outputs.thread_ts }}"

  deploy:
    needs: [notify-start, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ssh-key: "${{ secrets.PRODBOX_PRIVATE_DEPLOY_KEY }}"

      - name: Get short sha
        id: short_sha
        run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.INFRA_DISPATCH_APP_ID }}
          private-key: ${{ secrets.INFRA_DISPATCH_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: |
            dust-infra

      - name: Trigger dust-infra workflow
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            await github.rest.repos.createDispatchEvent({
              owner: '${{ github.repository_owner }}',
              repo: 'dust-infra',
              event_type: 'trigger-component-deploy',
              client_payload: {
                regions: '${{ github.event.inputs.regions }}',
                component: 'prodbox',
                image_tag: '${{ steps.short_sha.outputs.short_sha }}',
                slack_thread_ts: "${{ needs.notify-start.outputs.thread_ts }}",
                slack_channel: '${{ secrets.SLACK_CHANNEL_ID }}'
              }
            });

      - name: Notify Failure
        if: failure()
        uses: ./.github/actions/slack-notify
        with:
          step: "failure"
          blocked: ${{ steps.check_deployment_blocked.outputs.blocked }}
          component: "prodbox"
          image_tag: ${{ steps.short_sha.outputs.short_sha }}
          channel: ${{ secrets.SLACK_CHANNEL_ID }}
          slack_token: ${{ secrets.SLACK_BOT_TOKEN }}
          thread_ts: "${{ needs.notify-start.outputs.thread_ts }}"
