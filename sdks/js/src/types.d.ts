import { z } from "zod";
declare const ConnectorsAPIErrorTypeSchema: z.ZodType<"authorization_error" | "not_found" | "internal_server_error" | "unexpected_error_format" | "unexpected_response_format" | "unexpected_network_error" | "unknown_connector_provider" | "invalid_request_error" | "connector_authorization_error" | "connector_not_found" | "connector_configuration_not_found" | "connector_update_error" | "connector_update_unauthorized" | "connector_oauth_target_mismatch" | "connector_oauth_error" | "slack_channel_not_found" | "connector_rate_limit_error" | "slack_configuration_not_found" | "google_drive_webhook_not_found", z.ZodTypeDef, "authorization_error" | "not_found" | "internal_server_error" | "unexpected_error_format" | "unexpected_response_format" | "unexpected_network_error" | "unknown_connector_provider" | "invalid_request_error" | "connector_authorization_error" | "connector_not_found" | "connector_configuration_not_found" | "connector_update_error" | "connector_update_unauthorized" | "connector_oauth_target_mismatch" | "connector_oauth_error" | "slack_channel_not_found" | "connector_rate_limit_error" | "slack_configuration_not_found" | "google_drive_webhook_not_found">;
declare const ConnectorsAPIErrorSchema: z.ZodObject<{
    type: z.ZodType<"authorization_error" | "not_found" | "internal_server_error" | "unexpected_error_format" | "unexpected_response_format" | "unexpected_network_error" | "unknown_connector_provider" | "invalid_request_error" | "connector_authorization_error" | "connector_not_found" | "connector_configuration_not_found" | "connector_update_error" | "connector_update_unauthorized" | "connector_oauth_target_mismatch" | "connector_oauth_error" | "slack_channel_not_found" | "connector_rate_limit_error" | "slack_configuration_not_found" | "google_drive_webhook_not_found", z.ZodTypeDef, "authorization_error" | "not_found" | "internal_server_error" | "unexpected_error_format" | "unexpected_response_format" | "unexpected_network_error" | "unknown_connector_provider" | "invalid_request_error" | "connector_authorization_error" | "connector_not_found" | "connector_configuration_not_found" | "connector_update_error" | "connector_update_unauthorized" | "connector_oauth_target_mismatch" | "connector_oauth_error" | "slack_channel_not_found" | "connector_rate_limit_error" | "slack_configuration_not_found" | "google_drive_webhook_not_found">;
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "authorization_error" | "not_found" | "internal_server_error" | "unexpected_error_format" | "unexpected_response_format" | "unexpected_network_error" | "unknown_connector_provider" | "invalid_request_error" | "connector_authorization_error" | "connector_not_found" | "connector_configuration_not_found" | "connector_update_error" | "connector_update_unauthorized" | "connector_oauth_target_mismatch" | "connector_oauth_error" | "slack_channel_not_found" | "connector_rate_limit_error" | "slack_configuration_not_found" | "google_drive_webhook_not_found";
    message: string;
}, {
    type: "authorization_error" | "not_found" | "internal_server_error" | "unexpected_error_format" | "unexpected_response_format" | "unexpected_network_error" | "unknown_connector_provider" | "invalid_request_error" | "connector_authorization_error" | "connector_not_found" | "connector_configuration_not_found" | "connector_update_error" | "connector_update_unauthorized" | "connector_oauth_target_mismatch" | "connector_oauth_error" | "slack_channel_not_found" | "connector_rate_limit_error" | "slack_configuration_not_found" | "google_drive_webhook_not_found";
    message: string;
}>;
export type ConnectorsAPIError = z.infer<typeof ConnectorsAPIErrorSchema>;
export type ConnectorsAPIErrorType = z.infer<typeof ConnectorsAPIErrorTypeSchema>;
export declare function isConnectorsAPIError(obj: unknown): obj is ConnectorsAPIError;
export declare const supportedOtherFileFormats: {
    readonly "application/msword": readonly [".doc", ".docx"];
    readonly "application/vnd.openxmlformats-officedocument.wordprocessingml.document": readonly [".doc", ".docx"];
    readonly "application/vnd.ms-powerpoint": readonly [".ppt", ".pptx"];
    readonly "application/vnd.openxmlformats-officedocument.presentationml.presentation": readonly [".ppt", ".pptx"];
    readonly "application/vnd.google-apps.document": readonly [];
    readonly "application/vnd.google-apps.presentation": readonly [];
    readonly "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": readonly [".xlsx"];
    readonly "application/vnd.google-apps.spreadsheet": readonly [];
    readonly "application/vnd.ms-excel": readonly [".xls"];
    readonly "application/pdf": readonly [".pdf"];
    readonly "application/vnd.dust.section.json": readonly [".json"];
    readonly "text/comma-separated-values": readonly [".csv"];
    readonly "text/csv": readonly [".csv"];
    readonly "text/markdown": readonly [".md", ".markdown"];
    readonly "text/plain": readonly [".txt", ".log", ".cfg", ".conf"];
    readonly "text/tab-separated-values": readonly [".tsv"];
    readonly "text/tsv": readonly [".tsv"];
    readonly "text/vnd.dust.attachment.slack.thread": readonly [".txt"];
    readonly "text/html": readonly [".html", ".htm", ".xhtml", ".xhtml+xml"];
    readonly "text/xml": readonly [".xml"];
    readonly "text/calendar": readonly [".ics"];
    readonly "text/css": readonly [".css"];
    readonly "text/javascript": readonly [".js", ".mjs", ".jsx"];
    readonly "text/typescript": readonly [".ts", ".tsx"];
    readonly "application/json": readonly [".json"];
    readonly "application/xml": readonly [".xml"];
    readonly "application/x-sh": readonly [".sh"];
    readonly "text/x-sh": readonly [".sh"];
    readonly "text/x-python": readonly [".py"];
    readonly "text/x-python-script": readonly [".py"];
    readonly "application/x-yaml": readonly [".yaml", ".yml"];
    readonly "text/yaml": readonly [".yaml", ".yml"];
    readonly "text/vnd.yaml": readonly [".yaml", ".yml"];
    readonly "text/x-c": readonly [".c", ".cc", ".cpp", ".cxx", ".dic", ".h", ".hh"];
    readonly "text/x-csharp": readonly [".cs"];
    readonly "text/x-java-source": readonly [".java"];
    readonly "text/x-php": readonly [".php"];
    readonly "text/x-ruby": readonly [".rb"];
    readonly "text/x-sql": readonly [".sql"];
    readonly "text/x-swift": readonly [".swift"];
    readonly "text/x-rust": readonly [".rs"];
    readonly "text/x-go": readonly [".go"];
    readonly "text/x-kotlin": readonly [".kt", ".kts"];
    readonly "text/x-scala": readonly [".scala"];
    readonly "text/x-groovy": readonly [".groovy"];
    readonly "text/x-perl": readonly [".pl", ".pm"];
    readonly "text/x-perl-script": readonly [".pl", ".pm"];
};
export declare const supportedImageFileFormats: {
    readonly "image/jpeg": readonly [".jpg", ".jpeg"];
    readonly "image/png": readonly [".png"];
    readonly "image/gif": readonly [".gif"];
    readonly "image/webp": readonly [".webp"];
};
type OtherContentType = keyof typeof supportedOtherFileFormats;
type ImageContentType = keyof typeof supportedImageFileFormats;
export declare const supportedFileExtensions: string[];
export type SupportedFileContentType = OtherContentType | ImageContentType;
export declare function isSupportedFileContentType(contentType: string): contentType is SupportedFileContentType;
export declare function isSupportedPlainTextContentType(contentType: string): contentType is OtherContentType;
export declare function isSupportedImageContentType(contentType: string): contentType is ImageContentType;
export declare class Ok<T> {
    value: T;
    constructor(value: T);
    isOk(): this is Ok<T>;
    isErr(): this is Err<never>;
}
export declare class Err<E> {
    error: E;
    constructor(error: E);
    isOk(): this is Ok<never>;
    isErr(): this is Err<E>;
}
export type Result<T, E> = Ok<T> | Err<E>;
declare const ConnectorProvidersSchema: z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">;
export type ConnectorProvider = z.infer<typeof ConnectorProvidersSchema>;
export declare const isConnectorProvider: (provider: string) => provider is "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong";
declare const DataSourceTypeSchema: z.ZodObject<{
    id: z.ZodNumber;
    sId: z.ZodString;
    createdAt: z.ZodNumber;
    name: z.ZodString;
    description: z.ZodNullable<z.ZodString>;
    assistantDefaultSelected: z.ZodBoolean;
    dustAPIProjectId: z.ZodString;
    dustAPIDataSourceId: z.ZodString;
    connectorId: z.ZodNullable<z.ZodString>;
    connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
    editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        editedAt: z.ZodNullable<z.ZodNumber>;
        fullName: z.ZodNullable<z.ZodString>;
        imageUrl: z.ZodNullable<z.ZodString>;
        email: z.ZodNullable<z.ZodString>;
        userId: z.ZodNullable<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        email: string | null;
        editedAt: number | null;
        fullName: string | null;
        imageUrl: string | null;
        userId: string | null;
    }, {
        email: string | null;
        editedAt: number | null;
        fullName: string | null;
        imageUrl: string | null;
        userId: string | null;
    }>>>;
}, "strip", z.ZodTypeAny, {
    id: number;
    sId: string;
    createdAt: number;
    name: string;
    description: string | null;
    assistantDefaultSelected: boolean;
    dustAPIProjectId: string;
    dustAPIDataSourceId: string;
    connectorId: string | null;
    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
    editedByUser?: {
        email: string | null;
        editedAt: number | null;
        fullName: string | null;
        imageUrl: string | null;
        userId: string | null;
    } | null | undefined;
}, {
    id: number;
    sId: string;
    createdAt: number;
    name: string;
    description: string | null;
    assistantDefaultSelected: boolean;
    dustAPIProjectId: string;
    dustAPIDataSourceId: string;
    connectorId: string | null;
    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
    editedByUser?: {
        email: string | null;
        editedAt: number | null;
        fullName: string | null;
        imageUrl: string | null;
        userId: string | null;
    } | null | undefined;
}>;
export type DataSourceType = z.infer<typeof DataSourceTypeSchema>;
export declare function isFolder(ds: DataSourceType): ds is DataSourceType & {
    connectorProvider: null;
};
export declare function isWebsite(ds: DataSourceType): ds is DataSourceType & {
    connectorProvider: "webcrawler";
};
declare const CoreAPIRowSchema: z.ZodObject<{
    row_id: z.ZodString;
    value: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodNumber, z.ZodString, z.ZodBoolean, z.ZodObject<{
        type: z.ZodLiteral<"datetime">;
        epoch: z.ZodNumber;
        string_value: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "datetime";
        epoch: number;
        string_value?: string | undefined;
    }, {
        type: "datetime";
        epoch: number;
        string_value?: string | undefined;
    }>, z.ZodNull]>>;
}, "strip", z.ZodTypeAny, {
    value: Record<string, string | number | boolean | {
        type: "datetime";
        epoch: number;
        string_value?: string | undefined;
    } | null>;
    row_id: string;
}, {
    value: Record<string, string | number | boolean | {
        type: "datetime";
        epoch: number;
        string_value?: string | undefined;
    } | null>;
    row_id: string;
}>;
export type CoreAPIRowType = z.infer<typeof CoreAPIRowSchema>;
declare const CoreAPITablePublicSchema: z.ZodObject<{
    table_id: z.ZodString;
    name: z.ZodString;
    description: z.ZodString;
    schema: z.ZodNullable<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        value_type: z.ZodEnum<["int", "float", "text", "bool", "datetime"]>;
        possible_values: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        value_type: "text" | "float" | "datetime" | "int" | "bool";
        possible_values?: string[] | null | undefined;
    }, {
        name: string;
        value_type: "text" | "float" | "datetime" | "int" | "bool";
        possible_values?: string[] | null | undefined;
    }>, "many">>;
    timestamp: z.ZodNumber;
    tags: z.ZodArray<z.ZodString, "many">;
    parents: z.ZodArray<z.ZodString, "many">;
    parent_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    mime_type: z.ZodOptional<z.ZodString>;
    title: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    schema: {
        name: string;
        value_type: "text" | "float" | "datetime" | "int" | "bool";
        possible_values?: string[] | null | undefined;
    }[] | null;
    name: string;
    description: string;
    timestamp: number;
    tags: string[];
    table_id: string;
    parents: string[];
    parent_id?: string | null | undefined;
    mime_type?: string | undefined;
    title?: string | undefined;
}, {
    schema: {
        name: string;
        value_type: "text" | "float" | "datetime" | "int" | "bool";
        possible_values?: string[] | null | undefined;
    }[] | null;
    name: string;
    description: string;
    timestamp: number;
    tags: string[];
    table_id: string;
    parents: string[];
    parent_id?: string | null | undefined;
    mime_type?: string | undefined;
    title?: string | undefined;
}>;
export type CoreAPITablePublic = z.infer<typeof CoreAPITablePublicSchema>;
export interface LoggerInterface {
    error: (args: Record<string, unknown>, message: string) => void;
    info: (args: Record<string, unknown>, message: string) => void;
    trace: (args: Record<string, unknown>, message: string) => void;
    warn: (args: Record<string, unknown>, message: string) => void;
}
export declare const GenerationTokensEventSchema: z.ZodObject<{
    type: z.ZodLiteral<"generation_tokens">;
    created: z.ZodNumber;
    configurationId: z.ZodString;
    messageId: z.ZodString;
    text: z.ZodString;
    classification: z.ZodUnion<[z.ZodType<"tokens" | "chain_of_thought", z.ZodTypeDef, "tokens" | "chain_of_thought">, z.ZodEnum<["opening_delimiter", "closing_delimiter"]>]>;
    delimiterClassification: z.ZodOptional<z.ZodNullable<z.ZodType<"tokens" | "chain_of_thought", z.ZodTypeDef, "tokens" | "chain_of_thought">>>;
}, "strip", z.ZodTypeAny, {
    type: "generation_tokens";
    text: string;
    created: number;
    configurationId: string;
    messageId: string;
    classification: "tokens" | "chain_of_thought" | "opening_delimiter" | "closing_delimiter";
    delimiterClassification?: "tokens" | "chain_of_thought" | null | undefined;
}, {
    type: "generation_tokens";
    text: string;
    created: number;
    configurationId: string;
    messageId: string;
    classification: "tokens" | "chain_of_thought" | "opening_delimiter" | "closing_delimiter";
    delimiterClassification?: "tokens" | "chain_of_thought" | null | undefined;
}>;
export type GenerationTokensEvent = z.infer<typeof GenerationTokensEventSchema>;
declare const BrowseActionTypeSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
}, {
    agentMessageId: z.ZodNumber;
    urls: z.ZodArray<z.ZodString, "many">;
    output: z.ZodNullable<z.ZodObject<{
        results: z.ZodArray<z.ZodObject<{
            requestedUrl: z.ZodString;
            browsedUrl: z.ZodString;
            content: z.ZodString;
            responseCode: z.ZodString;
            errorMessage: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            requestedUrl: string;
            browsedUrl: string;
            content: string;
            responseCode: string;
            errorMessage: string;
        }, {
            requestedUrl: string;
            browsedUrl: string;
            content: string;
            responseCode: string;
            errorMessage: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        results: {
            requestedUrl: string;
            browsedUrl: string;
            content: string;
            responseCode: string;
            errorMessage: string;
        }[];
    }, {
        results: {
            requestedUrl: string;
            browsedUrl: string;
            content: string;
            responseCode: string;
            errorMessage: string;
        }[];
    }>>;
    functionCallId: z.ZodNullable<z.ZodString>;
    functionCallName: z.ZodNullable<z.ZodString>;
    step: z.ZodNumber;
    type: z.ZodLiteral<"browse_action">;
}>, "strip", z.ZodTypeAny, {
    type: "browse_action";
    id: number;
    agentMessageId: number;
    urls: string[];
    output: {
        results: {
            requestedUrl: string;
            browsedUrl: string;
            content: string;
            responseCode: string;
            errorMessage: string;
        }[];
    } | null;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
}, {
    type: "browse_action";
    id: number;
    agentMessageId: number;
    urls: string[];
    output: {
        results: {
            requestedUrl: string;
            browsedUrl: string;
            content: string;
            responseCode: string;
            errorMessage: string;
        }[];
    } | null;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
}>;
type BrowseActionPublicType = z.infer<typeof BrowseActionTypeSchema>;
declare const SearchLabelsActionTypeSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
}, {
    agentMessageId: z.ZodNumber;
    output: z.ZodNullable<z.ZodObject<{
        tags: z.ZodArray<z.ZodObject<{
            tag: z.ZodString;
            match_count: z.ZodNumber;
            data_sources: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            tag: string;
            match_count: number;
            data_sources: string[];
        }, {
            tag: string;
            match_count: number;
            data_sources: string[];
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        tags: {
            tag: string;
            match_count: number;
            data_sources: string[];
        }[];
    }, {
        tags: {
            tag: string;
            match_count: number;
            data_sources: string[];
        }[];
    }>>;
    functionCallId: z.ZodNullable<z.ZodString>;
    functionCallName: z.ZodNullable<z.ZodString>;
    step: z.ZodNumber;
    type: z.ZodLiteral<"search_labels_action">;
}>, "strip", z.ZodTypeAny, {
    type: "search_labels_action";
    id: number;
    agentMessageId: number;
    output: {
        tags: {
            tag: string;
            match_count: number;
            data_sources: string[];
        }[];
    } | null;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
}, {
    type: "search_labels_action";
    id: number;
    agentMessageId: number;
    output: {
        tags: {
            tag: string;
            match_count: number;
            data_sources: string[];
        }[];
    } | null;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
}>;
type SearchLabelsActionPublicType = z.infer<typeof SearchLabelsActionTypeSchema>;
declare const ReasoningActionTypeSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
}, {
    agentMessageId: z.ZodNumber;
    output: z.ZodNullable<z.ZodString>;
    thinking: z.ZodNullable<z.ZodString>;
    functionCallId: z.ZodNullable<z.ZodString>;
    functionCallName: z.ZodNullable<z.ZodString>;
    step: z.ZodNumber;
    type: z.ZodLiteral<"reasoning_action">;
}>, "strip", z.ZodTypeAny, {
    type: "reasoning_action";
    id: number;
    agentMessageId: number;
    output: string | null;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    thinking: string | null;
}, {
    type: "reasoning_action";
    id: number;
    agentMessageId: number;
    output: string | null;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    thinking: string | null;
}>;
type ReasoningActionPublicType = z.infer<typeof ReasoningActionTypeSchema>;
declare const DustAppRunActionTypeSchema: z.ZodEffects<z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
}, {
    agentMessageId: z.ZodNumber;
    appWorkspaceId: z.ZodString;
    appId: z.ZodString;
    appName: z.ZodString;
    params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
    runningBlock: z.ZodNullable<z.ZodObject<{
        type: z.ZodString;
        name: z.ZodString;
        status: z.ZodEnum<["running", "succeeded", "errored"]>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        status: "running" | "succeeded" | "errored";
        name: string;
    }, {
        type: string;
        status: "running" | "succeeded" | "errored";
        name: string;
    }>>;
    output: z.ZodNullable<z.ZodUnknown>;
    functionCallId: z.ZodNullable<z.ZodString>;
    functionCallName: z.ZodNullable<z.ZodString>;
    step: z.ZodNumber;
    type: z.ZodLiteral<"dust_app_run_action">;
}>, "strip", z.ZodTypeAny, {
    type: "dust_app_run_action";
    params: Record<string, string | number | boolean>;
    id: number;
    agentMessageId: number;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    appWorkspaceId: string;
    appId: string;
    appName: string;
    runningBlock: {
        type: string;
        status: "running" | "succeeded" | "errored";
        name: string;
    } | null;
    output?: unknown;
}, {
    type: "dust_app_run_action";
    params: Record<string, string | number | boolean>;
    id: number;
    agentMessageId: number;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    appWorkspaceId: string;
    appId: string;
    appName: string;
    runningBlock: {
        type: string;
        status: "running" | "succeeded" | "errored";
        name: string;
    } | null;
    output?: unknown;
}>, {
    output: unknown;
    type: "dust_app_run_action";
    params: Record<string, string | number | boolean>;
    id: number;
    agentMessageId: number;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    appWorkspaceId: string;
    appId: string;
    appName: string;
    runningBlock: {
        type: string;
        status: "running" | "succeeded" | "errored";
        name: string;
    } | null;
}, {
    type: "dust_app_run_action";
    params: Record<string, string | number | boolean>;
    id: number;
    agentMessageId: number;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    appWorkspaceId: string;
    appId: string;
    appName: string;
    runningBlock: {
        type: string;
        status: "running" | "succeeded" | "errored";
        name: string;
    } | null;
    output?: unknown;
}>;
type DustAppRunActionPublicType = z.infer<typeof DustAppRunActionTypeSchema>;
declare const DataSourceViewSchema: z.ZodObject<{
    category: z.ZodType<"folder" | "managed" | "website" | "apps" | "actions", z.ZodTypeDef, "folder" | "managed" | "website" | "apps" | "actions">;
    createdAt: z.ZodNumber;
    dataSource: z.ZodObject<{
        id: z.ZodNumber;
        sId: z.ZodString;
        createdAt: z.ZodNumber;
        name: z.ZodString;
        description: z.ZodNullable<z.ZodString>;
        assistantDefaultSelected: z.ZodBoolean;
        dustAPIProjectId: z.ZodString;
        dustAPIDataSourceId: z.ZodString;
        connectorId: z.ZodNullable<z.ZodString>;
        connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
        editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            editedAt: z.ZodNullable<z.ZodNumber>;
            fullName: z.ZodNullable<z.ZodString>;
            imageUrl: z.ZodNullable<z.ZodString>;
            email: z.ZodNullable<z.ZodString>;
            userId: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        }, {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        sId: string;
        createdAt: number;
        name: string;
        description: string | null;
        assistantDefaultSelected: boolean;
        dustAPIProjectId: string;
        dustAPIDataSourceId: string;
        connectorId: string | null;
        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }, {
        id: number;
        sId: string;
        createdAt: number;
        name: string;
        description: string | null;
        assistantDefaultSelected: boolean;
        dustAPIProjectId: string;
        dustAPIDataSourceId: string;
        connectorId: string | null;
        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }>;
    editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        editedAt: z.ZodNullable<z.ZodNumber>;
        fullName: z.ZodNullable<z.ZodString>;
        imageUrl: z.ZodNullable<z.ZodString>;
        email: z.ZodNullable<z.ZodString>;
        userId: z.ZodNullable<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        email: string | null;
        editedAt: number | null;
        fullName: string | null;
        imageUrl: string | null;
        userId: string | null;
    }, {
        email: string | null;
        editedAt: number | null;
        fullName: string | null;
        imageUrl: string | null;
        userId: string | null;
    }>>>;
    id: z.ZodNumber;
    kind: z.ZodType<"custom" | "default", z.ZodTypeDef, "custom" | "default">;
    parentsIn: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
    sId: z.ZodString;
    updatedAt: z.ZodNumber;
    spaceId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    category: "folder" | "managed" | "website" | "apps" | "actions";
    id: number;
    sId: string;
    createdAt: number;
    dataSource: {
        id: number;
        sId: string;
        createdAt: number;
        name: string;
        description: string | null;
        assistantDefaultSelected: boolean;
        dustAPIProjectId: string;
        dustAPIDataSourceId: string;
        connectorId: string | null;
        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    };
    kind: "custom" | "default";
    parentsIn: string[] | null;
    updatedAt: number;
    spaceId: string;
    editedByUser?: {
        email: string | null;
        editedAt: number | null;
        fullName: string | null;
        imageUrl: string | null;
        userId: string | null;
    } | null | undefined;
}, {
    category: "folder" | "managed" | "website" | "apps" | "actions";
    id: number;
    sId: string;
    createdAt: number;
    dataSource: {
        id: number;
        sId: string;
        createdAt: number;
        name: string;
        description: string | null;
        assistantDefaultSelected: boolean;
        dustAPIProjectId: string;
        dustAPIDataSourceId: string;
        connectorId: string | null;
        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    };
    kind: "custom" | "default";
    parentsIn: string[] | null;
    updatedAt: number;
    spaceId: string;
    editedByUser?: {
        email: string | null;
        editedAt: number | null;
        fullName: string | null;
        imageUrl: string | null;
        userId: string | null;
    } | null | undefined;
}>;
export type DataSourceViewType = z.infer<typeof DataSourceViewSchema>;
declare const RetrievalDocumentTypeSchema: z.ZodObject<{
    chunks: z.ZodArray<z.ZodObject<{
        offset: z.ZodNumber;
        score: z.ZodNullable<z.ZodNumber>;
        text: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        text: string;
        offset: number;
        score: number | null;
    }, {
        text: string;
        offset: number;
        score: number | null;
    }>, "many">;
    documentId: z.ZodString;
    dataSourceView: z.ZodNullable<z.ZodObject<{
        category: z.ZodType<"folder" | "managed" | "website" | "apps" | "actions", z.ZodTypeDef, "folder" | "managed" | "website" | "apps" | "actions">;
        createdAt: z.ZodNumber;
        dataSource: z.ZodObject<{
            id: z.ZodNumber;
            sId: z.ZodString;
            createdAt: z.ZodNumber;
            name: z.ZodString;
            description: z.ZodNullable<z.ZodString>;
            assistantDefaultSelected: z.ZodBoolean;
            dustAPIProjectId: z.ZodString;
            dustAPIDataSourceId: z.ZodString;
            connectorId: z.ZodNullable<z.ZodString>;
            connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
            editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                editedAt: z.ZodNullable<z.ZodNumber>;
                fullName: z.ZodNullable<z.ZodString>;
                imageUrl: z.ZodNullable<z.ZodString>;
                email: z.ZodNullable<z.ZodString>;
                userId: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            }, {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }, {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }>;
        editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            editedAt: z.ZodNullable<z.ZodNumber>;
            fullName: z.ZodNullable<z.ZodString>;
            imageUrl: z.ZodNullable<z.ZodString>;
            email: z.ZodNullable<z.ZodString>;
            userId: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        }, {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        }>>>;
        id: z.ZodNumber;
        kind: z.ZodType<"custom" | "default", z.ZodTypeDef, "custom" | "default">;
        parentsIn: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
        sId: z.ZodString;
        updatedAt: z.ZodNumber;
        spaceId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }, {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }>>;
    id: z.ZodNumber;
    reference: z.ZodString;
    score: z.ZodNullable<z.ZodNumber>;
    sourceUrl: z.ZodNullable<z.ZodString>;
    tags: z.ZodArray<z.ZodString, "many">;
    timestamp: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    id: number;
    score: number | null;
    timestamp: number;
    tags: string[];
    chunks: {
        text: string;
        offset: number;
        score: number | null;
    }[];
    documentId: string;
    dataSourceView: {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    } | null;
    reference: string;
    sourceUrl: string | null;
}, {
    id: number;
    score: number | null;
    timestamp: number;
    tags: string[];
    chunks: {
        text: string;
        offset: number;
        score: number | null;
    }[];
    documentId: string;
    dataSourceView: {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    } | null;
    reference: string;
    sourceUrl: string | null;
}>;
export type RetrievalDocumentPublicType = z.infer<typeof RetrievalDocumentTypeSchema>;
declare const RetrievalActionTypeSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
}, {
    agentMessageId: z.ZodNumber;
    params: z.ZodObject<{
        relativeTimeFrame: z.ZodNullable<z.ZodObject<{
            duration: z.ZodNumber;
            unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
        }, "strip", z.ZodTypeAny, {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        }, {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        }>>;
        query: z.ZodNullable<z.ZodString>;
        topK: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        relativeTimeFrame: {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        } | null;
        query: string | null;
        topK: number;
    }, {
        relativeTimeFrame: {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        } | null;
        query: string | null;
        topK: number;
    }>;
    functionCallId: z.ZodNullable<z.ZodString>;
    functionCallName: z.ZodNullable<z.ZodString>;
    documents: z.ZodNullable<z.ZodArray<z.ZodObject<{
        chunks: z.ZodArray<z.ZodObject<{
            offset: z.ZodNumber;
            score: z.ZodNullable<z.ZodNumber>;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            text: string;
            offset: number;
            score: number | null;
        }, {
            text: string;
            offset: number;
            score: number | null;
        }>, "many">;
        documentId: z.ZodString;
        dataSourceView: z.ZodNullable<z.ZodObject<{
            category: z.ZodType<"folder" | "managed" | "website" | "apps" | "actions", z.ZodTypeDef, "folder" | "managed" | "website" | "apps" | "actions">;
            createdAt: z.ZodNumber;
            dataSource: z.ZodObject<{
                id: z.ZodNumber;
                sId: z.ZodString;
                createdAt: z.ZodNumber;
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                assistantDefaultSelected: z.ZodBoolean;
                dustAPIProjectId: z.ZodString;
                dustAPIDataSourceId: z.ZodString;
                connectorId: z.ZodNullable<z.ZodString>;
                connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
                editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    editedAt: z.ZodNullable<z.ZodNumber>;
                    fullName: z.ZodNullable<z.ZodString>;
                    imageUrl: z.ZodNullable<z.ZodString>;
                    email: z.ZodNullable<z.ZodString>;
                    userId: z.ZodNullable<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                }, {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            }, {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            }>;
            editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                editedAt: z.ZodNullable<z.ZodNumber>;
                fullName: z.ZodNullable<z.ZodString>;
                imageUrl: z.ZodNullable<z.ZodString>;
                email: z.ZodNullable<z.ZodString>;
                userId: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            }, {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            }>>>;
            id: z.ZodNumber;
            kind: z.ZodType<"custom" | "default", z.ZodTypeDef, "custom" | "default">;
            parentsIn: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
            sId: z.ZodString;
            updatedAt: z.ZodNumber;
            spaceId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            category: "folder" | "managed" | "website" | "apps" | "actions";
            id: number;
            sId: string;
            createdAt: number;
            dataSource: {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            };
            kind: "custom" | "default";
            parentsIn: string[] | null;
            updatedAt: number;
            spaceId: string;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }, {
            category: "folder" | "managed" | "website" | "apps" | "actions";
            id: number;
            sId: string;
            createdAt: number;
            dataSource: {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            };
            kind: "custom" | "default";
            parentsIn: string[] | null;
            updatedAt: number;
            spaceId: string;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }>>;
        id: z.ZodNumber;
        reference: z.ZodString;
        score: z.ZodNullable<z.ZodNumber>;
        sourceUrl: z.ZodNullable<z.ZodString>;
        tags: z.ZodArray<z.ZodString, "many">;
        timestamp: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: number;
        score: number | null;
        timestamp: number;
        tags: string[];
        chunks: {
            text: string;
            offset: number;
            score: number | null;
        }[];
        documentId: string;
        dataSourceView: {
            category: "folder" | "managed" | "website" | "apps" | "actions";
            id: number;
            sId: string;
            createdAt: number;
            dataSource: {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            };
            kind: "custom" | "default";
            parentsIn: string[] | null;
            updatedAt: number;
            spaceId: string;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        } | null;
        reference: string;
        sourceUrl: string | null;
    }, {
        id: number;
        score: number | null;
        timestamp: number;
        tags: string[];
        chunks: {
            text: string;
            offset: number;
            score: number | null;
        }[];
        documentId: string;
        dataSourceView: {
            category: "folder" | "managed" | "website" | "apps" | "actions";
            id: number;
            sId: string;
            createdAt: number;
            dataSource: {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            };
            kind: "custom" | "default";
            parentsIn: string[] | null;
            updatedAt: number;
            spaceId: string;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        } | null;
        reference: string;
        sourceUrl: string | null;
    }>, "many">>;
    step: z.ZodNumber;
    type: z.ZodLiteral<"retrieval_action">;
}>, "strip", z.ZodTypeAny, {
    type: "retrieval_action";
    params: {
        relativeTimeFrame: {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        } | null;
        query: string | null;
        topK: number;
    };
    id: number;
    agentMessageId: number;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    documents: {
        id: number;
        score: number | null;
        timestamp: number;
        tags: string[];
        chunks: {
            text: string;
            offset: number;
            score: number | null;
        }[];
        documentId: string;
        dataSourceView: {
            category: "folder" | "managed" | "website" | "apps" | "actions";
            id: number;
            sId: string;
            createdAt: number;
            dataSource: {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            };
            kind: "custom" | "default";
            parentsIn: string[] | null;
            updatedAt: number;
            spaceId: string;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        } | null;
        reference: string;
        sourceUrl: string | null;
    }[] | null;
}, {
    type: "retrieval_action";
    params: {
        relativeTimeFrame: {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        } | null;
        query: string | null;
        topK: number;
    };
    id: number;
    agentMessageId: number;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    documents: {
        id: number;
        score: number | null;
        timestamp: number;
        tags: string[];
        chunks: {
            text: string;
            offset: number;
            score: number | null;
        }[];
        documentId: string;
        dataSourceView: {
            category: "folder" | "managed" | "website" | "apps" | "actions";
            id: number;
            sId: string;
            createdAt: number;
            dataSource: {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            };
            kind: "custom" | "default";
            parentsIn: string[] | null;
            updatedAt: number;
            spaceId: string;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        } | null;
        reference: string;
        sourceUrl: string | null;
    }[] | null;
}>;
export type RetrievalActionPublicType = z.infer<typeof RetrievalActionTypeSchema>;
declare const ProcessActionTypeSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
}, {
    agentMessageId: z.ZodNumber;
    params: z.ZodObject<{
        relativeTimeFrame: z.ZodNullable<z.ZodObject<{
            duration: z.ZodNumber;
            unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
        }, "strip", z.ZodTypeAny, {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        }, {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        }>>;
    }, "strip", z.ZodTypeAny, {
        relativeTimeFrame: {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        } | null;
    }, {
        relativeTimeFrame: {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        } | null;
    }>;
    schema: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        type: z.ZodEnum<["string", "number", "boolean"]>;
        description: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "string" | "number" | "boolean";
        name: string;
        description: string;
    }, {
        type: "string" | "number" | "boolean";
        name: string;
        description: string;
    }>, "many">;
    outputs: z.ZodNullable<z.ZodObject<{
        data: z.ZodArray<z.ZodUnknown, "many">;
        min_timestamp: z.ZodNumber;
        total_documents: z.ZodNumber;
        total_chunks: z.ZodNumber;
        total_tokens: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        data: unknown[];
        min_timestamp: number;
        total_documents: number;
        total_chunks: number;
        total_tokens: number;
    }, {
        data: unknown[];
        min_timestamp: number;
        total_documents: number;
        total_chunks: number;
        total_tokens: number;
    }>>;
    functionCallId: z.ZodNullable<z.ZodString>;
    functionCallName: z.ZodNullable<z.ZodString>;
    step: z.ZodNumber;
    type: z.ZodLiteral<"process_action">;
}>, "strip", z.ZodTypeAny, {
    schema: {
        type: "string" | "number" | "boolean";
        name: string;
        description: string;
    }[];
    type: "process_action";
    params: {
        relativeTimeFrame: {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        } | null;
    };
    id: number;
    agentMessageId: number;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    outputs: {
        data: unknown[];
        min_timestamp: number;
        total_documents: number;
        total_chunks: number;
        total_tokens: number;
    } | null;
}, {
    schema: {
        type: "string" | "number" | "boolean";
        name: string;
        description: string;
    }[];
    type: "process_action";
    params: {
        relativeTimeFrame: {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        } | null;
    };
    id: number;
    agentMessageId: number;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    outputs: {
        data: unknown[];
        min_timestamp: number;
        total_documents: number;
        total_chunks: number;
        total_tokens: number;
    } | null;
}>;
type ProcessActionPublicType = z.infer<typeof ProcessActionTypeSchema>;
declare const TablesQueryActionTypeSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
}, {
    params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
    output: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
    resultsFileId: z.ZodNullable<z.ZodString>;
    resultsFileSnippet: z.ZodNullable<z.ZodString>;
    sectionFileId: z.ZodNullable<z.ZodString>;
    functionCallId: z.ZodNullable<z.ZodString>;
    functionCallName: z.ZodNullable<z.ZodString>;
    agentMessageId: z.ZodNumber;
    step: z.ZodNumber;
    type: z.ZodLiteral<"tables_query_action">;
}>, "strip", z.ZodTypeAny, {
    type: "tables_query_action";
    params: Record<string, string | number | boolean>;
    id: number;
    agentMessageId: number;
    output: Record<string, string | number | boolean> | null;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    resultsFileId: string | null;
    resultsFileSnippet: string | null;
    sectionFileId: string | null;
}, {
    type: "tables_query_action";
    params: Record<string, string | number | boolean>;
    id: number;
    agentMessageId: number;
    output: Record<string, string | number | boolean> | null;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    resultsFileId: string | null;
    resultsFileSnippet: string | null;
    sectionFileId: string | null;
}>;
type TablesQueryActionPublicType = z.infer<typeof TablesQueryActionTypeSchema>;
declare const WhitelistableFeaturesSchema: z.ZodType<"usage_data_api" | "okta_enterprise_connection" | "co_edition" | "labs_transcripts" | "labs_connection_hubspot" | "labs_connection_linear" | "labs_trackers" | "labs_salesforce_personal_connections" | "document_tracker" | "openai_o1_feature" | "openai_o1_mini_feature" | "openai_o1_high_reasoning_feature" | "openai_o1_custom_assistants_feature" | "openai_o1_high_reasoning_custom_assistants_feature" | "deepseek_feature" | "google_ai_studio_experimental_models_feature" | "snowflake_connector_feature" | "index_private_slack_channel" | "disable_run_logs" | "show_debug_tools" | "deepseek_r1_global_agent_feature" | "salesforce_feature" | "advanced_notion_management" | "search_knowledge_builder" | "force_gdrive_labels_scope" | "claude_3_7_reasoning" | "mcp_actions" | "dev_mcp_actions" | "agent_discovery", z.ZodTypeDef, "usage_data_api" | "okta_enterprise_connection" | "co_edition" | "labs_transcripts" | "labs_connection_hubspot" | "labs_connection_linear" | "labs_trackers" | "labs_salesforce_personal_connections" | "document_tracker" | "openai_o1_feature" | "openai_o1_mini_feature" | "openai_o1_high_reasoning_feature" | "openai_o1_custom_assistants_feature" | "openai_o1_high_reasoning_custom_assistants_feature" | "deepseek_feature" | "google_ai_studio_experimental_models_feature" | "snowflake_connector_feature" | "index_private_slack_channel" | "disable_run_logs" | "show_debug_tools" | "deepseek_r1_global_agent_feature" | "salesforce_feature" | "advanced_notion_management" | "search_knowledge_builder" | "force_gdrive_labels_scope" | "claude_3_7_reasoning" | "mcp_actions" | "dev_mcp_actions" | "agent_discovery">;
export type WhitelistableFeature = z.infer<typeof WhitelistableFeaturesSchema>;
declare const LightWorkspaceSchema: z.ZodObject<{
    id: z.ZodNumber;
    sId: z.ZodString;
    name: z.ZodString;
    role: z.ZodEnum<["admin", "builder", "user", "none"]>;
    segmentation: z.ZodNullable<z.ZodType<"interesting", z.ZodTypeDef, "interesting">>;
    whiteListedProviders: z.ZodNullable<z.ZodArray<z.ZodType<"openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks", z.ZodTypeDef, "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks">, "many">>;
    defaultEmbeddingProvider: z.ZodNullable<z.ZodType<"openai" | "mistral", z.ZodTypeDef, "openai" | "mistral">>;
}, "strip", z.ZodTypeAny, {
    id: number;
    sId: string;
    name: string;
    role: "admin" | "builder" | "user" | "none";
    segmentation: "interesting" | null;
    whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
    defaultEmbeddingProvider: "openai" | "mistral" | null;
}, {
    id: number;
    sId: string;
    name: string;
    role: "admin" | "builder" | "user" | "none";
    segmentation: "interesting" | null;
    whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
    defaultEmbeddingProvider: "openai" | "mistral" | null;
}>;
export type LightWorkspaceType = z.infer<typeof LightWorkspaceSchema>;
export type WorkspaceType = z.infer<typeof WorkspaceSchema>;
export type ExtensionWorkspaceType = z.infer<typeof ExtensionWorkspaceSchema>;
declare const WorkspaceSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    sId: z.ZodString;
    name: z.ZodString;
    role: z.ZodEnum<["admin", "builder", "user", "none"]>;
    segmentation: z.ZodNullable<z.ZodType<"interesting", z.ZodTypeDef, "interesting">>;
    whiteListedProviders: z.ZodNullable<z.ZodArray<z.ZodType<"openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks", z.ZodTypeDef, "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks">, "many">>;
    defaultEmbeddingProvider: z.ZodNullable<z.ZodType<"openai" | "mistral", z.ZodTypeDef, "openai" | "mistral">>;
}, {
    ssoEnforced: z.ZodOptional<z.ZodBoolean>;
}>, "strip", z.ZodTypeAny, {
    id: number;
    sId: string;
    name: string;
    role: "admin" | "builder" | "user" | "none";
    segmentation: "interesting" | null;
    whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
    defaultEmbeddingProvider: "openai" | "mistral" | null;
    ssoEnforced?: boolean | undefined;
}, {
    id: number;
    sId: string;
    name: string;
    role: "admin" | "builder" | "user" | "none";
    segmentation: "interesting" | null;
    whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
    defaultEmbeddingProvider: "openai" | "mistral" | null;
    ssoEnforced?: boolean | undefined;
}>;
declare const ExtensionWorkspaceSchema: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    sId: z.ZodString;
    name: z.ZodString;
    role: z.ZodEnum<["admin", "builder", "user", "none"]>;
    segmentation: z.ZodNullable<z.ZodType<"interesting", z.ZodTypeDef, "interesting">>;
    whiteListedProviders: z.ZodNullable<z.ZodArray<z.ZodType<"openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks", z.ZodTypeDef, "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks">, "many">>;
    defaultEmbeddingProvider: z.ZodNullable<z.ZodType<"openai" | "mistral", z.ZodTypeDef, "openai" | "mistral">>;
}, {
    ssoEnforced: z.ZodOptional<z.ZodBoolean>;
}>, {
    blacklistedDomains: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
}>, "strip", z.ZodTypeAny, {
    id: number;
    sId: string;
    name: string;
    role: "admin" | "builder" | "user" | "none";
    segmentation: "interesting" | null;
    whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
    defaultEmbeddingProvider: "openai" | "mistral" | null;
    blacklistedDomains: string[] | null;
    ssoEnforced?: boolean | undefined;
}, {
    id: number;
    sId: string;
    name: string;
    role: "admin" | "builder" | "user" | "none";
    segmentation: "interesting" | null;
    whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
    defaultEmbeddingProvider: "openai" | "mistral" | null;
    blacklistedDomains: string[] | null;
    ssoEnforced?: boolean | undefined;
}>;
declare const UserSchema: z.ZodObject<{
    sId: z.ZodString;
    id: z.ZodNumber;
    createdAt: z.ZodNumber;
    provider: z.ZodNullable<z.ZodType<"github" | "google" | "auth0" | "okta" | "samlp" | "waad", z.ZodTypeDef, "github" | "google" | "auth0" | "okta" | "samlp" | "waad">>;
    username: z.ZodString;
    email: z.ZodString;
    firstName: z.ZodString;
    lastName: z.ZodNullable<z.ZodString>;
    fullName: z.ZodString;
    image: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
    email: string;
    fullName: string;
    id: number;
    sId: string;
    createdAt: number;
    username: string;
    firstName: string;
    lastName: string | null;
    image: string | null;
}, {
    provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
    email: string;
    fullName: string;
    id: number;
    sId: string;
    createdAt: number;
    username: string;
    firstName: string;
    lastName: string | null;
    image: string | null;
}>;
export type UserType = z.infer<typeof UserSchema>;
export declare const WebsearchResultSchema: z.ZodObject<{
    title: z.ZodString;
    snippet: z.ZodString;
    link: z.ZodString;
    reference: z.ZodString;
}, "strip", z.ZodTypeAny, {
    title: string;
    reference: string;
    snippet: string;
    link: string;
}, {
    title: string;
    reference: string;
    snippet: string;
    link: string;
}>;
export type WebsearchResultPublicType = z.infer<typeof WebsearchResultSchema>;
declare const WebsearchActionTypeSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
}, {
    agentMessageId: z.ZodNumber;
    query: z.ZodString;
    output: z.ZodNullable<z.ZodUnion<[z.ZodObject<{
        results: z.ZodArray<z.ZodObject<{
            title: z.ZodString;
            snippet: z.ZodString;
            link: z.ZodString;
            reference: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }, {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        results: {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }[];
    }, {
        results: {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }[];
    }>, z.ZodObject<{
        results: z.ZodArray<z.ZodObject<{
            title: z.ZodString;
            snippet: z.ZodString;
            link: z.ZodString;
            reference: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }, {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }>, "many">;
        error: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        error: string;
        results: {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }[];
    }, {
        error: string;
        results: {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }[];
    }>]>>;
    functionCallId: z.ZodNullable<z.ZodString>;
    functionCallName: z.ZodNullable<z.ZodString>;
    step: z.ZodNumber;
    type: z.ZodLiteral<"websearch_action">;
}>, "strip", z.ZodTypeAny, {
    type: "websearch_action";
    id: number;
    agentMessageId: number;
    output: {
        results: {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }[];
    } | {
        error: string;
        results: {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }[];
    } | null;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    query: string;
}, {
    type: "websearch_action";
    id: number;
    agentMessageId: number;
    output: {
        results: {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }[];
    } | {
        error: string;
        results: {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }[];
    } | null;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    query: string;
}>;
export type WebsearchActionPublicType = z.infer<typeof WebsearchActionTypeSchema>;
declare const MCPActionTypeSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
}, {
    agentMessageId: z.ZodNumber;
    functionCallName: z.ZodNullable<z.ZodString>;
    params: z.ZodUnknown;
    type: z.ZodLiteral<"tool_action">;
}>, "strip", z.ZodTypeAny, {
    type: "tool_action";
    id: number;
    agentMessageId: number;
    functionCallName: string | null;
    params?: unknown;
}, {
    type: "tool_action";
    id: number;
    agentMessageId: number;
    functionCallName: string | null;
    params?: unknown;
}>;
export type MCPActionPublicType = z.infer<typeof MCPActionTypeSchema>;
export declare const AgentConfigurationViewSchema: z.ZodType<"global" | "workspace" | "published" | "all" | "list" | "favorites", z.ZodTypeDef, "global" | "workspace" | "published" | "all" | "list" | "favorites">;
export type AgentConfigurationViewType = z.infer<typeof AgentConfigurationViewSchema>;
declare const LightAgentConfigurationSchema: z.ZodObject<{
    id: z.ZodNumber;
    versionCreatedAt: z.ZodNullable<z.ZodString>;
    sId: z.ZodString;
    version: z.ZodNumber;
    versionAuthorId: z.ZodNullable<z.ZodNumber>;
    instructions: z.ZodNullable<z.ZodString>;
    model: z.ZodObject<{
        providerId: z.ZodType<"openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks", z.ZodTypeDef, "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks">;
        modelId: z.ZodType<"gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1", z.ZodTypeDef, "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1">;
        temperature: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
        modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
        temperature: number;
    }, {
        providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
        modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
        temperature: number;
    }>;
    status: z.ZodUnion<[z.ZodType<"active" | "archived" | "draft", z.ZodTypeDef, "active" | "archived" | "draft">, z.ZodType<"active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace", z.ZodTypeDef, "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace">]>;
    scope: z.ZodType<"global" | "workspace" | "published" | "private", z.ZodTypeDef, "global" | "workspace" | "published" | "private">;
    userFavorite: z.ZodBoolean;
    name: z.ZodString;
    description: z.ZodString;
    pictureUrl: z.ZodString;
    lastAuthors: z.ZodOptional<z.ZodReadonly<z.ZodArray<z.ZodString, "many">>>;
    usage: z.ZodOptional<z.ZodObject<{
        messageCount: z.ZodNumber;
        conversationCount: z.ZodNumber;
        userCount: z.ZodNumber;
        timePeriodSec: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        messageCount: number;
        conversationCount: number;
        userCount: number;
        timePeriodSec: number;
    }, {
        messageCount: number;
        conversationCount: number;
        userCount: number;
        timePeriodSec: number;
    }>>;
    maxStepsPerRun: z.ZodNumber;
    visualizationEnabled: z.ZodBoolean;
    templateId: z.ZodNullable<z.ZodString>;
    groupIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    requestedGroupIds: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
}, "strip", z.ZodTypeAny, {
    status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
    id: number;
    sId: string;
    name: string;
    description: string;
    versionCreatedAt: string | null;
    version: number;
    versionAuthorId: number | null;
    instructions: string | null;
    model: {
        providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
        modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
        temperature: number;
    };
    scope: "global" | "workspace" | "published" | "private";
    userFavorite: boolean;
    pictureUrl: string;
    maxStepsPerRun: number;
    visualizationEnabled: boolean;
    templateId: string | null;
    requestedGroupIds: string[][];
    lastAuthors?: readonly string[] | undefined;
    usage?: {
        messageCount: number;
        conversationCount: number;
        userCount: number;
        timePeriodSec: number;
    } | undefined;
    groupIds?: string[] | undefined;
}, {
    status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
    id: number;
    sId: string;
    name: string;
    description: string;
    versionCreatedAt: string | null;
    version: number;
    versionAuthorId: number | null;
    instructions: string | null;
    model: {
        providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
        modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
        temperature: number;
    };
    scope: "global" | "workspace" | "published" | "private";
    userFavorite: boolean;
    pictureUrl: string;
    maxStepsPerRun: number;
    visualizationEnabled: boolean;
    templateId: string | null;
    requestedGroupIds: string[][];
    lastAuthors?: readonly string[] | undefined;
    usage?: {
        messageCount: number;
        conversationCount: number;
        userCount: number;
        timePeriodSec: number;
    } | undefined;
    groupIds?: string[] | undefined;
}>;
export type LightAgentConfigurationType = z.infer<typeof LightAgentConfigurationSchema>;
export declare const ContentNodeTypeSchema: z.ZodUnion<[z.ZodLiteral<"document">, z.ZodLiteral<"table">, z.ZodLiteral<"folder">]>;
export declare const ContentNodesViewTypeSchema: z.ZodUnion<[z.ZodLiteral<"table">, z.ZodLiteral<"document">, z.ZodLiteral<"all">]>;
export type ContentNodesViewType = z.infer<typeof ContentNodesViewTypeSchema>;
declare const ContentFragmentSchema: z.ZodObject<{
    id: z.ZodNumber;
    sId: z.ZodString;
    fileId: z.ZodNullable<z.ZodString>;
    created: z.ZodNumber;
    type: z.ZodLiteral<"content_fragment">;
    visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
    version: z.ZodNumber;
    sourceUrl: z.ZodNullable<z.ZodString>;
    textUrl: z.ZodString;
    textBytes: z.ZodNullable<z.ZodNumber>;
    title: z.ZodString;
    contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
    context: z.ZodObject<{
        username: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    }, {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    }>;
    contentFragmentId: z.ZodString;
    contentFragmentVersion: z.ZodUnion<[z.ZodLiteral<"latest">, z.ZodLiteral<"superseded">]>;
    contentNodeData: z.ZodNullable<z.ZodObject<{
        nodeId: z.ZodString;
        nodeDataSourceViewId: z.ZodString;
        nodeType: z.ZodUnion<[z.ZodLiteral<"document">, z.ZodLiteral<"table">, z.ZodLiteral<"folder">]>;
        provider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
        spaceName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        nodeDataSourceViewId: string;
        nodeId: string;
        nodeType: "folder" | "table" | "document";
        spaceName: string;
    }, {
        provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        nodeDataSourceViewId: string;
        nodeId: string;
        nodeType: "folder" | "table" | "document";
        spaceName: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "content_fragment";
    id: number;
    sId: string;
    created: number;
    title: string;
    fileId: string | null;
    contentFragmentId: string;
    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
    sourceUrl: string | null;
    version: number;
    visibility: "visible" | "deleted";
    textUrl: string;
    textBytes: number | null;
    context: {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    };
    contentFragmentVersion: "latest" | "superseded";
    contentNodeData: {
        provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        nodeDataSourceViewId: string;
        nodeId: string;
        nodeType: "folder" | "table" | "document";
        spaceName: string;
    } | null;
}, {
    type: "content_fragment";
    id: number;
    sId: string;
    created: number;
    title: string;
    fileId: string | null;
    contentFragmentId: string;
    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
    sourceUrl: string | null;
    version: number;
    visibility: "visible" | "deleted";
    textUrl: string;
    textBytes: number | null;
    context: {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    };
    contentFragmentVersion: "latest" | "superseded";
    contentNodeData: {
        provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        nodeDataSourceViewId: string;
        nodeId: string;
        nodeType: "folder" | "table" | "document";
        spaceName: string;
    } | null;
}>;
export type ContentFragmentType = z.infer<typeof ContentFragmentSchema>;
export type UploadedContentFragmentType = {
    fileId: string;
    title: string;
    url?: string;
};
declare const AgentMentionSchema: z.ZodObject<{
    configurationId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    configurationId: string;
}, {
    configurationId: string;
}>;
export type AgentMentionType = z.infer<typeof AgentMentionSchema>;
declare const UserMessageSchema: z.ZodObject<{
    id: z.ZodNumber;
    created: z.ZodNumber;
    type: z.ZodLiteral<"user_message">;
    sId: z.ZodString;
    visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
    version: z.ZodNumber;
    user: z.ZodNullable<z.ZodObject<{
        sId: z.ZodString;
        id: z.ZodNumber;
        createdAt: z.ZodNumber;
        provider: z.ZodNullable<z.ZodType<"github" | "google" | "auth0" | "okta" | "samlp" | "waad", z.ZodTypeDef, "github" | "google" | "auth0" | "okta" | "samlp" | "waad">>;
        username: z.ZodString;
        email: z.ZodString;
        firstName: z.ZodString;
        lastName: z.ZodNullable<z.ZodString>;
        fullName: z.ZodString;
        image: z.ZodNullable<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
        email: string;
        fullName: string;
        id: number;
        sId: string;
        createdAt: number;
        username: string;
        firstName: string;
        lastName: string | null;
        image: string | null;
    }, {
        provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
        email: string;
        fullName: string;
        id: number;
        sId: string;
        createdAt: number;
        username: string;
        firstName: string;
        lastName: string | null;
        image: string | null;
    }>>;
    mentions: z.ZodArray<z.ZodObject<{
        configurationId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        configurationId: string;
    }, {
        configurationId: string;
    }>, "many">;
    content: z.ZodString;
    context: z.ZodObject<{
        username: z.ZodString;
        timezone: z.ZodEffects<z.ZodString, string, string>;
        fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        origin: z.ZodUnion<[z.ZodUnion<[z.ZodType<"slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email", z.ZodTypeDef, "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email">, z.ZodNull]>, z.ZodUndefined]>;
        localMCPServerIds: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        username: string;
        timezone: string;
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
        origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
        localMCPServerIds?: string[] | null | undefined;
    }, {
        username: string;
        timezone: string;
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
        origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
        localMCPServerIds?: string[] | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "user_message";
    id: number;
    sId: string;
    created: number;
    content: string;
    user: {
        provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
        email: string;
        fullName: string;
        id: number;
        sId: string;
        createdAt: number;
        username: string;
        firstName: string;
        lastName: string | null;
        image: string | null;
    } | null;
    version: number;
    visibility: "visible" | "deleted";
    context: {
        username: string;
        timezone: string;
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
        origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
        localMCPServerIds?: string[] | null | undefined;
    };
    mentions: {
        configurationId: string;
    }[];
}, {
    type: "user_message";
    id: number;
    sId: string;
    created: number;
    content: string;
    user: {
        provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
        email: string;
        fullName: string;
        id: number;
        sId: string;
        createdAt: number;
        username: string;
        firstName: string;
        lastName: string | null;
        image: string | null;
    } | null;
    version: number;
    visibility: "visible" | "deleted";
    context: {
        username: string;
        timezone: string;
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
        origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
        localMCPServerIds?: string[] | null | undefined;
    };
    mentions: {
        configurationId: string;
    }[];
}>;
export type UserMessageType = z.infer<typeof UserMessageSchema>;
declare const UserMessageWithRankTypeSchema: z.ZodIntersection<z.ZodObject<{
    id: z.ZodNumber;
    created: z.ZodNumber;
    type: z.ZodLiteral<"user_message">;
    sId: z.ZodString;
    visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
    version: z.ZodNumber;
    user: z.ZodNullable<z.ZodObject<{
        sId: z.ZodString;
        id: z.ZodNumber;
        createdAt: z.ZodNumber;
        provider: z.ZodNullable<z.ZodType<"github" | "google" | "auth0" | "okta" | "samlp" | "waad", z.ZodTypeDef, "github" | "google" | "auth0" | "okta" | "samlp" | "waad">>;
        username: z.ZodString;
        email: z.ZodString;
        firstName: z.ZodString;
        lastName: z.ZodNullable<z.ZodString>;
        fullName: z.ZodString;
        image: z.ZodNullable<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
        email: string;
        fullName: string;
        id: number;
        sId: string;
        createdAt: number;
        username: string;
        firstName: string;
        lastName: string | null;
        image: string | null;
    }, {
        provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
        email: string;
        fullName: string;
        id: number;
        sId: string;
        createdAt: number;
        username: string;
        firstName: string;
        lastName: string | null;
        image: string | null;
    }>>;
    mentions: z.ZodArray<z.ZodObject<{
        configurationId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        configurationId: string;
    }, {
        configurationId: string;
    }>, "many">;
    content: z.ZodString;
    context: z.ZodObject<{
        username: z.ZodString;
        timezone: z.ZodEffects<z.ZodString, string, string>;
        fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        origin: z.ZodUnion<[z.ZodUnion<[z.ZodType<"slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email", z.ZodTypeDef, "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email">, z.ZodNull]>, z.ZodUndefined]>;
        localMCPServerIds: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        username: string;
        timezone: string;
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
        origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
        localMCPServerIds?: string[] | null | undefined;
    }, {
        username: string;
        timezone: string;
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
        origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
        localMCPServerIds?: string[] | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "user_message";
    id: number;
    sId: string;
    created: number;
    content: string;
    user: {
        provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
        email: string;
        fullName: string;
        id: number;
        sId: string;
        createdAt: number;
        username: string;
        firstName: string;
        lastName: string | null;
        image: string | null;
    } | null;
    version: number;
    visibility: "visible" | "deleted";
    context: {
        username: string;
        timezone: string;
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
        origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
        localMCPServerIds?: string[] | null | undefined;
    };
    mentions: {
        configurationId: string;
    }[];
}, {
    type: "user_message";
    id: number;
    sId: string;
    created: number;
    content: string;
    user: {
        provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
        email: string;
        fullName: string;
        id: number;
        sId: string;
        createdAt: number;
        username: string;
        firstName: string;
        lastName: string | null;
        image: string | null;
    } | null;
    version: number;
    visibility: "visible" | "deleted";
    context: {
        username: string;
        timezone: string;
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
        origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
        localMCPServerIds?: string[] | null | undefined;
    };
    mentions: {
        configurationId: string;
    }[];
}>, z.ZodObject<{
    rank: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    rank: number;
}, {
    rank: number;
}>>;
export type UserMessageWithRankType = z.infer<typeof UserMessageWithRankTypeSchema>;
declare const AgentActionTypeSchema: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
}, {
    agentMessageId: z.ZodNumber;
    params: z.ZodObject<{
        relativeTimeFrame: z.ZodNullable<z.ZodObject<{
            duration: z.ZodNumber;
            unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
        }, "strip", z.ZodTypeAny, {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        }, {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        }>>;
        query: z.ZodNullable<z.ZodString>;
        topK: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        relativeTimeFrame: {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        } | null;
        query: string | null;
        topK: number;
    }, {
        relativeTimeFrame: {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        } | null;
        query: string | null;
        topK: number;
    }>;
    functionCallId: z.ZodNullable<z.ZodString>;
    functionCallName: z.ZodNullable<z.ZodString>;
    documents: z.ZodNullable<z.ZodArray<z.ZodObject<{
        chunks: z.ZodArray<z.ZodObject<{
            offset: z.ZodNumber;
            score: z.ZodNullable<z.ZodNumber>;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            text: string;
            offset: number;
            score: number | null;
        }, {
            text: string;
            offset: number;
            score: number | null;
        }>, "many">;
        documentId: z.ZodString;
        dataSourceView: z.ZodNullable<z.ZodObject<{
            category: z.ZodType<"folder" | "managed" | "website" | "apps" | "actions", z.ZodTypeDef, "folder" | "managed" | "website" | "apps" | "actions">;
            createdAt: z.ZodNumber;
            dataSource: z.ZodObject<{
                id: z.ZodNumber;
                sId: z.ZodString;
                createdAt: z.ZodNumber;
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                assistantDefaultSelected: z.ZodBoolean;
                dustAPIProjectId: z.ZodString;
                dustAPIDataSourceId: z.ZodString;
                connectorId: z.ZodNullable<z.ZodString>;
                connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
                editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    editedAt: z.ZodNullable<z.ZodNumber>;
                    fullName: z.ZodNullable<z.ZodString>;
                    imageUrl: z.ZodNullable<z.ZodString>;
                    email: z.ZodNullable<z.ZodString>;
                    userId: z.ZodNullable<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                }, {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            }, {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            }>;
            editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                editedAt: z.ZodNullable<z.ZodNumber>;
                fullName: z.ZodNullable<z.ZodString>;
                imageUrl: z.ZodNullable<z.ZodString>;
                email: z.ZodNullable<z.ZodString>;
                userId: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            }, {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            }>>>;
            id: z.ZodNumber;
            kind: z.ZodType<"custom" | "default", z.ZodTypeDef, "custom" | "default">;
            parentsIn: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
            sId: z.ZodString;
            updatedAt: z.ZodNumber;
            spaceId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            category: "folder" | "managed" | "website" | "apps" | "actions";
            id: number;
            sId: string;
            createdAt: number;
            dataSource: {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            };
            kind: "custom" | "default";
            parentsIn: string[] | null;
            updatedAt: number;
            spaceId: string;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }, {
            category: "folder" | "managed" | "website" | "apps" | "actions";
            id: number;
            sId: string;
            createdAt: number;
            dataSource: {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            };
            kind: "custom" | "default";
            parentsIn: string[] | null;
            updatedAt: number;
            spaceId: string;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }>>;
        id: z.ZodNumber;
        reference: z.ZodString;
        score: z.ZodNullable<z.ZodNumber>;
        sourceUrl: z.ZodNullable<z.ZodString>;
        tags: z.ZodArray<z.ZodString, "many">;
        timestamp: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: number;
        score: number | null;
        timestamp: number;
        tags: string[];
        chunks: {
            text: string;
            offset: number;
            score: number | null;
        }[];
        documentId: string;
        dataSourceView: {
            category: "folder" | "managed" | "website" | "apps" | "actions";
            id: number;
            sId: string;
            createdAt: number;
            dataSource: {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            };
            kind: "custom" | "default";
            parentsIn: string[] | null;
            updatedAt: number;
            spaceId: string;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        } | null;
        reference: string;
        sourceUrl: string | null;
    }, {
        id: number;
        score: number | null;
        timestamp: number;
        tags: string[];
        chunks: {
            text: string;
            offset: number;
            score: number | null;
        }[];
        documentId: string;
        dataSourceView: {
            category: "folder" | "managed" | "website" | "apps" | "actions";
            id: number;
            sId: string;
            createdAt: number;
            dataSource: {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            };
            kind: "custom" | "default";
            parentsIn: string[] | null;
            updatedAt: number;
            spaceId: string;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        } | null;
        reference: string;
        sourceUrl: string | null;
    }>, "many">>;
    step: z.ZodNumber;
    type: z.ZodLiteral<"retrieval_action">;
}>, "strip", z.ZodTypeAny, {
    type: "retrieval_action";
    params: {
        relativeTimeFrame: {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        } | null;
        query: string | null;
        topK: number;
    };
    id: number;
    agentMessageId: number;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    documents: {
        id: number;
        score: number | null;
        timestamp: number;
        tags: string[];
        chunks: {
            text: string;
            offset: number;
            score: number | null;
        }[];
        documentId: string;
        dataSourceView: {
            category: "folder" | "managed" | "website" | "apps" | "actions";
            id: number;
            sId: string;
            createdAt: number;
            dataSource: {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            };
            kind: "custom" | "default";
            parentsIn: string[] | null;
            updatedAt: number;
            spaceId: string;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        } | null;
        reference: string;
        sourceUrl: string | null;
    }[] | null;
}, {
    type: "retrieval_action";
    params: {
        relativeTimeFrame: {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        } | null;
        query: string | null;
        topK: number;
    };
    id: number;
    agentMessageId: number;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    documents: {
        id: number;
        score: number | null;
        timestamp: number;
        tags: string[];
        chunks: {
            text: string;
            offset: number;
            score: number | null;
        }[];
        documentId: string;
        dataSourceView: {
            category: "folder" | "managed" | "website" | "apps" | "actions";
            id: number;
            sId: string;
            createdAt: number;
            dataSource: {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            };
            kind: "custom" | "default";
            parentsIn: string[] | null;
            updatedAt: number;
            spaceId: string;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        } | null;
        reference: string;
        sourceUrl: string | null;
    }[] | null;
}>, z.ZodEffects<z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
}, {
    agentMessageId: z.ZodNumber;
    appWorkspaceId: z.ZodString;
    appId: z.ZodString;
    appName: z.ZodString;
    params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
    runningBlock: z.ZodNullable<z.ZodObject<{
        type: z.ZodString;
        name: z.ZodString;
        status: z.ZodEnum<["running", "succeeded", "errored"]>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        status: "running" | "succeeded" | "errored";
        name: string;
    }, {
        type: string;
        status: "running" | "succeeded" | "errored";
        name: string;
    }>>;
    output: z.ZodNullable<z.ZodUnknown>;
    functionCallId: z.ZodNullable<z.ZodString>;
    functionCallName: z.ZodNullable<z.ZodString>;
    step: z.ZodNumber;
    type: z.ZodLiteral<"dust_app_run_action">;
}>, "strip", z.ZodTypeAny, {
    type: "dust_app_run_action";
    params: Record<string, string | number | boolean>;
    id: number;
    agentMessageId: number;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    appWorkspaceId: string;
    appId: string;
    appName: string;
    runningBlock: {
        type: string;
        status: "running" | "succeeded" | "errored";
        name: string;
    } | null;
    output?: unknown;
}, {
    type: "dust_app_run_action";
    params: Record<string, string | number | boolean>;
    id: number;
    agentMessageId: number;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    appWorkspaceId: string;
    appId: string;
    appName: string;
    runningBlock: {
        type: string;
        status: "running" | "succeeded" | "errored";
        name: string;
    } | null;
    output?: unknown;
}>, {
    output: unknown;
    type: "dust_app_run_action";
    params: Record<string, string | number | boolean>;
    id: number;
    agentMessageId: number;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    appWorkspaceId: string;
    appId: string;
    appName: string;
    runningBlock: {
        type: string;
        status: "running" | "succeeded" | "errored";
        name: string;
    } | null;
}, {
    type: "dust_app_run_action";
    params: Record<string, string | number | boolean>;
    id: number;
    agentMessageId: number;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    appWorkspaceId: string;
    appId: string;
    appName: string;
    runningBlock: {
        type: string;
        status: "running" | "succeeded" | "errored";
        name: string;
    } | null;
    output?: unknown;
}>, z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
}, {
    params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
    output: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
    resultsFileId: z.ZodNullable<z.ZodString>;
    resultsFileSnippet: z.ZodNullable<z.ZodString>;
    sectionFileId: z.ZodNullable<z.ZodString>;
    functionCallId: z.ZodNullable<z.ZodString>;
    functionCallName: z.ZodNullable<z.ZodString>;
    agentMessageId: z.ZodNumber;
    step: z.ZodNumber;
    type: z.ZodLiteral<"tables_query_action">;
}>, "strip", z.ZodTypeAny, {
    type: "tables_query_action";
    params: Record<string, string | number | boolean>;
    id: number;
    agentMessageId: number;
    output: Record<string, string | number | boolean> | null;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    resultsFileId: string | null;
    resultsFileSnippet: string | null;
    sectionFileId: string | null;
}, {
    type: "tables_query_action";
    params: Record<string, string | number | boolean>;
    id: number;
    agentMessageId: number;
    output: Record<string, string | number | boolean> | null;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    resultsFileId: string | null;
    resultsFileSnippet: string | null;
    sectionFileId: string | null;
}>, z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
}, {
    agentMessageId: z.ZodNumber;
    params: z.ZodObject<{
        relativeTimeFrame: z.ZodNullable<z.ZodObject<{
            duration: z.ZodNumber;
            unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
        }, "strip", z.ZodTypeAny, {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        }, {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        }>>;
    }, "strip", z.ZodTypeAny, {
        relativeTimeFrame: {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        } | null;
    }, {
        relativeTimeFrame: {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        } | null;
    }>;
    schema: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        type: z.ZodEnum<["string", "number", "boolean"]>;
        description: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "string" | "number" | "boolean";
        name: string;
        description: string;
    }, {
        type: "string" | "number" | "boolean";
        name: string;
        description: string;
    }>, "many">;
    outputs: z.ZodNullable<z.ZodObject<{
        data: z.ZodArray<z.ZodUnknown, "many">;
        min_timestamp: z.ZodNumber;
        total_documents: z.ZodNumber;
        total_chunks: z.ZodNumber;
        total_tokens: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        data: unknown[];
        min_timestamp: number;
        total_documents: number;
        total_chunks: number;
        total_tokens: number;
    }, {
        data: unknown[];
        min_timestamp: number;
        total_documents: number;
        total_chunks: number;
        total_tokens: number;
    }>>;
    functionCallId: z.ZodNullable<z.ZodString>;
    functionCallName: z.ZodNullable<z.ZodString>;
    step: z.ZodNumber;
    type: z.ZodLiteral<"process_action">;
}>, "strip", z.ZodTypeAny, {
    schema: {
        type: "string" | "number" | "boolean";
        name: string;
        description: string;
    }[];
    type: "process_action";
    params: {
        relativeTimeFrame: {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        } | null;
    };
    id: number;
    agentMessageId: number;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    outputs: {
        data: unknown[];
        min_timestamp: number;
        total_documents: number;
        total_chunks: number;
        total_tokens: number;
    } | null;
}, {
    schema: {
        type: "string" | "number" | "boolean";
        name: string;
        description: string;
    }[];
    type: "process_action";
    params: {
        relativeTimeFrame: {
            duration: number;
            unit: "hour" | "day" | "week" | "month" | "year";
        } | null;
    };
    id: number;
    agentMessageId: number;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    outputs: {
        data: unknown[];
        min_timestamp: number;
        total_documents: number;
        total_chunks: number;
        total_tokens: number;
    } | null;
}>, z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
}, {
    agentMessageId: z.ZodNumber;
    query: z.ZodString;
    output: z.ZodNullable<z.ZodUnion<[z.ZodObject<{
        results: z.ZodArray<z.ZodObject<{
            title: z.ZodString;
            snippet: z.ZodString;
            link: z.ZodString;
            reference: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }, {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        results: {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }[];
    }, {
        results: {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }[];
    }>, z.ZodObject<{
        results: z.ZodArray<z.ZodObject<{
            title: z.ZodString;
            snippet: z.ZodString;
            link: z.ZodString;
            reference: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }, {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }>, "many">;
        error: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        error: string;
        results: {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }[];
    }, {
        error: string;
        results: {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }[];
    }>]>>;
    functionCallId: z.ZodNullable<z.ZodString>;
    functionCallName: z.ZodNullable<z.ZodString>;
    step: z.ZodNumber;
    type: z.ZodLiteral<"websearch_action">;
}>, "strip", z.ZodTypeAny, {
    type: "websearch_action";
    id: number;
    agentMessageId: number;
    output: {
        results: {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }[];
    } | {
        error: string;
        results: {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }[];
    } | null;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    query: string;
}, {
    type: "websearch_action";
    id: number;
    agentMessageId: number;
    output: {
        results: {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }[];
    } | {
        error: string;
        results: {
            title: string;
            reference: string;
            snippet: string;
            link: string;
        }[];
    } | null;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    query: string;
}>, z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
}, {
    agentMessageId: z.ZodNumber;
    urls: z.ZodArray<z.ZodString, "many">;
    output: z.ZodNullable<z.ZodObject<{
        results: z.ZodArray<z.ZodObject<{
            requestedUrl: z.ZodString;
            browsedUrl: z.ZodString;
            content: z.ZodString;
            responseCode: z.ZodString;
            errorMessage: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            requestedUrl: string;
            browsedUrl: string;
            content: string;
            responseCode: string;
            errorMessage: string;
        }, {
            requestedUrl: string;
            browsedUrl: string;
            content: string;
            responseCode: string;
            errorMessage: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        results: {
            requestedUrl: string;
            browsedUrl: string;
            content: string;
            responseCode: string;
            errorMessage: string;
        }[];
    }, {
        results: {
            requestedUrl: string;
            browsedUrl: string;
            content: string;
            responseCode: string;
            errorMessage: string;
        }[];
    }>>;
    functionCallId: z.ZodNullable<z.ZodString>;
    functionCallName: z.ZodNullable<z.ZodString>;
    step: z.ZodNumber;
    type: z.ZodLiteral<"browse_action">;
}>, "strip", z.ZodTypeAny, {
    type: "browse_action";
    id: number;
    agentMessageId: number;
    urls: string[];
    output: {
        results: {
            requestedUrl: string;
            browsedUrl: string;
            content: string;
            responseCode: string;
            errorMessage: string;
        }[];
    } | null;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
}, {
    type: "browse_action";
    id: number;
    agentMessageId: number;
    urls: string[];
    output: {
        results: {
            requestedUrl: string;
            browsedUrl: string;
            content: string;
            responseCode: string;
            errorMessage: string;
        }[];
    } | null;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
}>, z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
}, {
    files: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        fileId: z.ZodString;
        contentFragmentId: z.ZodUndefined;
        nodeDataSourceViewId: z.ZodUndefined;
        title: z.ZodString;
        contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
    }, "strip", z.ZodTypeAny, {
        title: string;
        fileId: string;
        contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
        contentFragmentId?: undefined;
        nodeDataSourceViewId?: undefined;
    }, {
        title: string;
        fileId: string;
        contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
        contentFragmentId?: undefined;
        nodeDataSourceViewId?: undefined;
    }>, z.ZodObject<{
        fileId: z.ZodUndefined;
        contentFragmentId: z.ZodString;
        nodeDataSourceViewId: z.ZodString;
        title: z.ZodString;
        contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
    }, "strip", z.ZodTypeAny, {
        title: string;
        contentFragmentId: string;
        nodeDataSourceViewId: string;
        contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
        fileId?: undefined;
    }, {
        title: string;
        contentFragmentId: string;
        nodeDataSourceViewId: string;
        contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
        fileId?: undefined;
    }>]>, "many">;
    functionCallId: z.ZodNullable<z.ZodString>;
    functionCallName: z.ZodNullable<z.ZodString>;
    agentMessageId: z.ZodNumber;
    step: z.ZodNumber;
    type: z.ZodLiteral<"conversation_list_files_action">;
}>, "strip", z.ZodTypeAny, {
    type: "conversation_list_files_action";
    id: number;
    agentMessageId: number;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    files: ({
        title: string;
        fileId: string;
        contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
        contentFragmentId?: undefined;
        nodeDataSourceViewId?: undefined;
    } | {
        title: string;
        contentFragmentId: string;
        nodeDataSourceViewId: string;
        contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
        fileId?: undefined;
    })[];
}, {
    type: "conversation_list_files_action";
    id: number;
    agentMessageId: number;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    files: ({
        title: string;
        fileId: string;
        contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
        contentFragmentId?: undefined;
        nodeDataSourceViewId?: undefined;
    } | {
        title: string;
        contentFragmentId: string;
        nodeDataSourceViewId: string;
        contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
        fileId?: undefined;
    })[];
}>, z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
}, {
    agentMessageId: z.ZodNumber;
    params: z.ZodObject<{
        fileId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        fileId: string;
    }, {
        fileId: string;
    }>;
    tokensCount: z.ZodNullable<z.ZodNumber>;
    fileTitle: z.ZodNullable<z.ZodString>;
    functionCallId: z.ZodNullable<z.ZodString>;
    functionCallName: z.ZodNullable<z.ZodString>;
    step: z.ZodNumber;
    type: z.ZodLiteral<"conversation_include_file_action">;
}>, "strip", z.ZodTypeAny, {
    type: "conversation_include_file_action";
    params: {
        fileId: string;
    };
    id: number;
    agentMessageId: number;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    tokensCount: number | null;
    fileTitle: string | null;
}, {
    type: "conversation_include_file_action";
    params: {
        fileId: string;
    };
    id: number;
    agentMessageId: number;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    tokensCount: number | null;
    fileTitle: string | null;
}>, z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
}, {
    agentMessageId: z.ZodNumber;
    output: z.ZodNullable<z.ZodString>;
    thinking: z.ZodNullable<z.ZodString>;
    functionCallId: z.ZodNullable<z.ZodString>;
    functionCallName: z.ZodNullable<z.ZodString>;
    step: z.ZodNumber;
    type: z.ZodLiteral<"reasoning_action">;
}>, "strip", z.ZodTypeAny, {
    type: "reasoning_action";
    id: number;
    agentMessageId: number;
    output: string | null;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    thinking: string | null;
}, {
    type: "reasoning_action";
    id: number;
    agentMessageId: number;
    output: string | null;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
    thinking: string | null;
}>, z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
}, {
    agentMessageId: z.ZodNumber;
    output: z.ZodNullable<z.ZodObject<{
        tags: z.ZodArray<z.ZodObject<{
            tag: z.ZodString;
            match_count: z.ZodNumber;
            data_sources: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            tag: string;
            match_count: number;
            data_sources: string[];
        }, {
            tag: string;
            match_count: number;
            data_sources: string[];
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        tags: {
            tag: string;
            match_count: number;
            data_sources: string[];
        }[];
    }, {
        tags: {
            tag: string;
            match_count: number;
            data_sources: string[];
        }[];
    }>>;
    functionCallId: z.ZodNullable<z.ZodString>;
    functionCallName: z.ZodNullable<z.ZodString>;
    step: z.ZodNumber;
    type: z.ZodLiteral<"search_labels_action">;
}>, "strip", z.ZodTypeAny, {
    type: "search_labels_action";
    id: number;
    agentMessageId: number;
    output: {
        tags: {
            tag: string;
            match_count: number;
            data_sources: string[];
        }[];
    } | null;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
}, {
    type: "search_labels_action";
    id: number;
    agentMessageId: number;
    output: {
        tags: {
            tag: string;
            match_count: number;
            data_sources: string[];
        }[];
    } | null;
    functionCallId: string | null;
    functionCallName: string | null;
    step: number;
}>, z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
}, {
    agentMessageId: z.ZodNumber;
    functionCallName: z.ZodNullable<z.ZodString>;
    params: z.ZodUnknown;
    type: z.ZodLiteral<"tool_action">;
}>, "strip", z.ZodTypeAny, {
    type: "tool_action";
    id: number;
    agentMessageId: number;
    functionCallName: string | null;
    params?: unknown;
}, {
    type: "tool_action";
    id: number;
    agentMessageId: number;
    functionCallName: string | null;
    params?: unknown;
}>]>;
export type AgentActionPublicType = z.infer<typeof AgentActionTypeSchema>;
declare const AgentMessageTypeSchema: z.ZodObject<{
    id: z.ZodNumber;
    agentMessageId: z.ZodNumber;
    created: z.ZodNumber;
    type: z.ZodLiteral<"agent_message">;
    sId: z.ZodString;
    visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
    version: z.ZodNumber;
    parentMessageId: z.ZodNullable<z.ZodString>;
    configuration: z.ZodObject<{
        id: z.ZodNumber;
        versionCreatedAt: z.ZodNullable<z.ZodString>;
        sId: z.ZodString;
        version: z.ZodNumber;
        versionAuthorId: z.ZodNullable<z.ZodNumber>;
        instructions: z.ZodNullable<z.ZodString>;
        model: z.ZodObject<{
            providerId: z.ZodType<"openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks", z.ZodTypeDef, "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks">;
            modelId: z.ZodType<"gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1", z.ZodTypeDef, "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1">;
            temperature: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
            modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
            temperature: number;
        }, {
            providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
            modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
            temperature: number;
        }>;
        status: z.ZodUnion<[z.ZodType<"active" | "archived" | "draft", z.ZodTypeDef, "active" | "archived" | "draft">, z.ZodType<"active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace", z.ZodTypeDef, "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace">]>;
        scope: z.ZodType<"global" | "workspace" | "published" | "private", z.ZodTypeDef, "global" | "workspace" | "published" | "private">;
        userFavorite: z.ZodBoolean;
        name: z.ZodString;
        description: z.ZodString;
        pictureUrl: z.ZodString;
        lastAuthors: z.ZodOptional<z.ZodReadonly<z.ZodArray<z.ZodString, "many">>>;
        usage: z.ZodOptional<z.ZodObject<{
            messageCount: z.ZodNumber;
            conversationCount: z.ZodNumber;
            userCount: z.ZodNumber;
            timePeriodSec: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            messageCount: number;
            conversationCount: number;
            userCount: number;
            timePeriodSec: number;
        }, {
            messageCount: number;
            conversationCount: number;
            userCount: number;
            timePeriodSec: number;
        }>>;
        maxStepsPerRun: z.ZodNumber;
        visualizationEnabled: z.ZodBoolean;
        templateId: z.ZodNullable<z.ZodString>;
        groupIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        requestedGroupIds: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
    }, "strip", z.ZodTypeAny, {
        status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
        id: number;
        sId: string;
        name: string;
        description: string;
        versionCreatedAt: string | null;
        version: number;
        versionAuthorId: number | null;
        instructions: string | null;
        model: {
            providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
            modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
            temperature: number;
        };
        scope: "global" | "workspace" | "published" | "private";
        userFavorite: boolean;
        pictureUrl: string;
        maxStepsPerRun: number;
        visualizationEnabled: boolean;
        templateId: string | null;
        requestedGroupIds: string[][];
        lastAuthors?: readonly string[] | undefined;
        usage?: {
            messageCount: number;
            conversationCount: number;
            userCount: number;
            timePeriodSec: number;
        } | undefined;
        groupIds?: string[] | undefined;
    }, {
        status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
        id: number;
        sId: string;
        name: string;
        description: string;
        versionCreatedAt: string | null;
        version: number;
        versionAuthorId: number | null;
        instructions: string | null;
        model: {
            providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
            modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
            temperature: number;
        };
        scope: "global" | "workspace" | "published" | "private";
        userFavorite: boolean;
        pictureUrl: string;
        maxStepsPerRun: number;
        visualizationEnabled: boolean;
        templateId: string | null;
        requestedGroupIds: string[][];
        lastAuthors?: readonly string[] | undefined;
        usage?: {
            messageCount: number;
            conversationCount: number;
            userCount: number;
            timePeriodSec: number;
        } | undefined;
        groupIds?: string[] | undefined;
    }>;
    status: z.ZodType<"created" | "succeeded" | "failed" | "cancelled", z.ZodTypeDef, "created" | "succeeded" | "failed" | "cancelled">;
    actions: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        params: z.ZodObject<{
            relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                duration: z.ZodNumber;
                unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
            }, "strip", z.ZodTypeAny, {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            }, {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            }>>;
            query: z.ZodNullable<z.ZodString>;
            topK: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
            query: string | null;
            topK: number;
        }, {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
            query: string | null;
            topK: number;
        }>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        documents: z.ZodNullable<z.ZodArray<z.ZodObject<{
            chunks: z.ZodArray<z.ZodObject<{
                offset: z.ZodNumber;
                score: z.ZodNullable<z.ZodNumber>;
                text: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                text: string;
                offset: number;
                score: number | null;
            }, {
                text: string;
                offset: number;
                score: number | null;
            }>, "many">;
            documentId: z.ZodString;
            dataSourceView: z.ZodNullable<z.ZodObject<{
                category: z.ZodType<"folder" | "managed" | "website" | "apps" | "actions", z.ZodTypeDef, "folder" | "managed" | "website" | "apps" | "actions">;
                createdAt: z.ZodNumber;
                dataSource: z.ZodObject<{
                    id: z.ZodNumber;
                    sId: z.ZodString;
                    createdAt: z.ZodNumber;
                    name: z.ZodString;
                    description: z.ZodNullable<z.ZodString>;
                    assistantDefaultSelected: z.ZodBoolean;
                    dustAPIProjectId: z.ZodString;
                    dustAPIDataSourceId: z.ZodString;
                    connectorId: z.ZodNullable<z.ZodString>;
                    connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
                    editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        editedAt: z.ZodNullable<z.ZodNumber>;
                        fullName: z.ZodNullable<z.ZodString>;
                        imageUrl: z.ZodNullable<z.ZodString>;
                        email: z.ZodNullable<z.ZodString>;
                        userId: z.ZodNullable<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    }, {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                }, {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                }>;
                editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    editedAt: z.ZodNullable<z.ZodNumber>;
                    fullName: z.ZodNullable<z.ZodString>;
                    imageUrl: z.ZodNullable<z.ZodString>;
                    email: z.ZodNullable<z.ZodString>;
                    userId: z.ZodNullable<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                }, {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                }>>>;
                id: z.ZodNumber;
                kind: z.ZodType<"custom" | "default", z.ZodTypeDef, "custom" | "default">;
                parentsIn: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
                sId: z.ZodString;
                updatedAt: z.ZodNumber;
                spaceId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            }, {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            }>>;
            id: z.ZodNumber;
            reference: z.ZodString;
            score: z.ZodNullable<z.ZodNumber>;
            sourceUrl: z.ZodNullable<z.ZodString>;
            tags: z.ZodArray<z.ZodString, "many">;
            timestamp: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            id: number;
            score: number | null;
            timestamp: number;
            tags: string[];
            chunks: {
                text: string;
                offset: number;
                score: number | null;
            }[];
            documentId: string;
            dataSourceView: {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            } | null;
            reference: string;
            sourceUrl: string | null;
        }, {
            id: number;
            score: number | null;
            timestamp: number;
            tags: string[];
            chunks: {
                text: string;
                offset: number;
                score: number | null;
            }[];
            documentId: string;
            dataSourceView: {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            } | null;
            reference: string;
            sourceUrl: string | null;
        }>, "many">>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"retrieval_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "retrieval_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
            query: string | null;
            topK: number;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        documents: {
            id: number;
            score: number | null;
            timestamp: number;
            tags: string[];
            chunks: {
                text: string;
                offset: number;
                score: number | null;
            }[];
            documentId: string;
            dataSourceView: {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            } | null;
            reference: string;
            sourceUrl: string | null;
        }[] | null;
    }, {
        type: "retrieval_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
            query: string | null;
            topK: number;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        documents: {
            id: number;
            score: number | null;
            timestamp: number;
            tags: string[];
            chunks: {
                text: string;
                offset: number;
                score: number | null;
            }[];
            documentId: string;
            dataSourceView: {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            } | null;
            reference: string;
            sourceUrl: string | null;
        }[] | null;
    }>, z.ZodEffects<z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        appWorkspaceId: z.ZodString;
        appId: z.ZodString;
        appName: z.ZodString;
        params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
        runningBlock: z.ZodNullable<z.ZodObject<{
            type: z.ZodString;
            name: z.ZodString;
            status: z.ZodEnum<["running", "succeeded", "errored"]>;
        }, "strip", z.ZodTypeAny, {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        }, {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        }>>;
        output: z.ZodNullable<z.ZodUnknown>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"dust_app_run_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
        output?: unknown;
    }, {
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
        output?: unknown;
    }>, {
        output: unknown;
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
    }, {
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
        output?: unknown;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
        output: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
        resultsFileId: z.ZodNullable<z.ZodString>;
        resultsFileSnippet: z.ZodNullable<z.ZodString>;
        sectionFileId: z.ZodNullable<z.ZodString>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        agentMessageId: z.ZodNumber;
        step: z.ZodNumber;
        type: z.ZodLiteral<"tables_query_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "tables_query_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        output: Record<string, string | number | boolean> | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        resultsFileId: string | null;
        resultsFileSnippet: string | null;
        sectionFileId: string | null;
    }, {
        type: "tables_query_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        output: Record<string, string | number | boolean> | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        resultsFileId: string | null;
        resultsFileSnippet: string | null;
        sectionFileId: string | null;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        params: z.ZodObject<{
            relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                duration: z.ZodNumber;
                unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
            }, "strip", z.ZodTypeAny, {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            }, {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            }>>;
        }, "strip", z.ZodTypeAny, {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
        }, {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
        }>;
        schema: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodEnum<["string", "number", "boolean"]>;
            description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string" | "number" | "boolean";
            name: string;
            description: string;
        }, {
            type: "string" | "number" | "boolean";
            name: string;
            description: string;
        }>, "many">;
        outputs: z.ZodNullable<z.ZodObject<{
            data: z.ZodArray<z.ZodUnknown, "many">;
            min_timestamp: z.ZodNumber;
            total_documents: z.ZodNumber;
            total_chunks: z.ZodNumber;
            total_tokens: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            data: unknown[];
            min_timestamp: number;
            total_documents: number;
            total_chunks: number;
            total_tokens: number;
        }, {
            data: unknown[];
            min_timestamp: number;
            total_documents: number;
            total_chunks: number;
            total_tokens: number;
        }>>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"process_action">;
    }>, "strip", z.ZodTypeAny, {
        schema: {
            type: "string" | "number" | "boolean";
            name: string;
            description: string;
        }[];
        type: "process_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        outputs: {
            data: unknown[];
            min_timestamp: number;
            total_documents: number;
            total_chunks: number;
            total_tokens: number;
        } | null;
    }, {
        schema: {
            type: "string" | "number" | "boolean";
            name: string;
            description: string;
        }[];
        type: "process_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        outputs: {
            data: unknown[];
            min_timestamp: number;
            total_documents: number;
            total_chunks: number;
            total_tokens: number;
        } | null;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        query: z.ZodString;
        output: z.ZodNullable<z.ZodUnion<[z.ZodObject<{
            results: z.ZodArray<z.ZodObject<{
                title: z.ZodString;
                snippet: z.ZodString;
                link: z.ZodString;
                reference: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }, {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        }, {
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        }>, z.ZodObject<{
            results: z.ZodArray<z.ZodObject<{
                title: z.ZodString;
                snippet: z.ZodString;
                link: z.ZodString;
                reference: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }, {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }>, "many">;
            error: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            error: string;
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        }, {
            error: string;
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        }>]>>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"websearch_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "websearch_action";
        id: number;
        agentMessageId: number;
        output: {
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | {
            error: string;
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        query: string;
    }, {
        type: "websearch_action";
        id: number;
        agentMessageId: number;
        output: {
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | {
            error: string;
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        query: string;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        urls: z.ZodArray<z.ZodString, "many">;
        output: z.ZodNullable<z.ZodObject<{
            results: z.ZodArray<z.ZodObject<{
                requestedUrl: z.ZodString;
                browsedUrl: z.ZodString;
                content: z.ZodString;
                responseCode: z.ZodString;
                errorMessage: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }, {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            results: {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }[];
        }, {
            results: {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }[];
        }>>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"browse_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "browse_action";
        id: number;
        agentMessageId: number;
        urls: string[];
        output: {
            results: {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    }, {
        type: "browse_action";
        id: number;
        agentMessageId: number;
        urls: string[];
        output: {
            results: {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        files: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            fileId: z.ZodString;
            contentFragmentId: z.ZodUndefined;
            nodeDataSourceViewId: z.ZodUndefined;
            title: z.ZodString;
            contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
        }, "strip", z.ZodTypeAny, {
            title: string;
            fileId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            contentFragmentId?: undefined;
            nodeDataSourceViewId?: undefined;
        }, {
            title: string;
            fileId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            contentFragmentId?: undefined;
            nodeDataSourceViewId?: undefined;
        }>, z.ZodObject<{
            fileId: z.ZodUndefined;
            contentFragmentId: z.ZodString;
            nodeDataSourceViewId: z.ZodString;
            title: z.ZodString;
            contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
        }, "strip", z.ZodTypeAny, {
            title: string;
            contentFragmentId: string;
            nodeDataSourceViewId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            fileId?: undefined;
        }, {
            title: string;
            contentFragmentId: string;
            nodeDataSourceViewId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            fileId?: undefined;
        }>]>, "many">;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        agentMessageId: z.ZodNumber;
        step: z.ZodNumber;
        type: z.ZodLiteral<"conversation_list_files_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "conversation_list_files_action";
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        files: ({
            title: string;
            fileId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            contentFragmentId?: undefined;
            nodeDataSourceViewId?: undefined;
        } | {
            title: string;
            contentFragmentId: string;
            nodeDataSourceViewId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            fileId?: undefined;
        })[];
    }, {
        type: "conversation_list_files_action";
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        files: ({
            title: string;
            fileId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            contentFragmentId?: undefined;
            nodeDataSourceViewId?: undefined;
        } | {
            title: string;
            contentFragmentId: string;
            nodeDataSourceViewId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            fileId?: undefined;
        })[];
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        params: z.ZodObject<{
            fileId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            fileId: string;
        }, {
            fileId: string;
        }>;
        tokensCount: z.ZodNullable<z.ZodNumber>;
        fileTitle: z.ZodNullable<z.ZodString>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"conversation_include_file_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "conversation_include_file_action";
        params: {
            fileId: string;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        tokensCount: number | null;
        fileTitle: string | null;
    }, {
        type: "conversation_include_file_action";
        params: {
            fileId: string;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        tokensCount: number | null;
        fileTitle: string | null;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        output: z.ZodNullable<z.ZodString>;
        thinking: z.ZodNullable<z.ZodString>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"reasoning_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "reasoning_action";
        id: number;
        agentMessageId: number;
        output: string | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        thinking: string | null;
    }, {
        type: "reasoning_action";
        id: number;
        agentMessageId: number;
        output: string | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        thinking: string | null;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        output: z.ZodNullable<z.ZodObject<{
            tags: z.ZodArray<z.ZodObject<{
                tag: z.ZodString;
                match_count: z.ZodNumber;
                data_sources: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                tag: string;
                match_count: number;
                data_sources: string[];
            }, {
                tag: string;
                match_count: number;
                data_sources: string[];
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            tags: {
                tag: string;
                match_count: number;
                data_sources: string[];
            }[];
        }, {
            tags: {
                tag: string;
                match_count: number;
                data_sources: string[];
            }[];
        }>>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"search_labels_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "search_labels_action";
        id: number;
        agentMessageId: number;
        output: {
            tags: {
                tag: string;
                match_count: number;
                data_sources: string[];
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    }, {
        type: "search_labels_action";
        id: number;
        agentMessageId: number;
        output: {
            tags: {
                tag: string;
                match_count: number;
                data_sources: string[];
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        functionCallName: z.ZodNullable<z.ZodString>;
        params: z.ZodUnknown;
        type: z.ZodLiteral<"tool_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "tool_action";
        id: number;
        agentMessageId: number;
        functionCallName: string | null;
        params?: unknown;
    }, {
        type: "tool_action";
        id: number;
        agentMessageId: number;
        functionCallName: string | null;
        params?: unknown;
    }>]>, "many">;
    content: z.ZodNullable<z.ZodString>;
    chainOfThought: z.ZodNullable<z.ZodString>;
    rawContents: z.ZodArray<z.ZodObject<{
        step: z.ZodNumber;
        content: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        content: string;
        step: number;
    }, {
        content: string;
        step: number;
    }>, "many">;
    error: z.ZodNullable<z.ZodObject<{
        code: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        code: string;
    }, {
        message: string;
        code: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "agent_message";
    status: "created" | "succeeded" | "failed" | "cancelled";
    id: number;
    sId: string;
    created: number;
    actions: ({
        type: "browse_action";
        id: number;
        agentMessageId: number;
        urls: string[];
        output: {
            results: {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    } | {
        type: "search_labels_action";
        id: number;
        agentMessageId: number;
        output: {
            tags: {
                tag: string;
                match_count: number;
                data_sources: string[];
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    } | {
        type: "reasoning_action";
        id: number;
        agentMessageId: number;
        output: string | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        thinking: string | null;
    } | {
        type: "conversation_include_file_action";
        params: {
            fileId: string;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        tokensCount: number | null;
        fileTitle: string | null;
    } | {
        type: "conversation_list_files_action";
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        files: ({
            title: string;
            fileId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            contentFragmentId?: undefined;
            nodeDataSourceViewId?: undefined;
        } | {
            title: string;
            contentFragmentId: string;
            nodeDataSourceViewId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            fileId?: undefined;
        })[];
    } | {
        output: unknown;
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
    } | {
        type: "retrieval_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
            query: string | null;
            topK: number;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        documents: {
            id: number;
            score: number | null;
            timestamp: number;
            tags: string[];
            chunks: {
                text: string;
                offset: number;
                score: number | null;
            }[];
            documentId: string;
            dataSourceView: {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            } | null;
            reference: string;
            sourceUrl: string | null;
        }[] | null;
    } | {
        schema: {
            type: "string" | "number" | "boolean";
            name: string;
            description: string;
        }[];
        type: "process_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        outputs: {
            data: unknown[];
            min_timestamp: number;
            total_documents: number;
            total_chunks: number;
            total_tokens: number;
        } | null;
    } | {
        type: "tables_query_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        output: Record<string, string | number | boolean> | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        resultsFileId: string | null;
        resultsFileSnippet: string | null;
        sectionFileId: string | null;
    } | {
        type: "websearch_action";
        id: number;
        agentMessageId: number;
        output: {
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | {
            error: string;
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        query: string;
    } | {
        type: "tool_action";
        id: number;
        agentMessageId: number;
        functionCallName: string | null;
        params?: unknown;
    })[];
    error: {
        message: string;
        code: string;
    } | null;
    content: string | null;
    agentMessageId: number;
    version: number;
    visibility: "visible" | "deleted";
    parentMessageId: string | null;
    configuration: {
        status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
        id: number;
        sId: string;
        name: string;
        description: string;
        versionCreatedAt: string | null;
        version: number;
        versionAuthorId: number | null;
        instructions: string | null;
        model: {
            providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
            modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
            temperature: number;
        };
        scope: "global" | "workspace" | "published" | "private";
        userFavorite: boolean;
        pictureUrl: string;
        maxStepsPerRun: number;
        visualizationEnabled: boolean;
        templateId: string | null;
        requestedGroupIds: string[][];
        lastAuthors?: readonly string[] | undefined;
        usage?: {
            messageCount: number;
            conversationCount: number;
            userCount: number;
            timePeriodSec: number;
        } | undefined;
        groupIds?: string[] | undefined;
    };
    chainOfThought: string | null;
    rawContents: {
        content: string;
        step: number;
    }[];
}, {
    type: "agent_message";
    status: "created" | "succeeded" | "failed" | "cancelled";
    id: number;
    sId: string;
    created: number;
    actions: ({
        type: "browse_action";
        id: number;
        agentMessageId: number;
        urls: string[];
        output: {
            results: {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    } | {
        type: "search_labels_action";
        id: number;
        agentMessageId: number;
        output: {
            tags: {
                tag: string;
                match_count: number;
                data_sources: string[];
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    } | {
        type: "reasoning_action";
        id: number;
        agentMessageId: number;
        output: string | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        thinking: string | null;
    } | {
        type: "conversation_include_file_action";
        params: {
            fileId: string;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        tokensCount: number | null;
        fileTitle: string | null;
    } | {
        type: "conversation_list_files_action";
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        files: ({
            title: string;
            fileId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            contentFragmentId?: undefined;
            nodeDataSourceViewId?: undefined;
        } | {
            title: string;
            contentFragmentId: string;
            nodeDataSourceViewId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            fileId?: undefined;
        })[];
    } | {
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
        output?: unknown;
    } | {
        type: "retrieval_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
            query: string | null;
            topK: number;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        documents: {
            id: number;
            score: number | null;
            timestamp: number;
            tags: string[];
            chunks: {
                text: string;
                offset: number;
                score: number | null;
            }[];
            documentId: string;
            dataSourceView: {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            } | null;
            reference: string;
            sourceUrl: string | null;
        }[] | null;
    } | {
        schema: {
            type: "string" | "number" | "boolean";
            name: string;
            description: string;
        }[];
        type: "process_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        outputs: {
            data: unknown[];
            min_timestamp: number;
            total_documents: number;
            total_chunks: number;
            total_tokens: number;
        } | null;
    } | {
        type: "tables_query_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        output: Record<string, string | number | boolean> | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        resultsFileId: string | null;
        resultsFileSnippet: string | null;
        sectionFileId: string | null;
    } | {
        type: "websearch_action";
        id: number;
        agentMessageId: number;
        output: {
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | {
            error: string;
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        query: string;
    } | {
        type: "tool_action";
        id: number;
        agentMessageId: number;
        functionCallName: string | null;
        params?: unknown;
    })[];
    error: {
        message: string;
        code: string;
    } | null;
    content: string | null;
    agentMessageId: number;
    version: number;
    visibility: "visible" | "deleted";
    parentMessageId: string | null;
    configuration: {
        status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
        id: number;
        sId: string;
        name: string;
        description: string;
        versionCreatedAt: string | null;
        version: number;
        versionAuthorId: number | null;
        instructions: string | null;
        model: {
            providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
            modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
            temperature: number;
        };
        scope: "global" | "workspace" | "published" | "private";
        userFavorite: boolean;
        pictureUrl: string;
        maxStepsPerRun: number;
        visualizationEnabled: boolean;
        templateId: string | null;
        requestedGroupIds: string[][];
        lastAuthors?: readonly string[] | undefined;
        usage?: {
            messageCount: number;
            conversationCount: number;
            userCount: number;
            timePeriodSec: number;
        } | undefined;
        groupIds?: string[] | undefined;
    };
    chainOfThought: string | null;
    rawContents: {
        content: string;
        step: number;
    }[];
}>;
export type AgentMessagePublicType = z.infer<typeof AgentMessageTypeSchema>;
declare const ConversationVisibilitySchema: z.ZodType<"deleted" | "workspace" | "unlisted" | "test", z.ZodTypeDef, "deleted" | "workspace" | "unlisted" | "test">;
export type ConversationVisibility = z.infer<typeof ConversationVisibilitySchema>;
declare const ConversationWithoutContentSchema: z.ZodObject<{
    id: z.ZodNumber;
    created: z.ZodNumber;
    updated: z.ZodOptional<z.ZodNumber>;
    owner: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        sId: z.ZodString;
        name: z.ZodString;
        role: z.ZodEnum<["admin", "builder", "user", "none"]>;
        segmentation: z.ZodNullable<z.ZodType<"interesting", z.ZodTypeDef, "interesting">>;
        whiteListedProviders: z.ZodNullable<z.ZodArray<z.ZodType<"openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks", z.ZodTypeDef, "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks">, "many">>;
        defaultEmbeddingProvider: z.ZodNullable<z.ZodType<"openai" | "mistral", z.ZodTypeDef, "openai" | "mistral">>;
    }, {
        ssoEnforced: z.ZodOptional<z.ZodBoolean>;
    }>, "strip", z.ZodTypeAny, {
        id: number;
        sId: string;
        name: string;
        role: "admin" | "builder" | "user" | "none";
        segmentation: "interesting" | null;
        whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
        defaultEmbeddingProvider: "openai" | "mistral" | null;
        ssoEnforced?: boolean | undefined;
    }, {
        id: number;
        sId: string;
        name: string;
        role: "admin" | "builder" | "user" | "none";
        segmentation: "interesting" | null;
        whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
        defaultEmbeddingProvider: "openai" | "mistral" | null;
        ssoEnforced?: boolean | undefined;
    }>;
    sId: z.ZodString;
    title: z.ZodNullable<z.ZodString>;
    visibility: z.ZodType<"deleted" | "workspace" | "unlisted" | "test", z.ZodTypeDef, "deleted" | "workspace" | "unlisted" | "test">;
    groupIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    requestedGroupIds: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
}, "strip", z.ZodTypeAny, {
    id: number;
    sId: string;
    created: number;
    title: string | null;
    requestedGroupIds: string[][];
    visibility: "deleted" | "workspace" | "unlisted" | "test";
    owner: {
        id: number;
        sId: string;
        name: string;
        role: "admin" | "builder" | "user" | "none";
        segmentation: "interesting" | null;
        whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
        defaultEmbeddingProvider: "openai" | "mistral" | null;
        ssoEnforced?: boolean | undefined;
    };
    groupIds?: string[] | undefined;
    updated?: number | undefined;
}, {
    id: number;
    sId: string;
    created: number;
    title: string | null;
    requestedGroupIds: string[][];
    visibility: "deleted" | "workspace" | "unlisted" | "test";
    owner: {
        id: number;
        sId: string;
        name: string;
        role: "admin" | "builder" | "user" | "none";
        segmentation: "interesting" | null;
        whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
        defaultEmbeddingProvider: "openai" | "mistral" | null;
        ssoEnforced?: boolean | undefined;
    };
    groupIds?: string[] | undefined;
    updated?: number | undefined;
}>;
export declare const ConversationSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodNumber;
    created: z.ZodNumber;
    updated: z.ZodOptional<z.ZodNumber>;
    owner: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        sId: z.ZodString;
        name: z.ZodString;
        role: z.ZodEnum<["admin", "builder", "user", "none"]>;
        segmentation: z.ZodNullable<z.ZodType<"interesting", z.ZodTypeDef, "interesting">>;
        whiteListedProviders: z.ZodNullable<z.ZodArray<z.ZodType<"openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks", z.ZodTypeDef, "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks">, "many">>;
        defaultEmbeddingProvider: z.ZodNullable<z.ZodType<"openai" | "mistral", z.ZodTypeDef, "openai" | "mistral">>;
    }, {
        ssoEnforced: z.ZodOptional<z.ZodBoolean>;
    }>, "strip", z.ZodTypeAny, {
        id: number;
        sId: string;
        name: string;
        role: "admin" | "builder" | "user" | "none";
        segmentation: "interesting" | null;
        whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
        defaultEmbeddingProvider: "openai" | "mistral" | null;
        ssoEnforced?: boolean | undefined;
    }, {
        id: number;
        sId: string;
        name: string;
        role: "admin" | "builder" | "user" | "none";
        segmentation: "interesting" | null;
        whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
        defaultEmbeddingProvider: "openai" | "mistral" | null;
        ssoEnforced?: boolean | undefined;
    }>;
    sId: z.ZodString;
    title: z.ZodNullable<z.ZodString>;
    visibility: z.ZodType<"deleted" | "workspace" | "unlisted" | "test", z.ZodTypeDef, "deleted" | "workspace" | "unlisted" | "test">;
    groupIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    requestedGroupIds: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
}, {
    content: z.ZodArray<z.ZodUnion<[z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        created: z.ZodNumber;
        type: z.ZodLiteral<"user_message">;
        sId: z.ZodString;
        visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
        version: z.ZodNumber;
        user: z.ZodNullable<z.ZodObject<{
            sId: z.ZodString;
            id: z.ZodNumber;
            createdAt: z.ZodNumber;
            provider: z.ZodNullable<z.ZodType<"github" | "google" | "auth0" | "okta" | "samlp" | "waad", z.ZodTypeDef, "github" | "google" | "auth0" | "okta" | "samlp" | "waad">>;
            username: z.ZodString;
            email: z.ZodString;
            firstName: z.ZodString;
            lastName: z.ZodNullable<z.ZodString>;
            fullName: z.ZodString;
            image: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        }, {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        }>>;
        mentions: z.ZodArray<z.ZodObject<{
            configurationId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            configurationId: string;
        }, {
            configurationId: string;
        }>, "many">;
        content: z.ZodString;
        context: z.ZodObject<{
            username: z.ZodString;
            timezone: z.ZodEffects<z.ZodString, string, string>;
            fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            origin: z.ZodUnion<[z.ZodUnion<[z.ZodType<"slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email", z.ZodTypeDef, "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email">, z.ZodNull]>, z.ZodUndefined]>;
            localMCPServerIds: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        }, {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "user_message";
        id: number;
        sId: string;
        created: number;
        content: string;
        user: {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        } | null;
        version: number;
        visibility: "visible" | "deleted";
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    }, {
        type: "user_message";
        id: number;
        sId: string;
        created: number;
        content: string;
        user: {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        } | null;
        version: number;
        visibility: "visible" | "deleted";
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    }>, "many">, z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        agentMessageId: z.ZodNumber;
        created: z.ZodNumber;
        type: z.ZodLiteral<"agent_message">;
        sId: z.ZodString;
        visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
        version: z.ZodNumber;
        parentMessageId: z.ZodNullable<z.ZodString>;
        configuration: z.ZodObject<{
            id: z.ZodNumber;
            versionCreatedAt: z.ZodNullable<z.ZodString>;
            sId: z.ZodString;
            version: z.ZodNumber;
            versionAuthorId: z.ZodNullable<z.ZodNumber>;
            instructions: z.ZodNullable<z.ZodString>;
            model: z.ZodObject<{
                providerId: z.ZodType<"openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks", z.ZodTypeDef, "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks">;
                modelId: z.ZodType<"gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1", z.ZodTypeDef, "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1">;
                temperature: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            }, {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            }>;
            status: z.ZodUnion<[z.ZodType<"active" | "archived" | "draft", z.ZodTypeDef, "active" | "archived" | "draft">, z.ZodType<"active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace", z.ZodTypeDef, "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace">]>;
            scope: z.ZodType<"global" | "workspace" | "published" | "private", z.ZodTypeDef, "global" | "workspace" | "published" | "private">;
            userFavorite: z.ZodBoolean;
            name: z.ZodString;
            description: z.ZodString;
            pictureUrl: z.ZodString;
            lastAuthors: z.ZodOptional<z.ZodReadonly<z.ZodArray<z.ZodString, "many">>>;
            usage: z.ZodOptional<z.ZodObject<{
                messageCount: z.ZodNumber;
                conversationCount: z.ZodNumber;
                userCount: z.ZodNumber;
                timePeriodSec: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            }, {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            }>>;
            maxStepsPerRun: z.ZodNumber;
            visualizationEnabled: z.ZodBoolean;
            templateId: z.ZodNullable<z.ZodString>;
            groupIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            requestedGroupIds: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
        }, "strip", z.ZodTypeAny, {
            status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
            id: number;
            sId: string;
            name: string;
            description: string;
            versionCreatedAt: string | null;
            version: number;
            versionAuthorId: number | null;
            instructions: string | null;
            model: {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            };
            scope: "global" | "workspace" | "published" | "private";
            userFavorite: boolean;
            pictureUrl: string;
            maxStepsPerRun: number;
            visualizationEnabled: boolean;
            templateId: string | null;
            requestedGroupIds: string[][];
            lastAuthors?: readonly string[] | undefined;
            usage?: {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            } | undefined;
            groupIds?: string[] | undefined;
        }, {
            status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
            id: number;
            sId: string;
            name: string;
            description: string;
            versionCreatedAt: string | null;
            version: number;
            versionAuthorId: number | null;
            instructions: string | null;
            model: {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            };
            scope: "global" | "workspace" | "published" | "private";
            userFavorite: boolean;
            pictureUrl: string;
            maxStepsPerRun: number;
            visualizationEnabled: boolean;
            templateId: string | null;
            requestedGroupIds: string[][];
            lastAuthors?: readonly string[] | undefined;
            usage?: {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            } | undefined;
            groupIds?: string[] | undefined;
        }>;
        status: z.ZodType<"created" | "succeeded" | "failed" | "cancelled", z.ZodTypeDef, "created" | "succeeded" | "failed" | "cancelled">;
        actions: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            params: z.ZodObject<{
                relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                    duration: z.ZodNumber;
                    unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
                }, "strip", z.ZodTypeAny, {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                }, {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                }>>;
                query: z.ZodNullable<z.ZodString>;
                topK: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            }, {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            }>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            documents: z.ZodNullable<z.ZodArray<z.ZodObject<{
                chunks: z.ZodArray<z.ZodObject<{
                    offset: z.ZodNumber;
                    score: z.ZodNullable<z.ZodNumber>;
                    text: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    text: string;
                    offset: number;
                    score: number | null;
                }, {
                    text: string;
                    offset: number;
                    score: number | null;
                }>, "many">;
                documentId: z.ZodString;
                dataSourceView: z.ZodNullable<z.ZodObject<{
                    category: z.ZodType<"folder" | "managed" | "website" | "apps" | "actions", z.ZodTypeDef, "folder" | "managed" | "website" | "apps" | "actions">;
                    createdAt: z.ZodNumber;
                    dataSource: z.ZodObject<{
                        id: z.ZodNumber;
                        sId: z.ZodString;
                        createdAt: z.ZodNumber;
                        name: z.ZodString;
                        description: z.ZodNullable<z.ZodString>;
                        assistantDefaultSelected: z.ZodBoolean;
                        dustAPIProjectId: z.ZodString;
                        dustAPIDataSourceId: z.ZodString;
                        connectorId: z.ZodNullable<z.ZodString>;
                        connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
                        editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                            editedAt: z.ZodNullable<z.ZodNumber>;
                            fullName: z.ZodNullable<z.ZodString>;
                            imageUrl: z.ZodNullable<z.ZodString>;
                            email: z.ZodNullable<z.ZodString>;
                            userId: z.ZodNullable<z.ZodString>;
                        }, "strip", z.ZodTypeAny, {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        }, {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        }>>>;
                    }, "strip", z.ZodTypeAny, {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    }, {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    }>;
                    editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        editedAt: z.ZodNullable<z.ZodNumber>;
                        fullName: z.ZodNullable<z.ZodString>;
                        imageUrl: z.ZodNullable<z.ZodString>;
                        email: z.ZodNullable<z.ZodString>;
                        userId: z.ZodNullable<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    }, {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    }>>>;
                    id: z.ZodNumber;
                    kind: z.ZodType<"custom" | "default", z.ZodTypeDef, "custom" | "default">;
                    parentsIn: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
                    sId: z.ZodString;
                    updatedAt: z.ZodNumber;
                    spaceId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                }, {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                }>>;
                id: z.ZodNumber;
                reference: z.ZodString;
                score: z.ZodNullable<z.ZodNumber>;
                sourceUrl: z.ZodNullable<z.ZodString>;
                tags: z.ZodArray<z.ZodString, "many">;
                timestamp: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }, {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }>, "many">>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"retrieval_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        }, {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        }>, z.ZodEffects<z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            appWorkspaceId: z.ZodString;
            appId: z.ZodString;
            appName: z.ZodString;
            params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            runningBlock: z.ZodNullable<z.ZodObject<{
                type: z.ZodString;
                name: z.ZodString;
                status: z.ZodEnum<["running", "succeeded", "errored"]>;
            }, "strip", z.ZodTypeAny, {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            }, {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            }>>;
            output: z.ZodNullable<z.ZodUnknown>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"dust_app_run_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        }, {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        }>, {
            output: unknown;
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
        }, {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            output: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
            resultsFileId: z.ZodNullable<z.ZodString>;
            resultsFileSnippet: z.ZodNullable<z.ZodString>;
            sectionFileId: z.ZodNullable<z.ZodString>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            agentMessageId: z.ZodNumber;
            step: z.ZodNumber;
            type: z.ZodLiteral<"tables_query_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        }, {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            params: z.ZodObject<{
                relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                    duration: z.ZodNumber;
                    unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
                }, "strip", z.ZodTypeAny, {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                }, {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                }>>;
            }, "strip", z.ZodTypeAny, {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            }, {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            }>;
            schema: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodEnum<["string", "number", "boolean"]>;
                description: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }, {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }>, "many">;
            outputs: z.ZodNullable<z.ZodObject<{
                data: z.ZodArray<z.ZodUnknown, "many">;
                min_timestamp: z.ZodNumber;
                total_documents: z.ZodNumber;
                total_chunks: z.ZodNumber;
                total_tokens: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            }, {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            }>>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"process_action">;
        }>, "strip", z.ZodTypeAny, {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        }, {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            query: z.ZodString;
            output: z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                results: z.ZodArray<z.ZodObject<{
                    title: z.ZodString;
                    snippet: z.ZodString;
                    link: z.ZodString;
                    reference: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }, {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            }, {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            }>, z.ZodObject<{
                results: z.ZodArray<z.ZodObject<{
                    title: z.ZodString;
                    snippet: z.ZodString;
                    link: z.ZodString;
                    reference: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }, {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }>, "many">;
                error: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            }, {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            }>]>>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"websearch_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        }, {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            urls: z.ZodArray<z.ZodString, "many">;
            output: z.ZodNullable<z.ZodObject<{
                results: z.ZodArray<z.ZodObject<{
                    requestedUrl: z.ZodString;
                    browsedUrl: z.ZodString;
                    content: z.ZodString;
                    responseCode: z.ZodString;
                    errorMessage: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }, {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            }, {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            }>>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"browse_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        }, {
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            files: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                fileId: z.ZodString;
                contentFragmentId: z.ZodUndefined;
                nodeDataSourceViewId: z.ZodUndefined;
                title: z.ZodString;
                contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
            }, "strip", z.ZodTypeAny, {
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            }, {
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            }>, z.ZodObject<{
                fileId: z.ZodUndefined;
                contentFragmentId: z.ZodString;
                nodeDataSourceViewId: z.ZodString;
                title: z.ZodString;
                contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
            }, "strip", z.ZodTypeAny, {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            }, {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            }>]>, "many">;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            agentMessageId: z.ZodNumber;
            step: z.ZodNumber;
            type: z.ZodLiteral<"conversation_list_files_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        }, {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            params: z.ZodObject<{
                fileId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                fileId: string;
            }, {
                fileId: string;
            }>;
            tokensCount: z.ZodNullable<z.ZodNumber>;
            fileTitle: z.ZodNullable<z.ZodString>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"conversation_include_file_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        }, {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            output: z.ZodNullable<z.ZodString>;
            thinking: z.ZodNullable<z.ZodString>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"reasoning_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        }, {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            output: z.ZodNullable<z.ZodObject<{
                tags: z.ZodArray<z.ZodObject<{
                    tag: z.ZodString;
                    match_count: z.ZodNumber;
                    data_sources: z.ZodArray<z.ZodString, "many">;
                }, "strip", z.ZodTypeAny, {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }, {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            }, {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            }>>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"search_labels_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        }, {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            functionCallName: z.ZodNullable<z.ZodString>;
            params: z.ZodUnknown;
            type: z.ZodLiteral<"tool_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        }, {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        }>]>, "many">;
        content: z.ZodNullable<z.ZodString>;
        chainOfThought: z.ZodNullable<z.ZodString>;
        rawContents: z.ZodArray<z.ZodObject<{
            step: z.ZodNumber;
            content: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            content: string;
            step: number;
        }, {
            content: string;
            step: number;
        }>, "many">;
        error: z.ZodNullable<z.ZodObject<{
            code: z.ZodString;
            message: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
            code: string;
        }, {
            message: string;
            code: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "agent_message";
        status: "created" | "succeeded" | "failed" | "cancelled";
        id: number;
        sId: string;
        created: number;
        actions: ({
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        } | {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        } | {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        } | {
            output: unknown;
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
        } | {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        } | {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        } | {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        } | {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        } | {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        })[];
        error: {
            message: string;
            code: string;
        } | null;
        content: string | null;
        agentMessageId: number;
        version: number;
        visibility: "visible" | "deleted";
        parentMessageId: string | null;
        configuration: {
            status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
            id: number;
            sId: string;
            name: string;
            description: string;
            versionCreatedAt: string | null;
            version: number;
            versionAuthorId: number | null;
            instructions: string | null;
            model: {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            };
            scope: "global" | "workspace" | "published" | "private";
            userFavorite: boolean;
            pictureUrl: string;
            maxStepsPerRun: number;
            visualizationEnabled: boolean;
            templateId: string | null;
            requestedGroupIds: string[][];
            lastAuthors?: readonly string[] | undefined;
            usage?: {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            } | undefined;
            groupIds?: string[] | undefined;
        };
        chainOfThought: string | null;
        rawContents: {
            content: string;
            step: number;
        }[];
    }, {
        type: "agent_message";
        status: "created" | "succeeded" | "failed" | "cancelled";
        id: number;
        sId: string;
        created: number;
        actions: ({
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        } | {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        } | {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        } | {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        } | {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        } | {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        } | {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        } | {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        } | {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        })[];
        error: {
            message: string;
            code: string;
        } | null;
        content: string | null;
        agentMessageId: number;
        version: number;
        visibility: "visible" | "deleted";
        parentMessageId: string | null;
        configuration: {
            status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
            id: number;
            sId: string;
            name: string;
            description: string;
            versionCreatedAt: string | null;
            version: number;
            versionAuthorId: number | null;
            instructions: string | null;
            model: {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            };
            scope: "global" | "workspace" | "published" | "private";
            userFavorite: boolean;
            pictureUrl: string;
            maxStepsPerRun: number;
            visualizationEnabled: boolean;
            templateId: string | null;
            requestedGroupIds: string[][];
            lastAuthors?: readonly string[] | undefined;
            usage?: {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            } | undefined;
            groupIds?: string[] | undefined;
        };
        chainOfThought: string | null;
        rawContents: {
            content: string;
            step: number;
        }[];
    }>, "many">, z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        sId: z.ZodString;
        fileId: z.ZodNullable<z.ZodString>;
        created: z.ZodNumber;
        type: z.ZodLiteral<"content_fragment">;
        visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
        version: z.ZodNumber;
        sourceUrl: z.ZodNullable<z.ZodString>;
        textUrl: z.ZodString;
        textBytes: z.ZodNullable<z.ZodNumber>;
        title: z.ZodString;
        contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
        context: z.ZodObject<{
            username: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        }, {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        }>;
        contentFragmentId: z.ZodString;
        contentFragmentVersion: z.ZodUnion<[z.ZodLiteral<"latest">, z.ZodLiteral<"superseded">]>;
        contentNodeData: z.ZodNullable<z.ZodObject<{
            nodeId: z.ZodString;
            nodeDataSourceViewId: z.ZodString;
            nodeType: z.ZodUnion<[z.ZodLiteral<"document">, z.ZodLiteral<"table">, z.ZodLiteral<"folder">]>;
            provider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
            spaceName: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            nodeDataSourceViewId: string;
            nodeId: string;
            nodeType: "folder" | "table" | "document";
            spaceName: string;
        }, {
            provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            nodeDataSourceViewId: string;
            nodeId: string;
            nodeType: "folder" | "table" | "document";
            spaceName: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "content_fragment";
        id: number;
        sId: string;
        created: number;
        title: string;
        fileId: string | null;
        contentFragmentId: string;
        contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
        sourceUrl: string | null;
        version: number;
        visibility: "visible" | "deleted";
        textUrl: string;
        textBytes: number | null;
        context: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        };
        contentFragmentVersion: "latest" | "superseded";
        contentNodeData: {
            provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            nodeDataSourceViewId: string;
            nodeId: string;
            nodeType: "folder" | "table" | "document";
            spaceName: string;
        } | null;
    }, {
        type: "content_fragment";
        id: number;
        sId: string;
        created: number;
        title: string;
        fileId: string | null;
        contentFragmentId: string;
        contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
        sourceUrl: string | null;
        version: number;
        visibility: "visible" | "deleted";
        textUrl: string;
        textBytes: number | null;
        context: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        };
        contentFragmentVersion: "latest" | "superseded";
        contentNodeData: {
            provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            nodeDataSourceViewId: string;
            nodeId: string;
            nodeType: "folder" | "table" | "document";
            spaceName: string;
        } | null;
    }>, "many">]>, "many">;
}>, "strip", z.ZodTypeAny, {
    id: number;
    sId: string;
    created: number;
    title: string | null;
    content: ({
        type: "user_message";
        id: number;
        sId: string;
        created: number;
        content: string;
        user: {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        } | null;
        version: number;
        visibility: "visible" | "deleted";
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    }[] | {
        type: "agent_message";
        status: "created" | "succeeded" | "failed" | "cancelled";
        id: number;
        sId: string;
        created: number;
        actions: ({
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        } | {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        } | {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        } | {
            output: unknown;
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
        } | {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        } | {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        } | {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        } | {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        } | {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        })[];
        error: {
            message: string;
            code: string;
        } | null;
        content: string | null;
        agentMessageId: number;
        version: number;
        visibility: "visible" | "deleted";
        parentMessageId: string | null;
        configuration: {
            status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
            id: number;
            sId: string;
            name: string;
            description: string;
            versionCreatedAt: string | null;
            version: number;
            versionAuthorId: number | null;
            instructions: string | null;
            model: {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            };
            scope: "global" | "workspace" | "published" | "private";
            userFavorite: boolean;
            pictureUrl: string;
            maxStepsPerRun: number;
            visualizationEnabled: boolean;
            templateId: string | null;
            requestedGroupIds: string[][];
            lastAuthors?: readonly string[] | undefined;
            usage?: {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            } | undefined;
            groupIds?: string[] | undefined;
        };
        chainOfThought: string | null;
        rawContents: {
            content: string;
            step: number;
        }[];
    }[] | {
        type: "content_fragment";
        id: number;
        sId: string;
        created: number;
        title: string;
        fileId: string | null;
        contentFragmentId: string;
        contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
        sourceUrl: string | null;
        version: number;
        visibility: "visible" | "deleted";
        textUrl: string;
        textBytes: number | null;
        context: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        };
        contentFragmentVersion: "latest" | "superseded";
        contentNodeData: {
            provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            nodeDataSourceViewId: string;
            nodeId: string;
            nodeType: "folder" | "table" | "document";
            spaceName: string;
        } | null;
    }[])[];
    requestedGroupIds: string[][];
    visibility: "deleted" | "workspace" | "unlisted" | "test";
    owner: {
        id: number;
        sId: string;
        name: string;
        role: "admin" | "builder" | "user" | "none";
        segmentation: "interesting" | null;
        whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
        defaultEmbeddingProvider: "openai" | "mistral" | null;
        ssoEnforced?: boolean | undefined;
    };
    groupIds?: string[] | undefined;
    updated?: number | undefined;
}, {
    id: number;
    sId: string;
    created: number;
    title: string | null;
    content: ({
        type: "user_message";
        id: number;
        sId: string;
        created: number;
        content: string;
        user: {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        } | null;
        version: number;
        visibility: "visible" | "deleted";
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    }[] | {
        type: "agent_message";
        status: "created" | "succeeded" | "failed" | "cancelled";
        id: number;
        sId: string;
        created: number;
        actions: ({
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        } | {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        } | {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        } | {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        } | {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        } | {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        } | {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        } | {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        } | {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        })[];
        error: {
            message: string;
            code: string;
        } | null;
        content: string | null;
        agentMessageId: number;
        version: number;
        visibility: "visible" | "deleted";
        parentMessageId: string | null;
        configuration: {
            status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
            id: number;
            sId: string;
            name: string;
            description: string;
            versionCreatedAt: string | null;
            version: number;
            versionAuthorId: number | null;
            instructions: string | null;
            model: {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            };
            scope: "global" | "workspace" | "published" | "private";
            userFavorite: boolean;
            pictureUrl: string;
            maxStepsPerRun: number;
            visualizationEnabled: boolean;
            templateId: string | null;
            requestedGroupIds: string[][];
            lastAuthors?: readonly string[] | undefined;
            usage?: {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            } | undefined;
            groupIds?: string[] | undefined;
        };
        chainOfThought: string | null;
        rawContents: {
            content: string;
            step: number;
        }[];
    }[] | {
        type: "content_fragment";
        id: number;
        sId: string;
        created: number;
        title: string;
        fileId: string | null;
        contentFragmentId: string;
        contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
        sourceUrl: string | null;
        version: number;
        visibility: "visible" | "deleted";
        textUrl: string;
        textBytes: number | null;
        context: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        };
        contentFragmentVersion: "latest" | "superseded";
        contentNodeData: {
            provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            nodeDataSourceViewId: string;
            nodeId: string;
            nodeType: "folder" | "table" | "document";
            spaceName: string;
        } | null;
    }[])[];
    requestedGroupIds: string[][];
    visibility: "deleted" | "workspace" | "unlisted" | "test";
    owner: {
        id: number;
        sId: string;
        name: string;
        role: "admin" | "builder" | "user" | "none";
        segmentation: "interesting" | null;
        whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
        defaultEmbeddingProvider: "openai" | "mistral" | null;
        ssoEnforced?: boolean | undefined;
    };
    groupIds?: string[] | undefined;
    updated?: number | undefined;
}>;
export type ConversationWithoutContentPublicType = z.infer<typeof ConversationWithoutContentSchema>;
export type ConversationPublicType = z.infer<typeof ConversationSchema>;
declare const ConversationMessageReactionsSchema: z.ZodArray<z.ZodObject<{
    messageId: z.ZodString;
    reactions: z.ZodArray<z.ZodObject<{
        emoji: z.ZodString;
        users: z.ZodArray<z.ZodObject<{
            userId: z.ZodNullable<z.ZodNumber>;
            username: z.ZodString;
            fullName: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            fullName: string | null;
            userId: number | null;
            username: string;
        }, {
            fullName: string | null;
            userId: number | null;
            username: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        emoji: string;
        users: {
            fullName: string | null;
            userId: number | null;
            username: string;
        }[];
    }, {
        emoji: string;
        users: {
            fullName: string | null;
            userId: number | null;
            username: string;
        }[];
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    messageId: string;
    reactions: {
        emoji: string;
        users: {
            fullName: string | null;
            userId: number | null;
            username: string;
        }[];
    }[];
}, {
    messageId: string;
    reactions: {
        emoji: string;
        users: {
            fullName: string | null;
            userId: number | null;
            username: string;
        }[];
    }[];
}>, "many">;
export type ConversationMessageReactionsType = z.infer<typeof ConversationMessageReactionsSchema>;
declare const MCPValidationMetadataSchema: z.ZodObject<{
    mcpServerName: z.ZodString;
    toolName: z.ZodString;
    agentName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    mcpServerName: string;
    toolName: string;
    agentName: string;
}, {
    mcpServerName: string;
    toolName: string;
    agentName: string;
}>;
export type MCPValidationMetadataPublicType = z.infer<typeof MCPValidationMetadataSchema>;
declare const AgentErrorEventSchema: z.ZodObject<{
    type: z.ZodLiteral<"agent_error">;
    created: z.ZodNumber;
    configurationId: z.ZodString;
    messageId: z.ZodString;
    error: z.ZodObject<{
        code: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        code: string;
    }, {
        message: string;
        code: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "agent_error";
    created: number;
    error: {
        message: string;
        code: string;
    };
    configurationId: string;
    messageId: string;
}, {
    type: "agent_error";
    created: number;
    error: {
        message: string;
        code: string;
    };
    configurationId: string;
    messageId: string;
}>;
export type AgentErrorEvent = z.infer<typeof AgentErrorEventSchema>;
declare const AgentActionSpecificEventSchema: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"browse_params">;
    created: z.ZodNumber;
    configurationId: z.ZodString;
    messageId: z.ZodString;
    action: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        urls: z.ZodArray<z.ZodString, "many">;
        output: z.ZodNullable<z.ZodObject<{
            results: z.ZodArray<z.ZodObject<{
                requestedUrl: z.ZodString;
                browsedUrl: z.ZodString;
                content: z.ZodString;
                responseCode: z.ZodString;
                errorMessage: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }, {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            results: {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }[];
        }, {
            results: {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }[];
        }>>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"browse_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "browse_action";
        id: number;
        agentMessageId: number;
        urls: string[];
        output: {
            results: {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    }, {
        type: "browse_action";
        id: number;
        agentMessageId: number;
        urls: string[];
        output: {
            results: {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "browse_params";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "browse_action";
        id: number;
        agentMessageId: number;
        urls: string[];
        output: {
            results: {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    };
}, {
    type: "browse_params";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "browse_action";
        id: number;
        agentMessageId: number;
        urls: string[];
        output: {
            results: {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"conversation_include_file_params">;
    created: z.ZodNumber;
    configurationId: z.ZodString;
    messageId: z.ZodString;
    action: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        params: z.ZodObject<{
            fileId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            fileId: string;
        }, {
            fileId: string;
        }>;
        tokensCount: z.ZodNullable<z.ZodNumber>;
        fileTitle: z.ZodNullable<z.ZodString>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"conversation_include_file_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "conversation_include_file_action";
        params: {
            fileId: string;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        tokensCount: number | null;
        fileTitle: string | null;
    }, {
        type: "conversation_include_file_action";
        params: {
            fileId: string;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        tokensCount: number | null;
        fileTitle: string | null;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "conversation_include_file_params";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "conversation_include_file_action";
        params: {
            fileId: string;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        tokensCount: number | null;
        fileTitle: string | null;
    };
}, {
    type: "conversation_include_file_params";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "conversation_include_file_action";
        params: {
            fileId: string;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        tokensCount: number | null;
        fileTitle: string | null;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"dust_app_run_block">;
    created: z.ZodNumber;
    configurationId: z.ZodString;
    messageId: z.ZodString;
    action: z.ZodEffects<z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        appWorkspaceId: z.ZodString;
        appId: z.ZodString;
        appName: z.ZodString;
        params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
        runningBlock: z.ZodNullable<z.ZodObject<{
            type: z.ZodString;
            name: z.ZodString;
            status: z.ZodEnum<["running", "succeeded", "errored"]>;
        }, "strip", z.ZodTypeAny, {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        }, {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        }>>;
        output: z.ZodNullable<z.ZodUnknown>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"dust_app_run_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
        output?: unknown;
    }, {
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
        output?: unknown;
    }>, {
        output: unknown;
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
    }, {
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
        output?: unknown;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "dust_app_run_block";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        output: unknown;
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
    };
}, {
    type: "dust_app_run_block";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
        output?: unknown;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"dust_app_run_params">;
    created: z.ZodNumber;
    configurationId: z.ZodString;
    messageId: z.ZodString;
    action: z.ZodEffects<z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        appWorkspaceId: z.ZodString;
        appId: z.ZodString;
        appName: z.ZodString;
        params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
        runningBlock: z.ZodNullable<z.ZodObject<{
            type: z.ZodString;
            name: z.ZodString;
            status: z.ZodEnum<["running", "succeeded", "errored"]>;
        }, "strip", z.ZodTypeAny, {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        }, {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        }>>;
        output: z.ZodNullable<z.ZodUnknown>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"dust_app_run_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
        output?: unknown;
    }, {
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
        output?: unknown;
    }>, {
        output: unknown;
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
    }, {
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
        output?: unknown;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "dust_app_run_params";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        output: unknown;
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
    };
}, {
    type: "dust_app_run_params";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
        output?: unknown;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"process_params">;
    created: z.ZodNumber;
    configurationId: z.ZodString;
    messageId: z.ZodString;
    dataSources: z.ZodArray<z.ZodObject<{
        workspaceId: z.ZodString;
        dataSourceViewId: z.ZodString;
        filter: z.ZodObject<{
            parents: z.ZodNullable<z.ZodObject<{
                in: z.ZodArray<z.ZodString, "many">;
                not: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                in: string[];
                not: string[];
            }, {
                in: string[];
                not: string[];
            }>>;
        }, "strip", z.ZodTypeAny, {
            parents: {
                in: string[];
                not: string[];
            } | null;
        }, {
            parents: {
                in: string[];
                not: string[];
            } | null;
        }>;
    }, "strip", z.ZodTypeAny, {
        filter: {
            parents: {
                in: string[];
                not: string[];
            } | null;
        };
        workspaceId: string;
        dataSourceViewId: string;
    }, {
        filter: {
            parents: {
                in: string[];
                not: string[];
            } | null;
        };
        workspaceId: string;
        dataSourceViewId: string;
    }>, "many">;
    action: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        params: z.ZodObject<{
            relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                duration: z.ZodNumber;
                unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
            }, "strip", z.ZodTypeAny, {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            }, {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            }>>;
        }, "strip", z.ZodTypeAny, {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
        }, {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
        }>;
        schema: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodEnum<["string", "number", "boolean"]>;
            description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string" | "number" | "boolean";
            name: string;
            description: string;
        }, {
            type: "string" | "number" | "boolean";
            name: string;
            description: string;
        }>, "many">;
        outputs: z.ZodNullable<z.ZodObject<{
            data: z.ZodArray<z.ZodUnknown, "many">;
            min_timestamp: z.ZodNumber;
            total_documents: z.ZodNumber;
            total_chunks: z.ZodNumber;
            total_tokens: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            data: unknown[];
            min_timestamp: number;
            total_documents: number;
            total_chunks: number;
            total_tokens: number;
        }, {
            data: unknown[];
            min_timestamp: number;
            total_documents: number;
            total_chunks: number;
            total_tokens: number;
        }>>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"process_action">;
    }>, "strip", z.ZodTypeAny, {
        schema: {
            type: "string" | "number" | "boolean";
            name: string;
            description: string;
        }[];
        type: "process_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        outputs: {
            data: unknown[];
            min_timestamp: number;
            total_documents: number;
            total_chunks: number;
            total_tokens: number;
        } | null;
    }, {
        schema: {
            type: "string" | "number" | "boolean";
            name: string;
            description: string;
        }[];
        type: "process_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        outputs: {
            data: unknown[];
            min_timestamp: number;
            total_documents: number;
            total_chunks: number;
            total_tokens: number;
        } | null;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "process_params";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        schema: {
            type: "string" | "number" | "boolean";
            name: string;
            description: string;
        }[];
        type: "process_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        outputs: {
            data: unknown[];
            min_timestamp: number;
            total_documents: number;
            total_chunks: number;
            total_tokens: number;
        } | null;
    };
    dataSources: {
        filter: {
            parents: {
                in: string[];
                not: string[];
            } | null;
        };
        workspaceId: string;
        dataSourceViewId: string;
    }[];
}, {
    type: "process_params";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        schema: {
            type: "string" | "number" | "boolean";
            name: string;
            description: string;
        }[];
        type: "process_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        outputs: {
            data: unknown[];
            min_timestamp: number;
            total_documents: number;
            total_chunks: number;
            total_tokens: number;
        } | null;
    };
    dataSources: {
        filter: {
            parents: {
                in: string[];
                not: string[];
            } | null;
        };
        workspaceId: string;
        dataSourceViewId: string;
    }[];
}>, z.ZodObject<{
    type: z.ZodLiteral<"reasoning_started">;
    created: z.ZodNumber;
    configurationId: z.ZodString;
    messageId: z.ZodString;
    action: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        output: z.ZodNullable<z.ZodString>;
        thinking: z.ZodNullable<z.ZodString>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"reasoning_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "reasoning_action";
        id: number;
        agentMessageId: number;
        output: string | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        thinking: string | null;
    }, {
        type: "reasoning_action";
        id: number;
        agentMessageId: number;
        output: string | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        thinking: string | null;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "reasoning_started";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "reasoning_action";
        id: number;
        agentMessageId: number;
        output: string | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        thinking: string | null;
    };
}, {
    type: "reasoning_started";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "reasoning_action";
        id: number;
        agentMessageId: number;
        output: string | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        thinking: string | null;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"reasoning_thinking">;
    created: z.ZodNumber;
    configurationId: z.ZodString;
    messageId: z.ZodString;
    action: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        output: z.ZodNullable<z.ZodString>;
        thinking: z.ZodNullable<z.ZodString>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"reasoning_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "reasoning_action";
        id: number;
        agentMessageId: number;
        output: string | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        thinking: string | null;
    }, {
        type: "reasoning_action";
        id: number;
        agentMessageId: number;
        output: string | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        thinking: string | null;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "reasoning_thinking";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "reasoning_action";
        id: number;
        agentMessageId: number;
        output: string | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        thinking: string | null;
    };
}, {
    type: "reasoning_thinking";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "reasoning_action";
        id: number;
        agentMessageId: number;
        output: string | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        thinking: string | null;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"reasoning_tokens">;
    created: z.ZodNumber;
    configurationId: z.ZodString;
    messageId: z.ZodString;
    action: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        output: z.ZodNullable<z.ZodString>;
        thinking: z.ZodNullable<z.ZodString>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"reasoning_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "reasoning_action";
        id: number;
        agentMessageId: number;
        output: string | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        thinking: string | null;
    }, {
        type: "reasoning_action";
        id: number;
        agentMessageId: number;
        output: string | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        thinking: string | null;
    }>;
    content: z.ZodString;
    classification: z.ZodType<"tokens" | "chain_of_thought", z.ZodTypeDef, "tokens" | "chain_of_thought">;
}, "strip", z.ZodTypeAny, {
    type: "reasoning_tokens";
    created: number;
    configurationId: string;
    messageId: string;
    classification: "tokens" | "chain_of_thought";
    content: string;
    action: {
        type: "reasoning_action";
        id: number;
        agentMessageId: number;
        output: string | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        thinking: string | null;
    };
}, {
    type: "reasoning_tokens";
    created: number;
    configurationId: string;
    messageId: string;
    classification: "tokens" | "chain_of_thought";
    content: string;
    action: {
        type: "reasoning_action";
        id: number;
        agentMessageId: number;
        output: string | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        thinking: string | null;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"retrieval_params">;
    created: z.ZodNumber;
    configurationId: z.ZodString;
    messageId: z.ZodString;
    dataSources: z.ZodArray<z.ZodObject<{
        workspaceId: z.ZodString;
        dataSourceViewId: z.ZodString;
        filter: z.ZodObject<{
            parents: z.ZodNullable<z.ZodObject<{
                in: z.ZodArray<z.ZodString, "many">;
                not: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                in: string[];
                not: string[];
            }, {
                in: string[];
                not: string[];
            }>>;
        }, "strip", z.ZodTypeAny, {
            parents: {
                in: string[];
                not: string[];
            } | null;
        }, {
            parents: {
                in: string[];
                not: string[];
            } | null;
        }>;
    }, "strip", z.ZodTypeAny, {
        filter: {
            parents: {
                in: string[];
                not: string[];
            } | null;
        };
        workspaceId: string;
        dataSourceViewId: string;
    }, {
        filter: {
            parents: {
                in: string[];
                not: string[];
            } | null;
        };
        workspaceId: string;
        dataSourceViewId: string;
    }>, "many">;
    action: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        params: z.ZodObject<{
            relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                duration: z.ZodNumber;
                unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
            }, "strip", z.ZodTypeAny, {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            }, {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            }>>;
            query: z.ZodNullable<z.ZodString>;
            topK: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
            query: string | null;
            topK: number;
        }, {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
            query: string | null;
            topK: number;
        }>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        documents: z.ZodNullable<z.ZodArray<z.ZodObject<{
            chunks: z.ZodArray<z.ZodObject<{
                offset: z.ZodNumber;
                score: z.ZodNullable<z.ZodNumber>;
                text: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                text: string;
                offset: number;
                score: number | null;
            }, {
                text: string;
                offset: number;
                score: number | null;
            }>, "many">;
            documentId: z.ZodString;
            dataSourceView: z.ZodNullable<z.ZodObject<{
                category: z.ZodType<"folder" | "managed" | "website" | "apps" | "actions", z.ZodTypeDef, "folder" | "managed" | "website" | "apps" | "actions">;
                createdAt: z.ZodNumber;
                dataSource: z.ZodObject<{
                    id: z.ZodNumber;
                    sId: z.ZodString;
                    createdAt: z.ZodNumber;
                    name: z.ZodString;
                    description: z.ZodNullable<z.ZodString>;
                    assistantDefaultSelected: z.ZodBoolean;
                    dustAPIProjectId: z.ZodString;
                    dustAPIDataSourceId: z.ZodString;
                    connectorId: z.ZodNullable<z.ZodString>;
                    connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
                    editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        editedAt: z.ZodNullable<z.ZodNumber>;
                        fullName: z.ZodNullable<z.ZodString>;
                        imageUrl: z.ZodNullable<z.ZodString>;
                        email: z.ZodNullable<z.ZodString>;
                        userId: z.ZodNullable<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    }, {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                }, {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                }>;
                editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    editedAt: z.ZodNullable<z.ZodNumber>;
                    fullName: z.ZodNullable<z.ZodString>;
                    imageUrl: z.ZodNullable<z.ZodString>;
                    email: z.ZodNullable<z.ZodString>;
                    userId: z.ZodNullable<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                }, {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                }>>>;
                id: z.ZodNumber;
                kind: z.ZodType<"custom" | "default", z.ZodTypeDef, "custom" | "default">;
                parentsIn: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
                sId: z.ZodString;
                updatedAt: z.ZodNumber;
                spaceId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            }, {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            }>>;
            id: z.ZodNumber;
            reference: z.ZodString;
            score: z.ZodNullable<z.ZodNumber>;
            sourceUrl: z.ZodNullable<z.ZodString>;
            tags: z.ZodArray<z.ZodString, "many">;
            timestamp: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            id: number;
            score: number | null;
            timestamp: number;
            tags: string[];
            chunks: {
                text: string;
                offset: number;
                score: number | null;
            }[];
            documentId: string;
            dataSourceView: {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            } | null;
            reference: string;
            sourceUrl: string | null;
        }, {
            id: number;
            score: number | null;
            timestamp: number;
            tags: string[];
            chunks: {
                text: string;
                offset: number;
                score: number | null;
            }[];
            documentId: string;
            dataSourceView: {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            } | null;
            reference: string;
            sourceUrl: string | null;
        }>, "many">>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"retrieval_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "retrieval_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
            query: string | null;
            topK: number;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        documents: {
            id: number;
            score: number | null;
            timestamp: number;
            tags: string[];
            chunks: {
                text: string;
                offset: number;
                score: number | null;
            }[];
            documentId: string;
            dataSourceView: {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            } | null;
            reference: string;
            sourceUrl: string | null;
        }[] | null;
    }, {
        type: "retrieval_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
            query: string | null;
            topK: number;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        documents: {
            id: number;
            score: number | null;
            timestamp: number;
            tags: string[];
            chunks: {
                text: string;
                offset: number;
                score: number | null;
            }[];
            documentId: string;
            dataSourceView: {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            } | null;
            reference: string;
            sourceUrl: string | null;
        }[] | null;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "retrieval_params";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "retrieval_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
            query: string | null;
            topK: number;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        documents: {
            id: number;
            score: number | null;
            timestamp: number;
            tags: string[];
            chunks: {
                text: string;
                offset: number;
                score: number | null;
            }[];
            documentId: string;
            dataSourceView: {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            } | null;
            reference: string;
            sourceUrl: string | null;
        }[] | null;
    };
    dataSources: {
        filter: {
            parents: {
                in: string[];
                not: string[];
            } | null;
        };
        workspaceId: string;
        dataSourceViewId: string;
    }[];
}, {
    type: "retrieval_params";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "retrieval_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
            query: string | null;
            topK: number;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        documents: {
            id: number;
            score: number | null;
            timestamp: number;
            tags: string[];
            chunks: {
                text: string;
                offset: number;
                score: number | null;
            }[];
            documentId: string;
            dataSourceView: {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            } | null;
            reference: string;
            sourceUrl: string | null;
        }[] | null;
    };
    dataSources: {
        filter: {
            parents: {
                in: string[];
                not: string[];
            } | null;
        };
        workspaceId: string;
        dataSourceViewId: string;
    }[];
}>, z.ZodObject<{
    type: z.ZodLiteral<"search_labels_params">;
    created: z.ZodNumber;
    configurationId: z.ZodString;
    messageId: z.ZodString;
    action: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        output: z.ZodNullable<z.ZodObject<{
            tags: z.ZodArray<z.ZodObject<{
                tag: z.ZodString;
                match_count: z.ZodNumber;
                data_sources: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                tag: string;
                match_count: number;
                data_sources: string[];
            }, {
                tag: string;
                match_count: number;
                data_sources: string[];
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            tags: {
                tag: string;
                match_count: number;
                data_sources: string[];
            }[];
        }, {
            tags: {
                tag: string;
                match_count: number;
                data_sources: string[];
            }[];
        }>>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"search_labels_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "search_labels_action";
        id: number;
        agentMessageId: number;
        output: {
            tags: {
                tag: string;
                match_count: number;
                data_sources: string[];
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    }, {
        type: "search_labels_action";
        id: number;
        agentMessageId: number;
        output: {
            tags: {
                tag: string;
                match_count: number;
                data_sources: string[];
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "search_labels_params";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "search_labels_action";
        id: number;
        agentMessageId: number;
        output: {
            tags: {
                tag: string;
                match_count: number;
                data_sources: string[];
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    };
}, {
    type: "search_labels_params";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "search_labels_action";
        id: number;
        agentMessageId: number;
        output: {
            tags: {
                tag: string;
                match_count: number;
                data_sources: string[];
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"tables_query_model_output">;
    created: z.ZodNumber;
    configurationId: z.ZodString;
    messageId: z.ZodString;
    action: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
        output: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
        resultsFileId: z.ZodNullable<z.ZodString>;
        resultsFileSnippet: z.ZodNullable<z.ZodString>;
        sectionFileId: z.ZodNullable<z.ZodString>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        agentMessageId: z.ZodNumber;
        step: z.ZodNumber;
        type: z.ZodLiteral<"tables_query_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "tables_query_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        output: Record<string, string | number | boolean> | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        resultsFileId: string | null;
        resultsFileSnippet: string | null;
        sectionFileId: string | null;
    }, {
        type: "tables_query_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        output: Record<string, string | number | boolean> | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        resultsFileId: string | null;
        resultsFileSnippet: string | null;
        sectionFileId: string | null;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "tables_query_model_output";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "tables_query_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        output: Record<string, string | number | boolean> | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        resultsFileId: string | null;
        resultsFileSnippet: string | null;
        sectionFileId: string | null;
    };
}, {
    type: "tables_query_model_output";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "tables_query_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        output: Record<string, string | number | boolean> | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        resultsFileId: string | null;
        resultsFileSnippet: string | null;
        sectionFileId: string | null;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"tables_query_output">;
    created: z.ZodNumber;
    configurationId: z.ZodString;
    messageId: z.ZodString;
    action: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
        output: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
        resultsFileId: z.ZodNullable<z.ZodString>;
        resultsFileSnippet: z.ZodNullable<z.ZodString>;
        sectionFileId: z.ZodNullable<z.ZodString>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        agentMessageId: z.ZodNumber;
        step: z.ZodNumber;
        type: z.ZodLiteral<"tables_query_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "tables_query_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        output: Record<string, string | number | boolean> | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        resultsFileId: string | null;
        resultsFileSnippet: string | null;
        sectionFileId: string | null;
    }, {
        type: "tables_query_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        output: Record<string, string | number | boolean> | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        resultsFileId: string | null;
        resultsFileSnippet: string | null;
        sectionFileId: string | null;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "tables_query_output";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "tables_query_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        output: Record<string, string | number | boolean> | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        resultsFileId: string | null;
        resultsFileSnippet: string | null;
        sectionFileId: string | null;
    };
}, {
    type: "tables_query_output";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "tables_query_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        output: Record<string, string | number | boolean> | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        resultsFileId: string | null;
        resultsFileSnippet: string | null;
        sectionFileId: string | null;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"tables_query_started">;
    created: z.ZodNumber;
    configurationId: z.ZodString;
    messageId: z.ZodString;
    action: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
        output: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
        resultsFileId: z.ZodNullable<z.ZodString>;
        resultsFileSnippet: z.ZodNullable<z.ZodString>;
        sectionFileId: z.ZodNullable<z.ZodString>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        agentMessageId: z.ZodNumber;
        step: z.ZodNumber;
        type: z.ZodLiteral<"tables_query_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "tables_query_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        output: Record<string, string | number | boolean> | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        resultsFileId: string | null;
        resultsFileSnippet: string | null;
        sectionFileId: string | null;
    }, {
        type: "tables_query_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        output: Record<string, string | number | boolean> | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        resultsFileId: string | null;
        resultsFileSnippet: string | null;
        sectionFileId: string | null;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "tables_query_started";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "tables_query_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        output: Record<string, string | number | boolean> | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        resultsFileId: string | null;
        resultsFileSnippet: string | null;
        sectionFileId: string | null;
    };
}, {
    type: "tables_query_started";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "tables_query_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        output: Record<string, string | number | boolean> | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        resultsFileId: string | null;
        resultsFileSnippet: string | null;
        sectionFileId: string | null;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"websearch_params">;
    created: z.ZodNumber;
    configurationId: z.ZodString;
    messageId: z.ZodString;
    action: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        query: z.ZodString;
        output: z.ZodNullable<z.ZodUnion<[z.ZodObject<{
            results: z.ZodArray<z.ZodObject<{
                title: z.ZodString;
                snippet: z.ZodString;
                link: z.ZodString;
                reference: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }, {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        }, {
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        }>, z.ZodObject<{
            results: z.ZodArray<z.ZodObject<{
                title: z.ZodString;
                snippet: z.ZodString;
                link: z.ZodString;
                reference: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }, {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }>, "many">;
            error: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            error: string;
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        }, {
            error: string;
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        }>]>>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"websearch_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "websearch_action";
        id: number;
        agentMessageId: number;
        output: {
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | {
            error: string;
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        query: string;
    }, {
        type: "websearch_action";
        id: number;
        agentMessageId: number;
        output: {
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | {
            error: string;
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        query: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "websearch_params";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "websearch_action";
        id: number;
        agentMessageId: number;
        output: {
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | {
            error: string;
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        query: string;
    };
}, {
    type: "websearch_params";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "websearch_action";
        id: number;
        agentMessageId: number;
        output: {
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | {
            error: string;
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        query: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"tool_params">;
    created: z.ZodNumber;
    configurationId: z.ZodString;
    messageId: z.ZodString;
    action: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        functionCallName: z.ZodNullable<z.ZodString>;
        params: z.ZodUnknown;
        type: z.ZodLiteral<"tool_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "tool_action";
        id: number;
        agentMessageId: number;
        functionCallName: string | null;
        params?: unknown;
    }, {
        type: "tool_action";
        id: number;
        agentMessageId: number;
        functionCallName: string | null;
        params?: unknown;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "tool_params";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "tool_action";
        id: number;
        agentMessageId: number;
        functionCallName: string | null;
        params?: unknown;
    };
}, {
    type: "tool_params";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "tool_action";
        id: number;
        agentMessageId: number;
        functionCallName: string | null;
        params?: unknown;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"tool_approve_execution">;
    created: z.ZodNumber;
    configurationId: z.ZodString;
    messageId: z.ZodString;
    action: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        functionCallName: z.ZodNullable<z.ZodString>;
        params: z.ZodUnknown;
        type: z.ZodLiteral<"tool_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "tool_action";
        id: number;
        agentMessageId: number;
        functionCallName: string | null;
        params?: unknown;
    }, {
        type: "tool_action";
        id: number;
        agentMessageId: number;
        functionCallName: string | null;
        params?: unknown;
    }>;
    inputs: z.ZodRecord<z.ZodString, z.ZodAny>;
    stake: z.ZodOptional<z.ZodEnum<["low", "high"]>>;
    metadata: z.ZodObject<{
        mcpServerName: z.ZodString;
        toolName: z.ZodString;
        agentName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        mcpServerName: string;
        toolName: string;
        agentName: string;
    }, {
        mcpServerName: string;
        toolName: string;
        agentName: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "tool_approve_execution";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "tool_action";
        id: number;
        agentMessageId: number;
        functionCallName: string | null;
        params?: unknown;
    };
    inputs: Record<string, any>;
    metadata: {
        mcpServerName: string;
        toolName: string;
        agentName: string;
    };
    stake?: "low" | "high" | undefined;
}, {
    type: "tool_approve_execution";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "tool_action";
        id: number;
        agentMessageId: number;
        functionCallName: string | null;
        params?: unknown;
    };
    inputs: Record<string, any>;
    metadata: {
        mcpServerName: string;
        toolName: string;
        agentName: string;
    };
    stake?: "low" | "high" | undefined;
}>]>;
export type AgentActionSpecificEvent = z.infer<typeof AgentActionSpecificEventSchema>;
declare const AgentActionSuccessEventSchema: z.ZodObject<{
    type: z.ZodLiteral<"agent_action_success">;
    created: z.ZodNumber;
    configurationId: z.ZodString;
    messageId: z.ZodString;
    action: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        params: z.ZodObject<{
            relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                duration: z.ZodNumber;
                unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
            }, "strip", z.ZodTypeAny, {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            }, {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            }>>;
            query: z.ZodNullable<z.ZodString>;
            topK: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
            query: string | null;
            topK: number;
        }, {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
            query: string | null;
            topK: number;
        }>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        documents: z.ZodNullable<z.ZodArray<z.ZodObject<{
            chunks: z.ZodArray<z.ZodObject<{
                offset: z.ZodNumber;
                score: z.ZodNullable<z.ZodNumber>;
                text: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                text: string;
                offset: number;
                score: number | null;
            }, {
                text: string;
                offset: number;
                score: number | null;
            }>, "many">;
            documentId: z.ZodString;
            dataSourceView: z.ZodNullable<z.ZodObject<{
                category: z.ZodType<"folder" | "managed" | "website" | "apps" | "actions", z.ZodTypeDef, "folder" | "managed" | "website" | "apps" | "actions">;
                createdAt: z.ZodNumber;
                dataSource: z.ZodObject<{
                    id: z.ZodNumber;
                    sId: z.ZodString;
                    createdAt: z.ZodNumber;
                    name: z.ZodString;
                    description: z.ZodNullable<z.ZodString>;
                    assistantDefaultSelected: z.ZodBoolean;
                    dustAPIProjectId: z.ZodString;
                    dustAPIDataSourceId: z.ZodString;
                    connectorId: z.ZodNullable<z.ZodString>;
                    connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
                    editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        editedAt: z.ZodNullable<z.ZodNumber>;
                        fullName: z.ZodNullable<z.ZodString>;
                        imageUrl: z.ZodNullable<z.ZodString>;
                        email: z.ZodNullable<z.ZodString>;
                        userId: z.ZodNullable<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    }, {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                }, {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                }>;
                editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    editedAt: z.ZodNullable<z.ZodNumber>;
                    fullName: z.ZodNullable<z.ZodString>;
                    imageUrl: z.ZodNullable<z.ZodString>;
                    email: z.ZodNullable<z.ZodString>;
                    userId: z.ZodNullable<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                }, {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                }>>>;
                id: z.ZodNumber;
                kind: z.ZodType<"custom" | "default", z.ZodTypeDef, "custom" | "default">;
                parentsIn: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
                sId: z.ZodString;
                updatedAt: z.ZodNumber;
                spaceId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            }, {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            }>>;
            id: z.ZodNumber;
            reference: z.ZodString;
            score: z.ZodNullable<z.ZodNumber>;
            sourceUrl: z.ZodNullable<z.ZodString>;
            tags: z.ZodArray<z.ZodString, "many">;
            timestamp: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            id: number;
            score: number | null;
            timestamp: number;
            tags: string[];
            chunks: {
                text: string;
                offset: number;
                score: number | null;
            }[];
            documentId: string;
            dataSourceView: {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            } | null;
            reference: string;
            sourceUrl: string | null;
        }, {
            id: number;
            score: number | null;
            timestamp: number;
            tags: string[];
            chunks: {
                text: string;
                offset: number;
                score: number | null;
            }[];
            documentId: string;
            dataSourceView: {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            } | null;
            reference: string;
            sourceUrl: string | null;
        }>, "many">>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"retrieval_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "retrieval_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
            query: string | null;
            topK: number;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        documents: {
            id: number;
            score: number | null;
            timestamp: number;
            tags: string[];
            chunks: {
                text: string;
                offset: number;
                score: number | null;
            }[];
            documentId: string;
            dataSourceView: {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            } | null;
            reference: string;
            sourceUrl: string | null;
        }[] | null;
    }, {
        type: "retrieval_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
            query: string | null;
            topK: number;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        documents: {
            id: number;
            score: number | null;
            timestamp: number;
            tags: string[];
            chunks: {
                text: string;
                offset: number;
                score: number | null;
            }[];
            documentId: string;
            dataSourceView: {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            } | null;
            reference: string;
            sourceUrl: string | null;
        }[] | null;
    }>, z.ZodEffects<z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        appWorkspaceId: z.ZodString;
        appId: z.ZodString;
        appName: z.ZodString;
        params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
        runningBlock: z.ZodNullable<z.ZodObject<{
            type: z.ZodString;
            name: z.ZodString;
            status: z.ZodEnum<["running", "succeeded", "errored"]>;
        }, "strip", z.ZodTypeAny, {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        }, {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        }>>;
        output: z.ZodNullable<z.ZodUnknown>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"dust_app_run_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
        output?: unknown;
    }, {
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
        output?: unknown;
    }>, {
        output: unknown;
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
    }, {
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
        output?: unknown;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
        output: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
        resultsFileId: z.ZodNullable<z.ZodString>;
        resultsFileSnippet: z.ZodNullable<z.ZodString>;
        sectionFileId: z.ZodNullable<z.ZodString>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        agentMessageId: z.ZodNumber;
        step: z.ZodNumber;
        type: z.ZodLiteral<"tables_query_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "tables_query_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        output: Record<string, string | number | boolean> | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        resultsFileId: string | null;
        resultsFileSnippet: string | null;
        sectionFileId: string | null;
    }, {
        type: "tables_query_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        output: Record<string, string | number | boolean> | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        resultsFileId: string | null;
        resultsFileSnippet: string | null;
        sectionFileId: string | null;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        params: z.ZodObject<{
            relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                duration: z.ZodNumber;
                unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
            }, "strip", z.ZodTypeAny, {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            }, {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            }>>;
        }, "strip", z.ZodTypeAny, {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
        }, {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
        }>;
        schema: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodEnum<["string", "number", "boolean"]>;
            description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "string" | "number" | "boolean";
            name: string;
            description: string;
        }, {
            type: "string" | "number" | "boolean";
            name: string;
            description: string;
        }>, "many">;
        outputs: z.ZodNullable<z.ZodObject<{
            data: z.ZodArray<z.ZodUnknown, "many">;
            min_timestamp: z.ZodNumber;
            total_documents: z.ZodNumber;
            total_chunks: z.ZodNumber;
            total_tokens: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            data: unknown[];
            min_timestamp: number;
            total_documents: number;
            total_chunks: number;
            total_tokens: number;
        }, {
            data: unknown[];
            min_timestamp: number;
            total_documents: number;
            total_chunks: number;
            total_tokens: number;
        }>>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"process_action">;
    }>, "strip", z.ZodTypeAny, {
        schema: {
            type: "string" | "number" | "boolean";
            name: string;
            description: string;
        }[];
        type: "process_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        outputs: {
            data: unknown[];
            min_timestamp: number;
            total_documents: number;
            total_chunks: number;
            total_tokens: number;
        } | null;
    }, {
        schema: {
            type: "string" | "number" | "boolean";
            name: string;
            description: string;
        }[];
        type: "process_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        outputs: {
            data: unknown[];
            min_timestamp: number;
            total_documents: number;
            total_chunks: number;
            total_tokens: number;
        } | null;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        query: z.ZodString;
        output: z.ZodNullable<z.ZodUnion<[z.ZodObject<{
            results: z.ZodArray<z.ZodObject<{
                title: z.ZodString;
                snippet: z.ZodString;
                link: z.ZodString;
                reference: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }, {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        }, {
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        }>, z.ZodObject<{
            results: z.ZodArray<z.ZodObject<{
                title: z.ZodString;
                snippet: z.ZodString;
                link: z.ZodString;
                reference: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }, {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }>, "many">;
            error: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            error: string;
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        }, {
            error: string;
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        }>]>>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"websearch_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "websearch_action";
        id: number;
        agentMessageId: number;
        output: {
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | {
            error: string;
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        query: string;
    }, {
        type: "websearch_action";
        id: number;
        agentMessageId: number;
        output: {
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | {
            error: string;
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        query: string;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        urls: z.ZodArray<z.ZodString, "many">;
        output: z.ZodNullable<z.ZodObject<{
            results: z.ZodArray<z.ZodObject<{
                requestedUrl: z.ZodString;
                browsedUrl: z.ZodString;
                content: z.ZodString;
                responseCode: z.ZodString;
                errorMessage: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }, {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            results: {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }[];
        }, {
            results: {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }[];
        }>>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"browse_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "browse_action";
        id: number;
        agentMessageId: number;
        urls: string[];
        output: {
            results: {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    }, {
        type: "browse_action";
        id: number;
        agentMessageId: number;
        urls: string[];
        output: {
            results: {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        files: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            fileId: z.ZodString;
            contentFragmentId: z.ZodUndefined;
            nodeDataSourceViewId: z.ZodUndefined;
            title: z.ZodString;
            contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
        }, "strip", z.ZodTypeAny, {
            title: string;
            fileId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            contentFragmentId?: undefined;
            nodeDataSourceViewId?: undefined;
        }, {
            title: string;
            fileId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            contentFragmentId?: undefined;
            nodeDataSourceViewId?: undefined;
        }>, z.ZodObject<{
            fileId: z.ZodUndefined;
            contentFragmentId: z.ZodString;
            nodeDataSourceViewId: z.ZodString;
            title: z.ZodString;
            contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
        }, "strip", z.ZodTypeAny, {
            title: string;
            contentFragmentId: string;
            nodeDataSourceViewId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            fileId?: undefined;
        }, {
            title: string;
            contentFragmentId: string;
            nodeDataSourceViewId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            fileId?: undefined;
        }>]>, "many">;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        agentMessageId: z.ZodNumber;
        step: z.ZodNumber;
        type: z.ZodLiteral<"conversation_list_files_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "conversation_list_files_action";
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        files: ({
            title: string;
            fileId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            contentFragmentId?: undefined;
            nodeDataSourceViewId?: undefined;
        } | {
            title: string;
            contentFragmentId: string;
            nodeDataSourceViewId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            fileId?: undefined;
        })[];
    }, {
        type: "conversation_list_files_action";
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        files: ({
            title: string;
            fileId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            contentFragmentId?: undefined;
            nodeDataSourceViewId?: undefined;
        } | {
            title: string;
            contentFragmentId: string;
            nodeDataSourceViewId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            fileId?: undefined;
        })[];
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        params: z.ZodObject<{
            fileId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            fileId: string;
        }, {
            fileId: string;
        }>;
        tokensCount: z.ZodNullable<z.ZodNumber>;
        fileTitle: z.ZodNullable<z.ZodString>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"conversation_include_file_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "conversation_include_file_action";
        params: {
            fileId: string;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        tokensCount: number | null;
        fileTitle: string | null;
    }, {
        type: "conversation_include_file_action";
        params: {
            fileId: string;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        tokensCount: number | null;
        fileTitle: string | null;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        output: z.ZodNullable<z.ZodString>;
        thinking: z.ZodNullable<z.ZodString>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"reasoning_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "reasoning_action";
        id: number;
        agentMessageId: number;
        output: string | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        thinking: string | null;
    }, {
        type: "reasoning_action";
        id: number;
        agentMessageId: number;
        output: string | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        thinking: string | null;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        output: z.ZodNullable<z.ZodObject<{
            tags: z.ZodArray<z.ZodObject<{
                tag: z.ZodString;
                match_count: z.ZodNumber;
                data_sources: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                tag: string;
                match_count: number;
                data_sources: string[];
            }, {
                tag: string;
                match_count: number;
                data_sources: string[];
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            tags: {
                tag: string;
                match_count: number;
                data_sources: string[];
            }[];
        }, {
            tags: {
                tag: string;
                match_count: number;
                data_sources: string[];
            }[];
        }>>;
        functionCallId: z.ZodNullable<z.ZodString>;
        functionCallName: z.ZodNullable<z.ZodString>;
        step: z.ZodNumber;
        type: z.ZodLiteral<"search_labels_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "search_labels_action";
        id: number;
        agentMessageId: number;
        output: {
            tags: {
                tag: string;
                match_count: number;
                data_sources: string[];
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    }, {
        type: "search_labels_action";
        id: number;
        agentMessageId: number;
        output: {
            tags: {
                tag: string;
                match_count: number;
                data_sources: string[];
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
    }, {
        agentMessageId: z.ZodNumber;
        functionCallName: z.ZodNullable<z.ZodString>;
        params: z.ZodUnknown;
        type: z.ZodLiteral<"tool_action">;
    }>, "strip", z.ZodTypeAny, {
        type: "tool_action";
        id: number;
        agentMessageId: number;
        functionCallName: string | null;
        params?: unknown;
    }, {
        type: "tool_action";
        id: number;
        agentMessageId: number;
        functionCallName: string | null;
        params?: unknown;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "agent_action_success";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "browse_action";
        id: number;
        agentMessageId: number;
        urls: string[];
        output: {
            results: {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    } | {
        type: "search_labels_action";
        id: number;
        agentMessageId: number;
        output: {
            tags: {
                tag: string;
                match_count: number;
                data_sources: string[];
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    } | {
        type: "reasoning_action";
        id: number;
        agentMessageId: number;
        output: string | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        thinking: string | null;
    } | {
        type: "conversation_include_file_action";
        params: {
            fileId: string;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        tokensCount: number | null;
        fileTitle: string | null;
    } | {
        type: "conversation_list_files_action";
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        files: ({
            title: string;
            fileId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            contentFragmentId?: undefined;
            nodeDataSourceViewId?: undefined;
        } | {
            title: string;
            contentFragmentId: string;
            nodeDataSourceViewId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            fileId?: undefined;
        })[];
    } | {
        output: unknown;
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
    } | {
        type: "retrieval_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
            query: string | null;
            topK: number;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        documents: {
            id: number;
            score: number | null;
            timestamp: number;
            tags: string[];
            chunks: {
                text: string;
                offset: number;
                score: number | null;
            }[];
            documentId: string;
            dataSourceView: {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            } | null;
            reference: string;
            sourceUrl: string | null;
        }[] | null;
    } | {
        schema: {
            type: "string" | "number" | "boolean";
            name: string;
            description: string;
        }[];
        type: "process_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        outputs: {
            data: unknown[];
            min_timestamp: number;
            total_documents: number;
            total_chunks: number;
            total_tokens: number;
        } | null;
    } | {
        type: "tables_query_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        output: Record<string, string | number | boolean> | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        resultsFileId: string | null;
        resultsFileSnippet: string | null;
        sectionFileId: string | null;
    } | {
        type: "websearch_action";
        id: number;
        agentMessageId: number;
        output: {
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | {
            error: string;
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        query: string;
    } | {
        type: "tool_action";
        id: number;
        agentMessageId: number;
        functionCallName: string | null;
        params?: unknown;
    };
}, {
    type: "agent_action_success";
    created: number;
    configurationId: string;
    messageId: string;
    action: {
        type: "browse_action";
        id: number;
        agentMessageId: number;
        urls: string[];
        output: {
            results: {
                requestedUrl: string;
                browsedUrl: string;
                content: string;
                responseCode: string;
                errorMessage: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    } | {
        type: "search_labels_action";
        id: number;
        agentMessageId: number;
        output: {
            tags: {
                tag: string;
                match_count: number;
                data_sources: string[];
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
    } | {
        type: "reasoning_action";
        id: number;
        agentMessageId: number;
        output: string | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        thinking: string | null;
    } | {
        type: "conversation_include_file_action";
        params: {
            fileId: string;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        tokensCount: number | null;
        fileTitle: string | null;
    } | {
        type: "conversation_list_files_action";
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        files: ({
            title: string;
            fileId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            contentFragmentId?: undefined;
            nodeDataSourceViewId?: undefined;
        } | {
            title: string;
            contentFragmentId: string;
            nodeDataSourceViewId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            fileId?: undefined;
        })[];
    } | {
        type: "dust_app_run_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        appWorkspaceId: string;
        appId: string;
        appName: string;
        runningBlock: {
            type: string;
            status: "running" | "succeeded" | "errored";
            name: string;
        } | null;
        output?: unknown;
    } | {
        type: "retrieval_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
            query: string | null;
            topK: number;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        documents: {
            id: number;
            score: number | null;
            timestamp: number;
            tags: string[];
            chunks: {
                text: string;
                offset: number;
                score: number | null;
            }[];
            documentId: string;
            dataSourceView: {
                category: "folder" | "managed" | "website" | "apps" | "actions";
                id: number;
                sId: string;
                createdAt: number;
                dataSource: {
                    id: number;
                    sId: string;
                    createdAt: number;
                    name: string;
                    description: string | null;
                    assistantDefaultSelected: boolean;
                    dustAPIProjectId: string;
                    dustAPIDataSourceId: string;
                    connectorId: string | null;
                    connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                };
                kind: "custom" | "default";
                parentsIn: string[] | null;
                updatedAt: number;
                spaceId: string;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            } | null;
            reference: string;
            sourceUrl: string | null;
        }[] | null;
    } | {
        schema: {
            type: "string" | "number" | "boolean";
            name: string;
            description: string;
        }[];
        type: "process_action";
        params: {
            relativeTimeFrame: {
                duration: number;
                unit: "hour" | "day" | "week" | "month" | "year";
            } | null;
        };
        id: number;
        agentMessageId: number;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        outputs: {
            data: unknown[];
            min_timestamp: number;
            total_documents: number;
            total_chunks: number;
            total_tokens: number;
        } | null;
    } | {
        type: "tables_query_action";
        params: Record<string, string | number | boolean>;
        id: number;
        agentMessageId: number;
        output: Record<string, string | number | boolean> | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        resultsFileId: string | null;
        resultsFileSnippet: string | null;
        sectionFileId: string | null;
    } | {
        type: "websearch_action";
        id: number;
        agentMessageId: number;
        output: {
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | {
            error: string;
            results: {
                title: string;
                reference: string;
                snippet: string;
                link: string;
            }[];
        } | null;
        functionCallId: string | null;
        functionCallName: string | null;
        step: number;
        query: string;
    } | {
        type: "tool_action";
        id: number;
        agentMessageId: number;
        functionCallName: string | null;
        params?: unknown;
    };
}>;
export type AgentActionSuccessEvent = z.infer<typeof AgentActionSuccessEventSchema>;
declare const AgentMessageSuccessEventSchema: z.ZodObject<{
    type: z.ZodLiteral<"agent_message_success">;
    created: z.ZodNumber;
    configurationId: z.ZodString;
    messageId: z.ZodString;
    message: z.ZodObject<{
        id: z.ZodNumber;
        agentMessageId: z.ZodNumber;
        created: z.ZodNumber;
        type: z.ZodLiteral<"agent_message">;
        sId: z.ZodString;
        visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
        version: z.ZodNumber;
        parentMessageId: z.ZodNullable<z.ZodString>;
        configuration: z.ZodObject<{
            id: z.ZodNumber;
            versionCreatedAt: z.ZodNullable<z.ZodString>;
            sId: z.ZodString;
            version: z.ZodNumber;
            versionAuthorId: z.ZodNullable<z.ZodNumber>;
            instructions: z.ZodNullable<z.ZodString>;
            model: z.ZodObject<{
                providerId: z.ZodType<"openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks", z.ZodTypeDef, "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks">;
                modelId: z.ZodType<"gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1", z.ZodTypeDef, "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1">;
                temperature: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            }, {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            }>;
            status: z.ZodUnion<[z.ZodType<"active" | "archived" | "draft", z.ZodTypeDef, "active" | "archived" | "draft">, z.ZodType<"active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace", z.ZodTypeDef, "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace">]>;
            scope: z.ZodType<"global" | "workspace" | "published" | "private", z.ZodTypeDef, "global" | "workspace" | "published" | "private">;
            userFavorite: z.ZodBoolean;
            name: z.ZodString;
            description: z.ZodString;
            pictureUrl: z.ZodString;
            lastAuthors: z.ZodOptional<z.ZodReadonly<z.ZodArray<z.ZodString, "many">>>;
            usage: z.ZodOptional<z.ZodObject<{
                messageCount: z.ZodNumber;
                conversationCount: z.ZodNumber;
                userCount: z.ZodNumber;
                timePeriodSec: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            }, {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            }>>;
            maxStepsPerRun: z.ZodNumber;
            visualizationEnabled: z.ZodBoolean;
            templateId: z.ZodNullable<z.ZodString>;
            groupIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            requestedGroupIds: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
        }, "strip", z.ZodTypeAny, {
            status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
            id: number;
            sId: string;
            name: string;
            description: string;
            versionCreatedAt: string | null;
            version: number;
            versionAuthorId: number | null;
            instructions: string | null;
            model: {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            };
            scope: "global" | "workspace" | "published" | "private";
            userFavorite: boolean;
            pictureUrl: string;
            maxStepsPerRun: number;
            visualizationEnabled: boolean;
            templateId: string | null;
            requestedGroupIds: string[][];
            lastAuthors?: readonly string[] | undefined;
            usage?: {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            } | undefined;
            groupIds?: string[] | undefined;
        }, {
            status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
            id: number;
            sId: string;
            name: string;
            description: string;
            versionCreatedAt: string | null;
            version: number;
            versionAuthorId: number | null;
            instructions: string | null;
            model: {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            };
            scope: "global" | "workspace" | "published" | "private";
            userFavorite: boolean;
            pictureUrl: string;
            maxStepsPerRun: number;
            visualizationEnabled: boolean;
            templateId: string | null;
            requestedGroupIds: string[][];
            lastAuthors?: readonly string[] | undefined;
            usage?: {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            } | undefined;
            groupIds?: string[] | undefined;
        }>;
        status: z.ZodType<"created" | "succeeded" | "failed" | "cancelled", z.ZodTypeDef, "created" | "succeeded" | "failed" | "cancelled">;
        actions: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            params: z.ZodObject<{
                relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                    duration: z.ZodNumber;
                    unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
                }, "strip", z.ZodTypeAny, {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                }, {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                }>>;
                query: z.ZodNullable<z.ZodString>;
                topK: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            }, {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            }>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            documents: z.ZodNullable<z.ZodArray<z.ZodObject<{
                chunks: z.ZodArray<z.ZodObject<{
                    offset: z.ZodNumber;
                    score: z.ZodNullable<z.ZodNumber>;
                    text: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    text: string;
                    offset: number;
                    score: number | null;
                }, {
                    text: string;
                    offset: number;
                    score: number | null;
                }>, "many">;
                documentId: z.ZodString;
                dataSourceView: z.ZodNullable<z.ZodObject<{
                    category: z.ZodType<"folder" | "managed" | "website" | "apps" | "actions", z.ZodTypeDef, "folder" | "managed" | "website" | "apps" | "actions">;
                    createdAt: z.ZodNumber;
                    dataSource: z.ZodObject<{
                        id: z.ZodNumber;
                        sId: z.ZodString;
                        createdAt: z.ZodNumber;
                        name: z.ZodString;
                        description: z.ZodNullable<z.ZodString>;
                        assistantDefaultSelected: z.ZodBoolean;
                        dustAPIProjectId: z.ZodString;
                        dustAPIDataSourceId: z.ZodString;
                        connectorId: z.ZodNullable<z.ZodString>;
                        connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
                        editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                            editedAt: z.ZodNullable<z.ZodNumber>;
                            fullName: z.ZodNullable<z.ZodString>;
                            imageUrl: z.ZodNullable<z.ZodString>;
                            email: z.ZodNullable<z.ZodString>;
                            userId: z.ZodNullable<z.ZodString>;
                        }, "strip", z.ZodTypeAny, {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        }, {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        }>>>;
                    }, "strip", z.ZodTypeAny, {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    }, {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    }>;
                    editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        editedAt: z.ZodNullable<z.ZodNumber>;
                        fullName: z.ZodNullable<z.ZodString>;
                        imageUrl: z.ZodNullable<z.ZodString>;
                        email: z.ZodNullable<z.ZodString>;
                        userId: z.ZodNullable<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    }, {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    }>>>;
                    id: z.ZodNumber;
                    kind: z.ZodType<"custom" | "default", z.ZodTypeDef, "custom" | "default">;
                    parentsIn: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
                    sId: z.ZodString;
                    updatedAt: z.ZodNumber;
                    spaceId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                }, {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                }>>;
                id: z.ZodNumber;
                reference: z.ZodString;
                score: z.ZodNullable<z.ZodNumber>;
                sourceUrl: z.ZodNullable<z.ZodString>;
                tags: z.ZodArray<z.ZodString, "many">;
                timestamp: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }, {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }>, "many">>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"retrieval_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        }, {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        }>, z.ZodEffects<z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            appWorkspaceId: z.ZodString;
            appId: z.ZodString;
            appName: z.ZodString;
            params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            runningBlock: z.ZodNullable<z.ZodObject<{
                type: z.ZodString;
                name: z.ZodString;
                status: z.ZodEnum<["running", "succeeded", "errored"]>;
            }, "strip", z.ZodTypeAny, {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            }, {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            }>>;
            output: z.ZodNullable<z.ZodUnknown>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"dust_app_run_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        }, {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        }>, {
            output: unknown;
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
        }, {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            output: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
            resultsFileId: z.ZodNullable<z.ZodString>;
            resultsFileSnippet: z.ZodNullable<z.ZodString>;
            sectionFileId: z.ZodNullable<z.ZodString>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            agentMessageId: z.ZodNumber;
            step: z.ZodNumber;
            type: z.ZodLiteral<"tables_query_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        }, {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            params: z.ZodObject<{
                relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                    duration: z.ZodNumber;
                    unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
                }, "strip", z.ZodTypeAny, {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                }, {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                }>>;
            }, "strip", z.ZodTypeAny, {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            }, {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            }>;
            schema: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodEnum<["string", "number", "boolean"]>;
                description: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }, {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }>, "many">;
            outputs: z.ZodNullable<z.ZodObject<{
                data: z.ZodArray<z.ZodUnknown, "many">;
                min_timestamp: z.ZodNumber;
                total_documents: z.ZodNumber;
                total_chunks: z.ZodNumber;
                total_tokens: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            }, {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            }>>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"process_action">;
        }>, "strip", z.ZodTypeAny, {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        }, {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            query: z.ZodString;
            output: z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                results: z.ZodArray<z.ZodObject<{
                    title: z.ZodString;
                    snippet: z.ZodString;
                    link: z.ZodString;
                    reference: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }, {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            }, {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            }>, z.ZodObject<{
                results: z.ZodArray<z.ZodObject<{
                    title: z.ZodString;
                    snippet: z.ZodString;
                    link: z.ZodString;
                    reference: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }, {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }>, "many">;
                error: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            }, {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            }>]>>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"websearch_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        }, {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            urls: z.ZodArray<z.ZodString, "many">;
            output: z.ZodNullable<z.ZodObject<{
                results: z.ZodArray<z.ZodObject<{
                    requestedUrl: z.ZodString;
                    browsedUrl: z.ZodString;
                    content: z.ZodString;
                    responseCode: z.ZodString;
                    errorMessage: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }, {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            }, {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            }>>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"browse_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        }, {
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            files: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                fileId: z.ZodString;
                contentFragmentId: z.ZodUndefined;
                nodeDataSourceViewId: z.ZodUndefined;
                title: z.ZodString;
                contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
            }, "strip", z.ZodTypeAny, {
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            }, {
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            }>, z.ZodObject<{
                fileId: z.ZodUndefined;
                contentFragmentId: z.ZodString;
                nodeDataSourceViewId: z.ZodString;
                title: z.ZodString;
                contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
            }, "strip", z.ZodTypeAny, {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            }, {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            }>]>, "many">;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            agentMessageId: z.ZodNumber;
            step: z.ZodNumber;
            type: z.ZodLiteral<"conversation_list_files_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        }, {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            params: z.ZodObject<{
                fileId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                fileId: string;
            }, {
                fileId: string;
            }>;
            tokensCount: z.ZodNullable<z.ZodNumber>;
            fileTitle: z.ZodNullable<z.ZodString>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"conversation_include_file_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        }, {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            output: z.ZodNullable<z.ZodString>;
            thinking: z.ZodNullable<z.ZodString>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"reasoning_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        }, {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            output: z.ZodNullable<z.ZodObject<{
                tags: z.ZodArray<z.ZodObject<{
                    tag: z.ZodString;
                    match_count: z.ZodNumber;
                    data_sources: z.ZodArray<z.ZodString, "many">;
                }, "strip", z.ZodTypeAny, {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }, {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            }, {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            }>>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"search_labels_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        }, {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            functionCallName: z.ZodNullable<z.ZodString>;
            params: z.ZodUnknown;
            type: z.ZodLiteral<"tool_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        }, {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        }>]>, "many">;
        content: z.ZodNullable<z.ZodString>;
        chainOfThought: z.ZodNullable<z.ZodString>;
        rawContents: z.ZodArray<z.ZodObject<{
            step: z.ZodNumber;
            content: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            content: string;
            step: number;
        }, {
            content: string;
            step: number;
        }>, "many">;
        error: z.ZodNullable<z.ZodObject<{
            code: z.ZodString;
            message: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
            code: string;
        }, {
            message: string;
            code: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "agent_message";
        status: "created" | "succeeded" | "failed" | "cancelled";
        id: number;
        sId: string;
        created: number;
        actions: ({
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        } | {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        } | {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        } | {
            output: unknown;
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
        } | {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        } | {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        } | {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        } | {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        } | {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        })[];
        error: {
            message: string;
            code: string;
        } | null;
        content: string | null;
        agentMessageId: number;
        version: number;
        visibility: "visible" | "deleted";
        parentMessageId: string | null;
        configuration: {
            status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
            id: number;
            sId: string;
            name: string;
            description: string;
            versionCreatedAt: string | null;
            version: number;
            versionAuthorId: number | null;
            instructions: string | null;
            model: {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            };
            scope: "global" | "workspace" | "published" | "private";
            userFavorite: boolean;
            pictureUrl: string;
            maxStepsPerRun: number;
            visualizationEnabled: boolean;
            templateId: string | null;
            requestedGroupIds: string[][];
            lastAuthors?: readonly string[] | undefined;
            usage?: {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            } | undefined;
            groupIds?: string[] | undefined;
        };
        chainOfThought: string | null;
        rawContents: {
            content: string;
            step: number;
        }[];
    }, {
        type: "agent_message";
        status: "created" | "succeeded" | "failed" | "cancelled";
        id: number;
        sId: string;
        created: number;
        actions: ({
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        } | {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        } | {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        } | {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        } | {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        } | {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        } | {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        } | {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        } | {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        })[];
        error: {
            message: string;
            code: string;
        } | null;
        content: string | null;
        agentMessageId: number;
        version: number;
        visibility: "visible" | "deleted";
        parentMessageId: string | null;
        configuration: {
            status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
            id: number;
            sId: string;
            name: string;
            description: string;
            versionCreatedAt: string | null;
            version: number;
            versionAuthorId: number | null;
            instructions: string | null;
            model: {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            };
            scope: "global" | "workspace" | "published" | "private";
            userFavorite: boolean;
            pictureUrl: string;
            maxStepsPerRun: number;
            visualizationEnabled: boolean;
            templateId: string | null;
            requestedGroupIds: string[][];
            lastAuthors?: readonly string[] | undefined;
            usage?: {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            } | undefined;
            groupIds?: string[] | undefined;
        };
        chainOfThought: string | null;
        rawContents: {
            content: string;
            step: number;
        }[];
    }>;
    runIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    type: "agent_message_success";
    message: {
        type: "agent_message";
        status: "created" | "succeeded" | "failed" | "cancelled";
        id: number;
        sId: string;
        created: number;
        actions: ({
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        } | {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        } | {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        } | {
            output: unknown;
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
        } | {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        } | {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        } | {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        } | {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        } | {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        })[];
        error: {
            message: string;
            code: string;
        } | null;
        content: string | null;
        agentMessageId: number;
        version: number;
        visibility: "visible" | "deleted";
        parentMessageId: string | null;
        configuration: {
            status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
            id: number;
            sId: string;
            name: string;
            description: string;
            versionCreatedAt: string | null;
            version: number;
            versionAuthorId: number | null;
            instructions: string | null;
            model: {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            };
            scope: "global" | "workspace" | "published" | "private";
            userFavorite: boolean;
            pictureUrl: string;
            maxStepsPerRun: number;
            visualizationEnabled: boolean;
            templateId: string | null;
            requestedGroupIds: string[][];
            lastAuthors?: readonly string[] | undefined;
            usage?: {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            } | undefined;
            groupIds?: string[] | undefined;
        };
        chainOfThought: string | null;
        rawContents: {
            content: string;
            step: number;
        }[];
    };
    created: number;
    configurationId: string;
    messageId: string;
    runIds: string[];
}, {
    type: "agent_message_success";
    message: {
        type: "agent_message";
        status: "created" | "succeeded" | "failed" | "cancelled";
        id: number;
        sId: string;
        created: number;
        actions: ({
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        } | {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        } | {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        } | {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        } | {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        } | {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        } | {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        } | {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        } | {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        })[];
        error: {
            message: string;
            code: string;
        } | null;
        content: string | null;
        agentMessageId: number;
        version: number;
        visibility: "visible" | "deleted";
        parentMessageId: string | null;
        configuration: {
            status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
            id: number;
            sId: string;
            name: string;
            description: string;
            versionCreatedAt: string | null;
            version: number;
            versionAuthorId: number | null;
            instructions: string | null;
            model: {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            };
            scope: "global" | "workspace" | "published" | "private";
            userFavorite: boolean;
            pictureUrl: string;
            maxStepsPerRun: number;
            visualizationEnabled: boolean;
            templateId: string | null;
            requestedGroupIds: string[][];
            lastAuthors?: readonly string[] | undefined;
            usage?: {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            } | undefined;
            groupIds?: string[] | undefined;
        };
        chainOfThought: string | null;
        rawContents: {
            content: string;
            step: number;
        }[];
    };
    created: number;
    configurationId: string;
    messageId: string;
    runIds: string[];
}>;
export type AgentMessageSuccessEvent = z.infer<typeof AgentMessageSuccessEventSchema>;
declare const AgentGenerationCancelledEventSchema: z.ZodObject<{
    type: z.ZodLiteral<"agent_generation_cancelled">;
    created: z.ZodNumber;
    configurationId: z.ZodString;
    messageId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "agent_generation_cancelled";
    created: number;
    configurationId: string;
    messageId: string;
}, {
    type: "agent_generation_cancelled";
    created: number;
    configurationId: string;
    messageId: string;
}>;
export type AgentGenerationCancelledEvent = z.infer<typeof AgentGenerationCancelledEventSchema>;
declare const UserMessageErrorEventSchema: z.ZodObject<{
    type: z.ZodLiteral<"user_message_error">;
    created: z.ZodNumber;
    error: z.ZodObject<{
        code: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        code: string;
    }, {
        message: string;
        code: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "user_message_error";
    created: number;
    error: {
        message: string;
        code: string;
    };
}, {
    type: "user_message_error";
    created: number;
    error: {
        message: string;
        code: string;
    };
}>;
export type UserMessageErrorEvent = z.infer<typeof UserMessageErrorEventSchema>;
declare const UserMessageNewEventSchema: z.ZodObject<{
    type: z.ZodLiteral<"user_message_new">;
    created: z.ZodNumber;
    messageId: z.ZodString;
    message: z.ZodIntersection<z.ZodObject<{
        id: z.ZodNumber;
        created: z.ZodNumber;
        type: z.ZodLiteral<"user_message">;
        sId: z.ZodString;
        visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
        version: z.ZodNumber;
        user: z.ZodNullable<z.ZodObject<{
            sId: z.ZodString;
            id: z.ZodNumber;
            createdAt: z.ZodNumber;
            provider: z.ZodNullable<z.ZodType<"github" | "google" | "auth0" | "okta" | "samlp" | "waad", z.ZodTypeDef, "github" | "google" | "auth0" | "okta" | "samlp" | "waad">>;
            username: z.ZodString;
            email: z.ZodString;
            firstName: z.ZodString;
            lastName: z.ZodNullable<z.ZodString>;
            fullName: z.ZodString;
            image: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        }, {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        }>>;
        mentions: z.ZodArray<z.ZodObject<{
            configurationId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            configurationId: string;
        }, {
            configurationId: string;
        }>, "many">;
        content: z.ZodString;
        context: z.ZodObject<{
            username: z.ZodString;
            timezone: z.ZodEffects<z.ZodString, string, string>;
            fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            origin: z.ZodUnion<[z.ZodUnion<[z.ZodType<"slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email", z.ZodTypeDef, "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email">, z.ZodNull]>, z.ZodUndefined]>;
            localMCPServerIds: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        }, {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "user_message";
        id: number;
        sId: string;
        created: number;
        content: string;
        user: {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        } | null;
        version: number;
        visibility: "visible" | "deleted";
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    }, {
        type: "user_message";
        id: number;
        sId: string;
        created: number;
        content: string;
        user: {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        } | null;
        version: number;
        visibility: "visible" | "deleted";
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    }>, z.ZodObject<{
        rank: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        rank: number;
    }, {
        rank: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "user_message_new";
    message: {
        type: "user_message";
        id: number;
        sId: string;
        created: number;
        content: string;
        user: {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        } | null;
        version: number;
        visibility: "visible" | "deleted";
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    } & {
        rank: number;
    };
    created: number;
    messageId: string;
}, {
    type: "user_message_new";
    message: {
        type: "user_message";
        id: number;
        sId: string;
        created: number;
        content: string;
        user: {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        } | null;
        version: number;
        visibility: "visible" | "deleted";
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    } & {
        rank: number;
    };
    created: number;
    messageId: string;
}>;
export type UserMessageNewEvent = z.infer<typeof UserMessageNewEventSchema>;
declare const AgentMessageNewEventSchema: z.ZodObject<{
    type: z.ZodLiteral<"agent_message_new">;
    created: z.ZodNumber;
    configurationId: z.ZodString;
    messageId: z.ZodString;
    message: z.ZodIntersection<z.ZodObject<{
        id: z.ZodNumber;
        agentMessageId: z.ZodNumber;
        created: z.ZodNumber;
        type: z.ZodLiteral<"agent_message">;
        sId: z.ZodString;
        visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
        version: z.ZodNumber;
        parentMessageId: z.ZodNullable<z.ZodString>;
        configuration: z.ZodObject<{
            id: z.ZodNumber;
            versionCreatedAt: z.ZodNullable<z.ZodString>;
            sId: z.ZodString;
            version: z.ZodNumber;
            versionAuthorId: z.ZodNullable<z.ZodNumber>;
            instructions: z.ZodNullable<z.ZodString>;
            model: z.ZodObject<{
                providerId: z.ZodType<"openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks", z.ZodTypeDef, "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks">;
                modelId: z.ZodType<"gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1", z.ZodTypeDef, "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1">;
                temperature: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            }, {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            }>;
            status: z.ZodUnion<[z.ZodType<"active" | "archived" | "draft", z.ZodTypeDef, "active" | "archived" | "draft">, z.ZodType<"active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace", z.ZodTypeDef, "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace">]>;
            scope: z.ZodType<"global" | "workspace" | "published" | "private", z.ZodTypeDef, "global" | "workspace" | "published" | "private">;
            userFavorite: z.ZodBoolean;
            name: z.ZodString;
            description: z.ZodString;
            pictureUrl: z.ZodString;
            lastAuthors: z.ZodOptional<z.ZodReadonly<z.ZodArray<z.ZodString, "many">>>;
            usage: z.ZodOptional<z.ZodObject<{
                messageCount: z.ZodNumber;
                conversationCount: z.ZodNumber;
                userCount: z.ZodNumber;
                timePeriodSec: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            }, {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            }>>;
            maxStepsPerRun: z.ZodNumber;
            visualizationEnabled: z.ZodBoolean;
            templateId: z.ZodNullable<z.ZodString>;
            groupIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            requestedGroupIds: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
        }, "strip", z.ZodTypeAny, {
            status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
            id: number;
            sId: string;
            name: string;
            description: string;
            versionCreatedAt: string | null;
            version: number;
            versionAuthorId: number | null;
            instructions: string | null;
            model: {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            };
            scope: "global" | "workspace" | "published" | "private";
            userFavorite: boolean;
            pictureUrl: string;
            maxStepsPerRun: number;
            visualizationEnabled: boolean;
            templateId: string | null;
            requestedGroupIds: string[][];
            lastAuthors?: readonly string[] | undefined;
            usage?: {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            } | undefined;
            groupIds?: string[] | undefined;
        }, {
            status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
            id: number;
            sId: string;
            name: string;
            description: string;
            versionCreatedAt: string | null;
            version: number;
            versionAuthorId: number | null;
            instructions: string | null;
            model: {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            };
            scope: "global" | "workspace" | "published" | "private";
            userFavorite: boolean;
            pictureUrl: string;
            maxStepsPerRun: number;
            visualizationEnabled: boolean;
            templateId: string | null;
            requestedGroupIds: string[][];
            lastAuthors?: readonly string[] | undefined;
            usage?: {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            } | undefined;
            groupIds?: string[] | undefined;
        }>;
        status: z.ZodType<"created" | "succeeded" | "failed" | "cancelled", z.ZodTypeDef, "created" | "succeeded" | "failed" | "cancelled">;
        actions: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            params: z.ZodObject<{
                relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                    duration: z.ZodNumber;
                    unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
                }, "strip", z.ZodTypeAny, {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                }, {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                }>>;
                query: z.ZodNullable<z.ZodString>;
                topK: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            }, {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            }>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            documents: z.ZodNullable<z.ZodArray<z.ZodObject<{
                chunks: z.ZodArray<z.ZodObject<{
                    offset: z.ZodNumber;
                    score: z.ZodNullable<z.ZodNumber>;
                    text: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    text: string;
                    offset: number;
                    score: number | null;
                }, {
                    text: string;
                    offset: number;
                    score: number | null;
                }>, "many">;
                documentId: z.ZodString;
                dataSourceView: z.ZodNullable<z.ZodObject<{
                    category: z.ZodType<"folder" | "managed" | "website" | "apps" | "actions", z.ZodTypeDef, "folder" | "managed" | "website" | "apps" | "actions">;
                    createdAt: z.ZodNumber;
                    dataSource: z.ZodObject<{
                        id: z.ZodNumber;
                        sId: z.ZodString;
                        createdAt: z.ZodNumber;
                        name: z.ZodString;
                        description: z.ZodNullable<z.ZodString>;
                        assistantDefaultSelected: z.ZodBoolean;
                        dustAPIProjectId: z.ZodString;
                        dustAPIDataSourceId: z.ZodString;
                        connectorId: z.ZodNullable<z.ZodString>;
                        connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
                        editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                            editedAt: z.ZodNullable<z.ZodNumber>;
                            fullName: z.ZodNullable<z.ZodString>;
                            imageUrl: z.ZodNullable<z.ZodString>;
                            email: z.ZodNullable<z.ZodString>;
                            userId: z.ZodNullable<z.ZodString>;
                        }, "strip", z.ZodTypeAny, {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        }, {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        }>>>;
                    }, "strip", z.ZodTypeAny, {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    }, {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    }>;
                    editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        editedAt: z.ZodNullable<z.ZodNumber>;
                        fullName: z.ZodNullable<z.ZodString>;
                        imageUrl: z.ZodNullable<z.ZodString>;
                        email: z.ZodNullable<z.ZodString>;
                        userId: z.ZodNullable<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    }, {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    }>>>;
                    id: z.ZodNumber;
                    kind: z.ZodType<"custom" | "default", z.ZodTypeDef, "custom" | "default">;
                    parentsIn: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
                    sId: z.ZodString;
                    updatedAt: z.ZodNumber;
                    spaceId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                }, {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                }>>;
                id: z.ZodNumber;
                reference: z.ZodString;
                score: z.ZodNullable<z.ZodNumber>;
                sourceUrl: z.ZodNullable<z.ZodString>;
                tags: z.ZodArray<z.ZodString, "many">;
                timestamp: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }, {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }>, "many">>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"retrieval_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        }, {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        }>, z.ZodEffects<z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            appWorkspaceId: z.ZodString;
            appId: z.ZodString;
            appName: z.ZodString;
            params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            runningBlock: z.ZodNullable<z.ZodObject<{
                type: z.ZodString;
                name: z.ZodString;
                status: z.ZodEnum<["running", "succeeded", "errored"]>;
            }, "strip", z.ZodTypeAny, {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            }, {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            }>>;
            output: z.ZodNullable<z.ZodUnknown>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"dust_app_run_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        }, {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        }>, {
            output: unknown;
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
        }, {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            output: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
            resultsFileId: z.ZodNullable<z.ZodString>;
            resultsFileSnippet: z.ZodNullable<z.ZodString>;
            sectionFileId: z.ZodNullable<z.ZodString>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            agentMessageId: z.ZodNumber;
            step: z.ZodNumber;
            type: z.ZodLiteral<"tables_query_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        }, {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            params: z.ZodObject<{
                relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                    duration: z.ZodNumber;
                    unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
                }, "strip", z.ZodTypeAny, {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                }, {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                }>>;
            }, "strip", z.ZodTypeAny, {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            }, {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            }>;
            schema: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodEnum<["string", "number", "boolean"]>;
                description: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }, {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }>, "many">;
            outputs: z.ZodNullable<z.ZodObject<{
                data: z.ZodArray<z.ZodUnknown, "many">;
                min_timestamp: z.ZodNumber;
                total_documents: z.ZodNumber;
                total_chunks: z.ZodNumber;
                total_tokens: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            }, {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            }>>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"process_action">;
        }>, "strip", z.ZodTypeAny, {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        }, {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            query: z.ZodString;
            output: z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                results: z.ZodArray<z.ZodObject<{
                    title: z.ZodString;
                    snippet: z.ZodString;
                    link: z.ZodString;
                    reference: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }, {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            }, {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            }>, z.ZodObject<{
                results: z.ZodArray<z.ZodObject<{
                    title: z.ZodString;
                    snippet: z.ZodString;
                    link: z.ZodString;
                    reference: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }, {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }>, "many">;
                error: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            }, {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            }>]>>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"websearch_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        }, {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            urls: z.ZodArray<z.ZodString, "many">;
            output: z.ZodNullable<z.ZodObject<{
                results: z.ZodArray<z.ZodObject<{
                    requestedUrl: z.ZodString;
                    browsedUrl: z.ZodString;
                    content: z.ZodString;
                    responseCode: z.ZodString;
                    errorMessage: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }, {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            }, {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            }>>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"browse_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        }, {
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            files: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                fileId: z.ZodString;
                contentFragmentId: z.ZodUndefined;
                nodeDataSourceViewId: z.ZodUndefined;
                title: z.ZodString;
                contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
            }, "strip", z.ZodTypeAny, {
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            }, {
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            }>, z.ZodObject<{
                fileId: z.ZodUndefined;
                contentFragmentId: z.ZodString;
                nodeDataSourceViewId: z.ZodString;
                title: z.ZodString;
                contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
            }, "strip", z.ZodTypeAny, {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            }, {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            }>]>, "many">;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            agentMessageId: z.ZodNumber;
            step: z.ZodNumber;
            type: z.ZodLiteral<"conversation_list_files_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        }, {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            params: z.ZodObject<{
                fileId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                fileId: string;
            }, {
                fileId: string;
            }>;
            tokensCount: z.ZodNullable<z.ZodNumber>;
            fileTitle: z.ZodNullable<z.ZodString>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"conversation_include_file_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        }, {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            output: z.ZodNullable<z.ZodString>;
            thinking: z.ZodNullable<z.ZodString>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"reasoning_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        }, {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            output: z.ZodNullable<z.ZodObject<{
                tags: z.ZodArray<z.ZodObject<{
                    tag: z.ZodString;
                    match_count: z.ZodNumber;
                    data_sources: z.ZodArray<z.ZodString, "many">;
                }, "strip", z.ZodTypeAny, {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }, {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            }, {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            }>>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"search_labels_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        }, {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            functionCallName: z.ZodNullable<z.ZodString>;
            params: z.ZodUnknown;
            type: z.ZodLiteral<"tool_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        }, {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        }>]>, "many">;
        content: z.ZodNullable<z.ZodString>;
        chainOfThought: z.ZodNullable<z.ZodString>;
        rawContents: z.ZodArray<z.ZodObject<{
            step: z.ZodNumber;
            content: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            content: string;
            step: number;
        }, {
            content: string;
            step: number;
        }>, "many">;
        error: z.ZodNullable<z.ZodObject<{
            code: z.ZodString;
            message: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
            code: string;
        }, {
            message: string;
            code: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "agent_message";
        status: "created" | "succeeded" | "failed" | "cancelled";
        id: number;
        sId: string;
        created: number;
        actions: ({
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        } | {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        } | {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        } | {
            output: unknown;
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
        } | {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        } | {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        } | {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        } | {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        } | {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        })[];
        error: {
            message: string;
            code: string;
        } | null;
        content: string | null;
        agentMessageId: number;
        version: number;
        visibility: "visible" | "deleted";
        parentMessageId: string | null;
        configuration: {
            status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
            id: number;
            sId: string;
            name: string;
            description: string;
            versionCreatedAt: string | null;
            version: number;
            versionAuthorId: number | null;
            instructions: string | null;
            model: {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            };
            scope: "global" | "workspace" | "published" | "private";
            userFavorite: boolean;
            pictureUrl: string;
            maxStepsPerRun: number;
            visualizationEnabled: boolean;
            templateId: string | null;
            requestedGroupIds: string[][];
            lastAuthors?: readonly string[] | undefined;
            usage?: {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            } | undefined;
            groupIds?: string[] | undefined;
        };
        chainOfThought: string | null;
        rawContents: {
            content: string;
            step: number;
        }[];
    }, {
        type: "agent_message";
        status: "created" | "succeeded" | "failed" | "cancelled";
        id: number;
        sId: string;
        created: number;
        actions: ({
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        } | {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        } | {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        } | {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        } | {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        } | {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        } | {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        } | {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        } | {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        })[];
        error: {
            message: string;
            code: string;
        } | null;
        content: string | null;
        agentMessageId: number;
        version: number;
        visibility: "visible" | "deleted";
        parentMessageId: string | null;
        configuration: {
            status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
            id: number;
            sId: string;
            name: string;
            description: string;
            versionCreatedAt: string | null;
            version: number;
            versionAuthorId: number | null;
            instructions: string | null;
            model: {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            };
            scope: "global" | "workspace" | "published" | "private";
            userFavorite: boolean;
            pictureUrl: string;
            maxStepsPerRun: number;
            visualizationEnabled: boolean;
            templateId: string | null;
            requestedGroupIds: string[][];
            lastAuthors?: readonly string[] | undefined;
            usage?: {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            } | undefined;
            groupIds?: string[] | undefined;
        };
        chainOfThought: string | null;
        rawContents: {
            content: string;
            step: number;
        }[];
    }>, z.ZodObject<{
        rank: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        rank: number;
    }, {
        rank: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "agent_message_new";
    message: {
        type: "agent_message";
        status: "created" | "succeeded" | "failed" | "cancelled";
        id: number;
        sId: string;
        created: number;
        actions: ({
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        } | {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        } | {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        } | {
            output: unknown;
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
        } | {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        } | {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        } | {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        } | {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        } | {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        })[];
        error: {
            message: string;
            code: string;
        } | null;
        content: string | null;
        agentMessageId: number;
        version: number;
        visibility: "visible" | "deleted";
        parentMessageId: string | null;
        configuration: {
            status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
            id: number;
            sId: string;
            name: string;
            description: string;
            versionCreatedAt: string | null;
            version: number;
            versionAuthorId: number | null;
            instructions: string | null;
            model: {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            };
            scope: "global" | "workspace" | "published" | "private";
            userFavorite: boolean;
            pictureUrl: string;
            maxStepsPerRun: number;
            visualizationEnabled: boolean;
            templateId: string | null;
            requestedGroupIds: string[][];
            lastAuthors?: readonly string[] | undefined;
            usage?: {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            } | undefined;
            groupIds?: string[] | undefined;
        };
        chainOfThought: string | null;
        rawContents: {
            content: string;
            step: number;
        }[];
    } & {
        rank: number;
    };
    created: number;
    configurationId: string;
    messageId: string;
}, {
    type: "agent_message_new";
    message: {
        type: "agent_message";
        status: "created" | "succeeded" | "failed" | "cancelled";
        id: number;
        sId: string;
        created: number;
        actions: ({
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        } | {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        } | {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        } | {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        } | {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        } | {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        } | {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        } | {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        } | {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        })[];
        error: {
            message: string;
            code: string;
        } | null;
        content: string | null;
        agentMessageId: number;
        version: number;
        visibility: "visible" | "deleted";
        parentMessageId: string | null;
        configuration: {
            status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
            id: number;
            sId: string;
            name: string;
            description: string;
            versionCreatedAt: string | null;
            version: number;
            versionAuthorId: number | null;
            instructions: string | null;
            model: {
                providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                temperature: number;
            };
            scope: "global" | "workspace" | "published" | "private";
            userFavorite: boolean;
            pictureUrl: string;
            maxStepsPerRun: number;
            visualizationEnabled: boolean;
            templateId: string | null;
            requestedGroupIds: string[][];
            lastAuthors?: readonly string[] | undefined;
            usage?: {
                messageCount: number;
                conversationCount: number;
                userCount: number;
                timePeriodSec: number;
            } | undefined;
            groupIds?: string[] | undefined;
        };
        chainOfThought: string | null;
        rawContents: {
            content: string;
            step: number;
        }[];
    } & {
        rank: number;
    };
    created: number;
    configurationId: string;
    messageId: string;
}>;
export type AgentMessageNewEvent = z.infer<typeof AgentMessageNewEventSchema>;
declare const ConversationTitleEventSchema: z.ZodObject<{
    type: z.ZodLiteral<"conversation_title">;
    created: z.ZodNumber;
    title: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "conversation_title";
    created: number;
    title: string;
}, {
    type: "conversation_title";
    created: number;
    title: string;
}>;
export type ConversationTitleEvent = z.infer<typeof ConversationTitleEventSchema>;
declare const ConversationEventTypeSchema: z.ZodObject<{
    eventId: z.ZodString;
    data: z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"user_message_new">;
        created: z.ZodNumber;
        messageId: z.ZodString;
        message: z.ZodIntersection<z.ZodObject<{
            id: z.ZodNumber;
            created: z.ZodNumber;
            type: z.ZodLiteral<"user_message">;
            sId: z.ZodString;
            visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
            version: z.ZodNumber;
            user: z.ZodNullable<z.ZodObject<{
                sId: z.ZodString;
                id: z.ZodNumber;
                createdAt: z.ZodNumber;
                provider: z.ZodNullable<z.ZodType<"github" | "google" | "auth0" | "okta" | "samlp" | "waad", z.ZodTypeDef, "github" | "google" | "auth0" | "okta" | "samlp" | "waad">>;
                username: z.ZodString;
                email: z.ZodString;
                firstName: z.ZodString;
                lastName: z.ZodNullable<z.ZodString>;
                fullName: z.ZodString;
                image: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            }, {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            }>>;
            mentions: z.ZodArray<z.ZodObject<{
                configurationId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                configurationId: string;
            }, {
                configurationId: string;
            }>, "many">;
            content: z.ZodString;
            context: z.ZodObject<{
                username: z.ZodString;
                timezone: z.ZodEffects<z.ZodString, string, string>;
                fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                origin: z.ZodUnion<[z.ZodUnion<[z.ZodType<"slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email", z.ZodTypeDef, "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email">, z.ZodNull]>, z.ZodUndefined]>;
                localMCPServerIds: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
            }, "strip", z.ZodTypeAny, {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            }, {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        }, {
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        }>, z.ZodObject<{
            rank: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            rank: number;
        }, {
            rank: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "user_message_new";
        message: {
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        } & {
            rank: number;
        };
        created: number;
        messageId: string;
    }, {
        type: "user_message_new";
        message: {
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        } & {
            rank: number;
        };
        created: number;
        messageId: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"agent_message_new">;
        created: z.ZodNumber;
        configurationId: z.ZodString;
        messageId: z.ZodString;
        message: z.ZodIntersection<z.ZodObject<{
            id: z.ZodNumber;
            agentMessageId: z.ZodNumber;
            created: z.ZodNumber;
            type: z.ZodLiteral<"agent_message">;
            sId: z.ZodString;
            visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
            version: z.ZodNumber;
            parentMessageId: z.ZodNullable<z.ZodString>;
            configuration: z.ZodObject<{
                id: z.ZodNumber;
                versionCreatedAt: z.ZodNullable<z.ZodString>;
                sId: z.ZodString;
                version: z.ZodNumber;
                versionAuthorId: z.ZodNullable<z.ZodNumber>;
                instructions: z.ZodNullable<z.ZodString>;
                model: z.ZodObject<{
                    providerId: z.ZodType<"openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks", z.ZodTypeDef, "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks">;
                    modelId: z.ZodType<"gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1", z.ZodTypeDef, "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1">;
                    temperature: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                }, {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                }>;
                status: z.ZodUnion<[z.ZodType<"active" | "archived" | "draft", z.ZodTypeDef, "active" | "archived" | "draft">, z.ZodType<"active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace", z.ZodTypeDef, "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace">]>;
                scope: z.ZodType<"global" | "workspace" | "published" | "private", z.ZodTypeDef, "global" | "workspace" | "published" | "private">;
                userFavorite: z.ZodBoolean;
                name: z.ZodString;
                description: z.ZodString;
                pictureUrl: z.ZodString;
                lastAuthors: z.ZodOptional<z.ZodReadonly<z.ZodArray<z.ZodString, "many">>>;
                usage: z.ZodOptional<z.ZodObject<{
                    messageCount: z.ZodNumber;
                    conversationCount: z.ZodNumber;
                    userCount: z.ZodNumber;
                    timePeriodSec: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                }, {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                }>>;
                maxStepsPerRun: z.ZodNumber;
                visualizationEnabled: z.ZodBoolean;
                templateId: z.ZodNullable<z.ZodString>;
                groupIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                requestedGroupIds: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
            }, "strip", z.ZodTypeAny, {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            }, {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            }>;
            status: z.ZodType<"created" | "succeeded" | "failed" | "cancelled", z.ZodTypeDef, "created" | "succeeded" | "failed" | "cancelled">;
            actions: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                params: z.ZodObject<{
                    relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                        duration: z.ZodNumber;
                        unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
                    }, "strip", z.ZodTypeAny, {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    }, {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    }>>;
                    query: z.ZodNullable<z.ZodString>;
                    topK: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                }, {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                }>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                documents: z.ZodNullable<z.ZodArray<z.ZodObject<{
                    chunks: z.ZodArray<z.ZodObject<{
                        offset: z.ZodNumber;
                        score: z.ZodNullable<z.ZodNumber>;
                        text: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        text: string;
                        offset: number;
                        score: number | null;
                    }, {
                        text: string;
                        offset: number;
                        score: number | null;
                    }>, "many">;
                    documentId: z.ZodString;
                    dataSourceView: z.ZodNullable<z.ZodObject<{
                        category: z.ZodType<"folder" | "managed" | "website" | "apps" | "actions", z.ZodTypeDef, "folder" | "managed" | "website" | "apps" | "actions">;
                        createdAt: z.ZodNumber;
                        dataSource: z.ZodObject<{
                            id: z.ZodNumber;
                            sId: z.ZodString;
                            createdAt: z.ZodNumber;
                            name: z.ZodString;
                            description: z.ZodNullable<z.ZodString>;
                            assistantDefaultSelected: z.ZodBoolean;
                            dustAPIProjectId: z.ZodString;
                            dustAPIDataSourceId: z.ZodString;
                            connectorId: z.ZodNullable<z.ZodString>;
                            connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
                            editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                                editedAt: z.ZodNullable<z.ZodNumber>;
                                fullName: z.ZodNullable<z.ZodString>;
                                imageUrl: z.ZodNullable<z.ZodString>;
                                email: z.ZodNullable<z.ZodString>;
                                userId: z.ZodNullable<z.ZodString>;
                            }, "strip", z.ZodTypeAny, {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            }, {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            }>>>;
                        }, "strip", z.ZodTypeAny, {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        }, {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        }>;
                        editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                            editedAt: z.ZodNullable<z.ZodNumber>;
                            fullName: z.ZodNullable<z.ZodString>;
                            imageUrl: z.ZodNullable<z.ZodString>;
                            email: z.ZodNullable<z.ZodString>;
                            userId: z.ZodNullable<z.ZodString>;
                        }, "strip", z.ZodTypeAny, {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        }, {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        }>>>;
                        id: z.ZodNumber;
                        kind: z.ZodType<"custom" | "default", z.ZodTypeDef, "custom" | "default">;
                        parentsIn: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
                        sId: z.ZodString;
                        updatedAt: z.ZodNumber;
                        spaceId: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    }, {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    }>>;
                    id: z.ZodNumber;
                    reference: z.ZodString;
                    score: z.ZodNullable<z.ZodNumber>;
                    sourceUrl: z.ZodNullable<z.ZodString>;
                    tags: z.ZodArray<z.ZodString, "many">;
                    timestamp: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }, {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }>, "many">>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"retrieval_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            }, {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            }>, z.ZodEffects<z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                appWorkspaceId: z.ZodString;
                appId: z.ZodString;
                appName: z.ZodString;
                params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
                runningBlock: z.ZodNullable<z.ZodObject<{
                    type: z.ZodString;
                    name: z.ZodString;
                    status: z.ZodEnum<["running", "succeeded", "errored"]>;
                }, "strip", z.ZodTypeAny, {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                }, {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                }>>;
                output: z.ZodNullable<z.ZodUnknown>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"dust_app_run_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            }, {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            }>, {
                output: unknown;
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
            }, {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
                output: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
                resultsFileId: z.ZodNullable<z.ZodString>;
                resultsFileSnippet: z.ZodNullable<z.ZodString>;
                sectionFileId: z.ZodNullable<z.ZodString>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                agentMessageId: z.ZodNumber;
                step: z.ZodNumber;
                type: z.ZodLiteral<"tables_query_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            }, {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                params: z.ZodObject<{
                    relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                        duration: z.ZodNumber;
                        unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
                    }, "strip", z.ZodTypeAny, {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    }, {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                }, {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                }>;
                schema: z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    type: z.ZodEnum<["string", "number", "boolean"]>;
                    description: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }, {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }>, "many">;
                outputs: z.ZodNullable<z.ZodObject<{
                    data: z.ZodArray<z.ZodUnknown, "many">;
                    min_timestamp: z.ZodNumber;
                    total_documents: z.ZodNumber;
                    total_chunks: z.ZodNumber;
                    total_tokens: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                }, {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                }>>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"process_action">;
            }>, "strip", z.ZodTypeAny, {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            }, {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                query: z.ZodString;
                output: z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    results: z.ZodArray<z.ZodObject<{
                        title: z.ZodString;
                        snippet: z.ZodString;
                        link: z.ZodString;
                        reference: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }, {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }>, "many">;
                }, "strip", z.ZodTypeAny, {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                }, {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                }>, z.ZodObject<{
                    results: z.ZodArray<z.ZodObject<{
                        title: z.ZodString;
                        snippet: z.ZodString;
                        link: z.ZodString;
                        reference: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }, {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }>, "many">;
                    error: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                }, {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                }>]>>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"websearch_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            }, {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                urls: z.ZodArray<z.ZodString, "many">;
                output: z.ZodNullable<z.ZodObject<{
                    results: z.ZodArray<z.ZodObject<{
                        requestedUrl: z.ZodString;
                        browsedUrl: z.ZodString;
                        content: z.ZodString;
                        responseCode: z.ZodString;
                        errorMessage: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }, {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }>, "many">;
                }, "strip", z.ZodTypeAny, {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                }, {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                }>>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"browse_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            }, {
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                files: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    fileId: z.ZodString;
                    contentFragmentId: z.ZodUndefined;
                    nodeDataSourceViewId: z.ZodUndefined;
                    title: z.ZodString;
                    contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
                }, "strip", z.ZodTypeAny, {
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                }, {
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                }>, z.ZodObject<{
                    fileId: z.ZodUndefined;
                    contentFragmentId: z.ZodString;
                    nodeDataSourceViewId: z.ZodString;
                    title: z.ZodString;
                    contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
                }, "strip", z.ZodTypeAny, {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                }, {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                }>]>, "many">;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                agentMessageId: z.ZodNumber;
                step: z.ZodNumber;
                type: z.ZodLiteral<"conversation_list_files_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            }, {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                params: z.ZodObject<{
                    fileId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    fileId: string;
                }, {
                    fileId: string;
                }>;
                tokensCount: z.ZodNullable<z.ZodNumber>;
                fileTitle: z.ZodNullable<z.ZodString>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"conversation_include_file_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            }, {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                output: z.ZodNullable<z.ZodString>;
                thinking: z.ZodNullable<z.ZodString>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"reasoning_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            }, {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                output: z.ZodNullable<z.ZodObject<{
                    tags: z.ZodArray<z.ZodObject<{
                        tag: z.ZodString;
                        match_count: z.ZodNumber;
                        data_sources: z.ZodArray<z.ZodString, "many">;
                    }, "strip", z.ZodTypeAny, {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }, {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }>, "many">;
                }, "strip", z.ZodTypeAny, {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                }, {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                }>>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"search_labels_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            }, {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                functionCallName: z.ZodNullable<z.ZodString>;
                params: z.ZodUnknown;
                type: z.ZodLiteral<"tool_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            }, {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            }>]>, "many">;
            content: z.ZodNullable<z.ZodString>;
            chainOfThought: z.ZodNullable<z.ZodString>;
            rawContents: z.ZodArray<z.ZodObject<{
                step: z.ZodNumber;
                content: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                content: string;
                step: number;
            }, {
                content: string;
                step: number;
            }>, "many">;
            error: z.ZodNullable<z.ZodObject<{
                code: z.ZodString;
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
                code: string;
            }, {
                message: string;
                code: string;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                output: unknown;
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        }, {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        }>, z.ZodObject<{
            rank: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            rank: number;
        }, {
            rank: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "agent_message_new";
        message: {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                output: unknown;
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        } & {
            rank: number;
        };
        created: number;
        configurationId: string;
        messageId: string;
    }, {
        type: "agent_message_new";
        message: {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        } & {
            rank: number;
        };
        created: number;
        configurationId: string;
        messageId: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"agent_generation_cancelled">;
        created: z.ZodNumber;
        configurationId: z.ZodString;
        messageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "agent_generation_cancelled";
        created: number;
        configurationId: string;
        messageId: string;
    }, {
        type: "agent_generation_cancelled";
        created: number;
        configurationId: string;
        messageId: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"conversation_title">;
        created: z.ZodNumber;
        title: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "conversation_title";
        created: number;
        title: string;
    }, {
        type: "conversation_title";
        created: number;
        title: string;
    }>]>;
}, "strip", z.ZodTypeAny, {
    data: {
        type: "agent_generation_cancelled";
        created: number;
        configurationId: string;
        messageId: string;
    } | {
        type: "user_message_new";
        message: {
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        } & {
            rank: number;
        };
        created: number;
        messageId: string;
    } | {
        type: "agent_message_new";
        message: {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                output: unknown;
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        } & {
            rank: number;
        };
        created: number;
        configurationId: string;
        messageId: string;
    } | {
        type: "conversation_title";
        created: number;
        title: string;
    };
    eventId: string;
}, {
    data: {
        type: "agent_generation_cancelled";
        created: number;
        configurationId: string;
        messageId: string;
    } | {
        type: "user_message_new";
        message: {
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        } & {
            rank: number;
        };
        created: number;
        messageId: string;
    } | {
        type: "agent_message_new";
        message: {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        } & {
            rank: number;
        };
        created: number;
        configurationId: string;
        messageId: string;
    } | {
        type: "conversation_title";
        created: number;
        title: string;
    };
    eventId: string;
}>;
export type ConversationEventType = z.infer<typeof ConversationEventTypeSchema>;
declare const AgentMessageEventTypeSchema: z.ZodObject<{
    eventId: z.ZodString;
    data: z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"agent_error">;
        created: z.ZodNumber;
        configurationId: z.ZodString;
        messageId: z.ZodString;
        error: z.ZodObject<{
            code: z.ZodString;
            message: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
            code: string;
        }, {
            message: string;
            code: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "agent_error";
        created: number;
        error: {
            message: string;
            code: string;
        };
        configurationId: string;
        messageId: string;
    }, {
        type: "agent_error";
        created: number;
        error: {
            message: string;
            code: string;
        };
        configurationId: string;
        messageId: string;
    }>, z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"browse_params">;
        created: z.ZodNumber;
        configurationId: z.ZodString;
        messageId: z.ZodString;
        action: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            urls: z.ZodArray<z.ZodString, "many">;
            output: z.ZodNullable<z.ZodObject<{
                results: z.ZodArray<z.ZodObject<{
                    requestedUrl: z.ZodString;
                    browsedUrl: z.ZodString;
                    content: z.ZodString;
                    responseCode: z.ZodString;
                    errorMessage: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }, {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            }, {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            }>>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"browse_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        }, {
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "browse_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        };
    }, {
        type: "browse_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"conversation_include_file_params">;
        created: z.ZodNumber;
        configurationId: z.ZodString;
        messageId: z.ZodString;
        action: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            params: z.ZodObject<{
                fileId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                fileId: string;
            }, {
                fileId: string;
            }>;
            tokensCount: z.ZodNullable<z.ZodNumber>;
            fileTitle: z.ZodNullable<z.ZodString>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"conversation_include_file_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        }, {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "conversation_include_file_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        };
    }, {
        type: "conversation_include_file_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"dust_app_run_block">;
        created: z.ZodNumber;
        configurationId: z.ZodString;
        messageId: z.ZodString;
        action: z.ZodEffects<z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            appWorkspaceId: z.ZodString;
            appId: z.ZodString;
            appName: z.ZodString;
            params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            runningBlock: z.ZodNullable<z.ZodObject<{
                type: z.ZodString;
                name: z.ZodString;
                status: z.ZodEnum<["running", "succeeded", "errored"]>;
            }, "strip", z.ZodTypeAny, {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            }, {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            }>>;
            output: z.ZodNullable<z.ZodUnknown>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"dust_app_run_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        }, {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        }>, {
            output: unknown;
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
        }, {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "dust_app_run_block";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            output: unknown;
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
        };
    }, {
        type: "dust_app_run_block";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"dust_app_run_params">;
        created: z.ZodNumber;
        configurationId: z.ZodString;
        messageId: z.ZodString;
        action: z.ZodEffects<z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            appWorkspaceId: z.ZodString;
            appId: z.ZodString;
            appName: z.ZodString;
            params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            runningBlock: z.ZodNullable<z.ZodObject<{
                type: z.ZodString;
                name: z.ZodString;
                status: z.ZodEnum<["running", "succeeded", "errored"]>;
            }, "strip", z.ZodTypeAny, {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            }, {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            }>>;
            output: z.ZodNullable<z.ZodUnknown>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"dust_app_run_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        }, {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        }>, {
            output: unknown;
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
        }, {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "dust_app_run_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            output: unknown;
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
        };
    }, {
        type: "dust_app_run_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"process_params">;
        created: z.ZodNumber;
        configurationId: z.ZodString;
        messageId: z.ZodString;
        dataSources: z.ZodArray<z.ZodObject<{
            workspaceId: z.ZodString;
            dataSourceViewId: z.ZodString;
            filter: z.ZodObject<{
                parents: z.ZodNullable<z.ZodObject<{
                    in: z.ZodArray<z.ZodString, "many">;
                    not: z.ZodArray<z.ZodString, "many">;
                }, "strip", z.ZodTypeAny, {
                    in: string[];
                    not: string[];
                }, {
                    in: string[];
                    not: string[];
                }>>;
            }, "strip", z.ZodTypeAny, {
                parents: {
                    in: string[];
                    not: string[];
                } | null;
            }, {
                parents: {
                    in: string[];
                    not: string[];
                } | null;
            }>;
        }, "strip", z.ZodTypeAny, {
            filter: {
                parents: {
                    in: string[];
                    not: string[];
                } | null;
            };
            workspaceId: string;
            dataSourceViewId: string;
        }, {
            filter: {
                parents: {
                    in: string[];
                    not: string[];
                } | null;
            };
            workspaceId: string;
            dataSourceViewId: string;
        }>, "many">;
        action: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            params: z.ZodObject<{
                relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                    duration: z.ZodNumber;
                    unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
                }, "strip", z.ZodTypeAny, {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                }, {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                }>>;
            }, "strip", z.ZodTypeAny, {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            }, {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            }>;
            schema: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodEnum<["string", "number", "boolean"]>;
                description: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }, {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }>, "many">;
            outputs: z.ZodNullable<z.ZodObject<{
                data: z.ZodArray<z.ZodUnknown, "many">;
                min_timestamp: z.ZodNumber;
                total_documents: z.ZodNumber;
                total_chunks: z.ZodNumber;
                total_tokens: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            }, {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            }>>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"process_action">;
        }>, "strip", z.ZodTypeAny, {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        }, {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "process_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        };
        dataSources: {
            filter: {
                parents: {
                    in: string[];
                    not: string[];
                } | null;
            };
            workspaceId: string;
            dataSourceViewId: string;
        }[];
    }, {
        type: "process_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        };
        dataSources: {
            filter: {
                parents: {
                    in: string[];
                    not: string[];
                } | null;
            };
            workspaceId: string;
            dataSourceViewId: string;
        }[];
    }>, z.ZodObject<{
        type: z.ZodLiteral<"reasoning_started">;
        created: z.ZodNumber;
        configurationId: z.ZodString;
        messageId: z.ZodString;
        action: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            output: z.ZodNullable<z.ZodString>;
            thinking: z.ZodNullable<z.ZodString>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"reasoning_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        }, {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "reasoning_started";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        };
    }, {
        type: "reasoning_started";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"reasoning_thinking">;
        created: z.ZodNumber;
        configurationId: z.ZodString;
        messageId: z.ZodString;
        action: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            output: z.ZodNullable<z.ZodString>;
            thinking: z.ZodNullable<z.ZodString>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"reasoning_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        }, {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "reasoning_thinking";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        };
    }, {
        type: "reasoning_thinking";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"reasoning_tokens">;
        created: z.ZodNumber;
        configurationId: z.ZodString;
        messageId: z.ZodString;
        action: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            output: z.ZodNullable<z.ZodString>;
            thinking: z.ZodNullable<z.ZodString>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"reasoning_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        }, {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        }>;
        content: z.ZodString;
        classification: z.ZodType<"tokens" | "chain_of_thought", z.ZodTypeDef, "tokens" | "chain_of_thought">;
    }, "strip", z.ZodTypeAny, {
        type: "reasoning_tokens";
        created: number;
        configurationId: string;
        messageId: string;
        classification: "tokens" | "chain_of_thought";
        content: string;
        action: {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        };
    }, {
        type: "reasoning_tokens";
        created: number;
        configurationId: string;
        messageId: string;
        classification: "tokens" | "chain_of_thought";
        content: string;
        action: {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"retrieval_params">;
        created: z.ZodNumber;
        configurationId: z.ZodString;
        messageId: z.ZodString;
        dataSources: z.ZodArray<z.ZodObject<{
            workspaceId: z.ZodString;
            dataSourceViewId: z.ZodString;
            filter: z.ZodObject<{
                parents: z.ZodNullable<z.ZodObject<{
                    in: z.ZodArray<z.ZodString, "many">;
                    not: z.ZodArray<z.ZodString, "many">;
                }, "strip", z.ZodTypeAny, {
                    in: string[];
                    not: string[];
                }, {
                    in: string[];
                    not: string[];
                }>>;
            }, "strip", z.ZodTypeAny, {
                parents: {
                    in: string[];
                    not: string[];
                } | null;
            }, {
                parents: {
                    in: string[];
                    not: string[];
                } | null;
            }>;
        }, "strip", z.ZodTypeAny, {
            filter: {
                parents: {
                    in: string[];
                    not: string[];
                } | null;
            };
            workspaceId: string;
            dataSourceViewId: string;
        }, {
            filter: {
                parents: {
                    in: string[];
                    not: string[];
                } | null;
            };
            workspaceId: string;
            dataSourceViewId: string;
        }>, "many">;
        action: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            params: z.ZodObject<{
                relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                    duration: z.ZodNumber;
                    unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
                }, "strip", z.ZodTypeAny, {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                }, {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                }>>;
                query: z.ZodNullable<z.ZodString>;
                topK: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            }, {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            }>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            documents: z.ZodNullable<z.ZodArray<z.ZodObject<{
                chunks: z.ZodArray<z.ZodObject<{
                    offset: z.ZodNumber;
                    score: z.ZodNullable<z.ZodNumber>;
                    text: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    text: string;
                    offset: number;
                    score: number | null;
                }, {
                    text: string;
                    offset: number;
                    score: number | null;
                }>, "many">;
                documentId: z.ZodString;
                dataSourceView: z.ZodNullable<z.ZodObject<{
                    category: z.ZodType<"folder" | "managed" | "website" | "apps" | "actions", z.ZodTypeDef, "folder" | "managed" | "website" | "apps" | "actions">;
                    createdAt: z.ZodNumber;
                    dataSource: z.ZodObject<{
                        id: z.ZodNumber;
                        sId: z.ZodString;
                        createdAt: z.ZodNumber;
                        name: z.ZodString;
                        description: z.ZodNullable<z.ZodString>;
                        assistantDefaultSelected: z.ZodBoolean;
                        dustAPIProjectId: z.ZodString;
                        dustAPIDataSourceId: z.ZodString;
                        connectorId: z.ZodNullable<z.ZodString>;
                        connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
                        editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                            editedAt: z.ZodNullable<z.ZodNumber>;
                            fullName: z.ZodNullable<z.ZodString>;
                            imageUrl: z.ZodNullable<z.ZodString>;
                            email: z.ZodNullable<z.ZodString>;
                            userId: z.ZodNullable<z.ZodString>;
                        }, "strip", z.ZodTypeAny, {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        }, {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        }>>>;
                    }, "strip", z.ZodTypeAny, {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    }, {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    }>;
                    editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        editedAt: z.ZodNullable<z.ZodNumber>;
                        fullName: z.ZodNullable<z.ZodString>;
                        imageUrl: z.ZodNullable<z.ZodString>;
                        email: z.ZodNullable<z.ZodString>;
                        userId: z.ZodNullable<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    }, {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    }>>>;
                    id: z.ZodNumber;
                    kind: z.ZodType<"custom" | "default", z.ZodTypeDef, "custom" | "default">;
                    parentsIn: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
                    sId: z.ZodString;
                    updatedAt: z.ZodNumber;
                    spaceId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                }, {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                }>>;
                id: z.ZodNumber;
                reference: z.ZodString;
                score: z.ZodNullable<z.ZodNumber>;
                sourceUrl: z.ZodNullable<z.ZodString>;
                tags: z.ZodArray<z.ZodString, "many">;
                timestamp: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }, {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }>, "many">>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"retrieval_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        }, {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "retrieval_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        };
        dataSources: {
            filter: {
                parents: {
                    in: string[];
                    not: string[];
                } | null;
            };
            workspaceId: string;
            dataSourceViewId: string;
        }[];
    }, {
        type: "retrieval_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        };
        dataSources: {
            filter: {
                parents: {
                    in: string[];
                    not: string[];
                } | null;
            };
            workspaceId: string;
            dataSourceViewId: string;
        }[];
    }>, z.ZodObject<{
        type: z.ZodLiteral<"search_labels_params">;
        created: z.ZodNumber;
        configurationId: z.ZodString;
        messageId: z.ZodString;
        action: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            output: z.ZodNullable<z.ZodObject<{
                tags: z.ZodArray<z.ZodObject<{
                    tag: z.ZodString;
                    match_count: z.ZodNumber;
                    data_sources: z.ZodArray<z.ZodString, "many">;
                }, "strip", z.ZodTypeAny, {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }, {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            }, {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            }>>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"search_labels_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        }, {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "search_labels_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        };
    }, {
        type: "search_labels_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"tables_query_model_output">;
        created: z.ZodNumber;
        configurationId: z.ZodString;
        messageId: z.ZodString;
        action: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            output: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
            resultsFileId: z.ZodNullable<z.ZodString>;
            resultsFileSnippet: z.ZodNullable<z.ZodString>;
            sectionFileId: z.ZodNullable<z.ZodString>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            agentMessageId: z.ZodNumber;
            step: z.ZodNumber;
            type: z.ZodLiteral<"tables_query_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        }, {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "tables_query_model_output";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        };
    }, {
        type: "tables_query_model_output";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"tables_query_output">;
        created: z.ZodNumber;
        configurationId: z.ZodString;
        messageId: z.ZodString;
        action: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            output: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
            resultsFileId: z.ZodNullable<z.ZodString>;
            resultsFileSnippet: z.ZodNullable<z.ZodString>;
            sectionFileId: z.ZodNullable<z.ZodString>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            agentMessageId: z.ZodNumber;
            step: z.ZodNumber;
            type: z.ZodLiteral<"tables_query_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        }, {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "tables_query_output";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        };
    }, {
        type: "tables_query_output";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"tables_query_started">;
        created: z.ZodNumber;
        configurationId: z.ZodString;
        messageId: z.ZodString;
        action: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            output: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
            resultsFileId: z.ZodNullable<z.ZodString>;
            resultsFileSnippet: z.ZodNullable<z.ZodString>;
            sectionFileId: z.ZodNullable<z.ZodString>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            agentMessageId: z.ZodNumber;
            step: z.ZodNumber;
            type: z.ZodLiteral<"tables_query_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        }, {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "tables_query_started";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        };
    }, {
        type: "tables_query_started";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"websearch_params">;
        created: z.ZodNumber;
        configurationId: z.ZodString;
        messageId: z.ZodString;
        action: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            query: z.ZodString;
            output: z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                results: z.ZodArray<z.ZodObject<{
                    title: z.ZodString;
                    snippet: z.ZodString;
                    link: z.ZodString;
                    reference: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }, {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            }, {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            }>, z.ZodObject<{
                results: z.ZodArray<z.ZodObject<{
                    title: z.ZodString;
                    snippet: z.ZodString;
                    link: z.ZodString;
                    reference: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }, {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }>, "many">;
                error: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            }, {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            }>]>>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"websearch_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        }, {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "websearch_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        };
    }, {
        type: "websearch_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"tool_params">;
        created: z.ZodNumber;
        configurationId: z.ZodString;
        messageId: z.ZodString;
        action: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            functionCallName: z.ZodNullable<z.ZodString>;
            params: z.ZodUnknown;
            type: z.ZodLiteral<"tool_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        }, {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "tool_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        };
    }, {
        type: "tool_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"tool_approve_execution">;
        created: z.ZodNumber;
        configurationId: z.ZodString;
        messageId: z.ZodString;
        action: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            functionCallName: z.ZodNullable<z.ZodString>;
            params: z.ZodUnknown;
            type: z.ZodLiteral<"tool_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        }, {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        }>;
        inputs: z.ZodRecord<z.ZodString, z.ZodAny>;
        stake: z.ZodOptional<z.ZodEnum<["low", "high"]>>;
        metadata: z.ZodObject<{
            mcpServerName: z.ZodString;
            toolName: z.ZodString;
            agentName: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            mcpServerName: string;
            toolName: string;
            agentName: string;
        }, {
            mcpServerName: string;
            toolName: string;
            agentName: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "tool_approve_execution";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        };
        inputs: Record<string, any>;
        metadata: {
            mcpServerName: string;
            toolName: string;
            agentName: string;
        };
        stake?: "low" | "high" | undefined;
    }, {
        type: "tool_approve_execution";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        };
        inputs: Record<string, any>;
        metadata: {
            mcpServerName: string;
            toolName: string;
            agentName: string;
        };
        stake?: "low" | "high" | undefined;
    }>]>, z.ZodObject<{
        type: z.ZodLiteral<"agent_action_success">;
        created: z.ZodNumber;
        configurationId: z.ZodString;
        messageId: z.ZodString;
        action: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            params: z.ZodObject<{
                relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                    duration: z.ZodNumber;
                    unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
                }, "strip", z.ZodTypeAny, {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                }, {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                }>>;
                query: z.ZodNullable<z.ZodString>;
                topK: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            }, {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            }>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            documents: z.ZodNullable<z.ZodArray<z.ZodObject<{
                chunks: z.ZodArray<z.ZodObject<{
                    offset: z.ZodNumber;
                    score: z.ZodNullable<z.ZodNumber>;
                    text: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    text: string;
                    offset: number;
                    score: number | null;
                }, {
                    text: string;
                    offset: number;
                    score: number | null;
                }>, "many">;
                documentId: z.ZodString;
                dataSourceView: z.ZodNullable<z.ZodObject<{
                    category: z.ZodType<"folder" | "managed" | "website" | "apps" | "actions", z.ZodTypeDef, "folder" | "managed" | "website" | "apps" | "actions">;
                    createdAt: z.ZodNumber;
                    dataSource: z.ZodObject<{
                        id: z.ZodNumber;
                        sId: z.ZodString;
                        createdAt: z.ZodNumber;
                        name: z.ZodString;
                        description: z.ZodNullable<z.ZodString>;
                        assistantDefaultSelected: z.ZodBoolean;
                        dustAPIProjectId: z.ZodString;
                        dustAPIDataSourceId: z.ZodString;
                        connectorId: z.ZodNullable<z.ZodString>;
                        connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
                        editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                            editedAt: z.ZodNullable<z.ZodNumber>;
                            fullName: z.ZodNullable<z.ZodString>;
                            imageUrl: z.ZodNullable<z.ZodString>;
                            email: z.ZodNullable<z.ZodString>;
                            userId: z.ZodNullable<z.ZodString>;
                        }, "strip", z.ZodTypeAny, {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        }, {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        }>>>;
                    }, "strip", z.ZodTypeAny, {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    }, {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    }>;
                    editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        editedAt: z.ZodNullable<z.ZodNumber>;
                        fullName: z.ZodNullable<z.ZodString>;
                        imageUrl: z.ZodNullable<z.ZodString>;
                        email: z.ZodNullable<z.ZodString>;
                        userId: z.ZodNullable<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    }, {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    }>>>;
                    id: z.ZodNumber;
                    kind: z.ZodType<"custom" | "default", z.ZodTypeDef, "custom" | "default">;
                    parentsIn: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
                    sId: z.ZodString;
                    updatedAt: z.ZodNumber;
                    spaceId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                }, {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                }>>;
                id: z.ZodNumber;
                reference: z.ZodString;
                score: z.ZodNullable<z.ZodNumber>;
                sourceUrl: z.ZodNullable<z.ZodString>;
                tags: z.ZodArray<z.ZodString, "many">;
                timestamp: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }, {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }>, "many">>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"retrieval_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        }, {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        }>, z.ZodEffects<z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            appWorkspaceId: z.ZodString;
            appId: z.ZodString;
            appName: z.ZodString;
            params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            runningBlock: z.ZodNullable<z.ZodObject<{
                type: z.ZodString;
                name: z.ZodString;
                status: z.ZodEnum<["running", "succeeded", "errored"]>;
            }, "strip", z.ZodTypeAny, {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            }, {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            }>>;
            output: z.ZodNullable<z.ZodUnknown>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"dust_app_run_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        }, {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        }>, {
            output: unknown;
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
        }, {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            output: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
            resultsFileId: z.ZodNullable<z.ZodString>;
            resultsFileSnippet: z.ZodNullable<z.ZodString>;
            sectionFileId: z.ZodNullable<z.ZodString>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            agentMessageId: z.ZodNumber;
            step: z.ZodNumber;
            type: z.ZodLiteral<"tables_query_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        }, {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            params: z.ZodObject<{
                relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                    duration: z.ZodNumber;
                    unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
                }, "strip", z.ZodTypeAny, {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                }, {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                }>>;
            }, "strip", z.ZodTypeAny, {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            }, {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            }>;
            schema: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodEnum<["string", "number", "boolean"]>;
                description: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }, {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }>, "many">;
            outputs: z.ZodNullable<z.ZodObject<{
                data: z.ZodArray<z.ZodUnknown, "many">;
                min_timestamp: z.ZodNumber;
                total_documents: z.ZodNumber;
                total_chunks: z.ZodNumber;
                total_tokens: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            }, {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            }>>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"process_action">;
        }>, "strip", z.ZodTypeAny, {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        }, {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            query: z.ZodString;
            output: z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                results: z.ZodArray<z.ZodObject<{
                    title: z.ZodString;
                    snippet: z.ZodString;
                    link: z.ZodString;
                    reference: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }, {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            }, {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            }>, z.ZodObject<{
                results: z.ZodArray<z.ZodObject<{
                    title: z.ZodString;
                    snippet: z.ZodString;
                    link: z.ZodString;
                    reference: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }, {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }>, "many">;
                error: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            }, {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            }>]>>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"websearch_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        }, {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            urls: z.ZodArray<z.ZodString, "many">;
            output: z.ZodNullable<z.ZodObject<{
                results: z.ZodArray<z.ZodObject<{
                    requestedUrl: z.ZodString;
                    browsedUrl: z.ZodString;
                    content: z.ZodString;
                    responseCode: z.ZodString;
                    errorMessage: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }, {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            }, {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            }>>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"browse_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        }, {
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            files: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                fileId: z.ZodString;
                contentFragmentId: z.ZodUndefined;
                nodeDataSourceViewId: z.ZodUndefined;
                title: z.ZodString;
                contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
            }, "strip", z.ZodTypeAny, {
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            }, {
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            }>, z.ZodObject<{
                fileId: z.ZodUndefined;
                contentFragmentId: z.ZodString;
                nodeDataSourceViewId: z.ZodString;
                title: z.ZodString;
                contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
            }, "strip", z.ZodTypeAny, {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            }, {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            }>]>, "many">;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            agentMessageId: z.ZodNumber;
            step: z.ZodNumber;
            type: z.ZodLiteral<"conversation_list_files_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        }, {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            params: z.ZodObject<{
                fileId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                fileId: string;
            }, {
                fileId: string;
            }>;
            tokensCount: z.ZodNullable<z.ZodNumber>;
            fileTitle: z.ZodNullable<z.ZodString>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"conversation_include_file_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        }, {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            output: z.ZodNullable<z.ZodString>;
            thinking: z.ZodNullable<z.ZodString>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"reasoning_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        }, {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            output: z.ZodNullable<z.ZodObject<{
                tags: z.ZodArray<z.ZodObject<{
                    tag: z.ZodString;
                    match_count: z.ZodNumber;
                    data_sources: z.ZodArray<z.ZodString, "many">;
                }, "strip", z.ZodTypeAny, {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }, {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            }, {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            }>>;
            functionCallId: z.ZodNullable<z.ZodString>;
            functionCallName: z.ZodNullable<z.ZodString>;
            step: z.ZodNumber;
            type: z.ZodLiteral<"search_labels_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        }, {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
        }, {
            agentMessageId: z.ZodNumber;
            functionCallName: z.ZodNullable<z.ZodString>;
            params: z.ZodUnknown;
            type: z.ZodLiteral<"tool_action">;
        }>, "strip", z.ZodTypeAny, {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        }, {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        type: "agent_action_success";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        } | {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        } | {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        } | {
            output: unknown;
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
        } | {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        } | {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        } | {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        } | {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        } | {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        };
    }, {
        type: "agent_action_success";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        } | {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        } | {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        } | {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        } | {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        } | {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        } | {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        } | {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        } | {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"agent_generation_cancelled">;
        created: z.ZodNumber;
        configurationId: z.ZodString;
        messageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "agent_generation_cancelled";
        created: number;
        configurationId: string;
        messageId: string;
    }, {
        type: "agent_generation_cancelled";
        created: number;
        configurationId: string;
        messageId: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"generation_tokens">;
        created: z.ZodNumber;
        configurationId: z.ZodString;
        messageId: z.ZodString;
        text: z.ZodString;
        classification: z.ZodUnion<[z.ZodType<"tokens" | "chain_of_thought", z.ZodTypeDef, "tokens" | "chain_of_thought">, z.ZodEnum<["opening_delimiter", "closing_delimiter"]>]>;
        delimiterClassification: z.ZodOptional<z.ZodNullable<z.ZodType<"tokens" | "chain_of_thought", z.ZodTypeDef, "tokens" | "chain_of_thought">>>;
    }, "strip", z.ZodTypeAny, {
        type: "generation_tokens";
        text: string;
        created: number;
        configurationId: string;
        messageId: string;
        classification: "tokens" | "chain_of_thought" | "opening_delimiter" | "closing_delimiter";
        delimiterClassification?: "tokens" | "chain_of_thought" | null | undefined;
    }, {
        type: "generation_tokens";
        text: string;
        created: number;
        configurationId: string;
        messageId: string;
        classification: "tokens" | "chain_of_thought" | "opening_delimiter" | "closing_delimiter";
        delimiterClassification?: "tokens" | "chain_of_thought" | null | undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    data: {
        type: "generation_tokens";
        text: string;
        created: number;
        configurationId: string;
        messageId: string;
        classification: "tokens" | "chain_of_thought" | "opening_delimiter" | "closing_delimiter";
        delimiterClassification?: "tokens" | "chain_of_thought" | null | undefined;
    } | {
        type: "browse_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        };
    } | {
        type: "conversation_include_file_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        };
    } | {
        type: "dust_app_run_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            output: unknown;
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
        };
    } | {
        type: "dust_app_run_block";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            output: unknown;
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
        };
    } | {
        type: "process_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        };
        dataSources: {
            filter: {
                parents: {
                    in: string[];
                    not: string[];
                } | null;
            };
            workspaceId: string;
            dataSourceViewId: string;
        }[];
    } | {
        type: "retrieval_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        };
        dataSources: {
            filter: {
                parents: {
                    in: string[];
                    not: string[];
                } | null;
            };
            workspaceId: string;
            dataSourceViewId: string;
        }[];
    } | {
        type: "tables_query_started";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        };
    } | {
        type: "tables_query_model_output";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        };
    } | {
        type: "tables_query_output";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        };
    } | {
        type: "websearch_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        };
    } | {
        type: "reasoning_started";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        };
    } | {
        type: "reasoning_thinking";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        };
    } | {
        type: "reasoning_tokens";
        created: number;
        configurationId: string;
        messageId: string;
        classification: "tokens" | "chain_of_thought";
        content: string;
        action: {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        };
    } | {
        type: "search_labels_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        };
    } | {
        type: "tool_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        };
    } | {
        type: "tool_approve_execution";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        };
        inputs: Record<string, any>;
        metadata: {
            mcpServerName: string;
            toolName: string;
            agentName: string;
        };
        stake?: "low" | "high" | undefined;
    } | {
        type: "agent_error";
        created: number;
        error: {
            message: string;
            code: string;
        };
        configurationId: string;
        messageId: string;
    } | {
        type: "agent_action_success";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        } | {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        } | {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        } | {
            output: unknown;
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
        } | {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        } | {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        } | {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        } | {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        } | {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        };
    } | {
        type: "agent_generation_cancelled";
        created: number;
        configurationId: string;
        messageId: string;
    };
    eventId: string;
}, {
    data: {
        type: "generation_tokens";
        text: string;
        created: number;
        configurationId: string;
        messageId: string;
        classification: "tokens" | "chain_of_thought" | "opening_delimiter" | "closing_delimiter";
        delimiterClassification?: "tokens" | "chain_of_thought" | null | undefined;
    } | {
        type: "browse_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        };
    } | {
        type: "conversation_include_file_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        };
    } | {
        type: "dust_app_run_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        };
    } | {
        type: "dust_app_run_block";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        };
    } | {
        type: "process_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        };
        dataSources: {
            filter: {
                parents: {
                    in: string[];
                    not: string[];
                } | null;
            };
            workspaceId: string;
            dataSourceViewId: string;
        }[];
    } | {
        type: "retrieval_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        };
        dataSources: {
            filter: {
                parents: {
                    in: string[];
                    not: string[];
                } | null;
            };
            workspaceId: string;
            dataSourceViewId: string;
        }[];
    } | {
        type: "tables_query_started";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        };
    } | {
        type: "tables_query_model_output";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        };
    } | {
        type: "tables_query_output";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        };
    } | {
        type: "websearch_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        };
    } | {
        type: "reasoning_started";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        };
    } | {
        type: "reasoning_thinking";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        };
    } | {
        type: "reasoning_tokens";
        created: number;
        configurationId: string;
        messageId: string;
        classification: "tokens" | "chain_of_thought";
        content: string;
        action: {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        };
    } | {
        type: "search_labels_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        };
    } | {
        type: "tool_params";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        };
    } | {
        type: "tool_approve_execution";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        };
        inputs: Record<string, any>;
        metadata: {
            mcpServerName: string;
            toolName: string;
            agentName: string;
        };
        stake?: "low" | "high" | undefined;
    } | {
        type: "agent_error";
        created: number;
        error: {
            message: string;
            code: string;
        };
        configurationId: string;
        messageId: string;
    } | {
        type: "agent_action_success";
        created: number;
        configurationId: string;
        messageId: string;
        action: {
            type: "browse_action";
            id: number;
            agentMessageId: number;
            urls: string[];
            output: {
                results: {
                    requestedUrl: string;
                    browsedUrl: string;
                    content: string;
                    responseCode: string;
                    errorMessage: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "search_labels_action";
            id: number;
            agentMessageId: number;
            output: {
                tags: {
                    tag: string;
                    match_count: number;
                    data_sources: string[];
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
        } | {
            type: "reasoning_action";
            id: number;
            agentMessageId: number;
            output: string | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            thinking: string | null;
        } | {
            type: "conversation_include_file_action";
            params: {
                fileId: string;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            tokensCount: number | null;
            fileTitle: string | null;
        } | {
            type: "conversation_list_files_action";
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            files: ({
                title: string;
                fileId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                contentFragmentId?: undefined;
                nodeDataSourceViewId?: undefined;
            } | {
                title: string;
                contentFragmentId: string;
                nodeDataSourceViewId: string;
                contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                fileId?: undefined;
            })[];
        } | {
            type: "dust_app_run_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            appWorkspaceId: string;
            appId: string;
            appName: string;
            runningBlock: {
                type: string;
                status: "running" | "succeeded" | "errored";
                name: string;
            } | null;
            output?: unknown;
        } | {
            type: "retrieval_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
                query: string | null;
                topK: number;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            documents: {
                id: number;
                score: number | null;
                timestamp: number;
                tags: string[];
                chunks: {
                    text: string;
                    offset: number;
                    score: number | null;
                }[];
                documentId: string;
                dataSourceView: {
                    category: "folder" | "managed" | "website" | "apps" | "actions";
                    id: number;
                    sId: string;
                    createdAt: number;
                    dataSource: {
                        id: number;
                        sId: string;
                        createdAt: number;
                        name: string;
                        description: string | null;
                        assistantDefaultSelected: boolean;
                        dustAPIProjectId: string;
                        dustAPIDataSourceId: string;
                        connectorId: string | null;
                        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    };
                    kind: "custom" | "default";
                    parentsIn: string[] | null;
                    updatedAt: number;
                    spaceId: string;
                    editedByUser?: {
                        email: string | null;
                        editedAt: number | null;
                        fullName: string | null;
                        imageUrl: string | null;
                        userId: string | null;
                    } | null | undefined;
                } | null;
                reference: string;
                sourceUrl: string | null;
            }[] | null;
        } | {
            schema: {
                type: "string" | "number" | "boolean";
                name: string;
                description: string;
            }[];
            type: "process_action";
            params: {
                relativeTimeFrame: {
                    duration: number;
                    unit: "hour" | "day" | "week" | "month" | "year";
                } | null;
            };
            id: number;
            agentMessageId: number;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            outputs: {
                data: unknown[];
                min_timestamp: number;
                total_documents: number;
                total_chunks: number;
                total_tokens: number;
            } | null;
        } | {
            type: "tables_query_action";
            params: Record<string, string | number | boolean>;
            id: number;
            agentMessageId: number;
            output: Record<string, string | number | boolean> | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            resultsFileId: string | null;
            resultsFileSnippet: string | null;
            sectionFileId: string | null;
        } | {
            type: "websearch_action";
            id: number;
            agentMessageId: number;
            output: {
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | {
                error: string;
                results: {
                    title: string;
                    reference: string;
                    snippet: string;
                    link: string;
                }[];
            } | null;
            functionCallId: string | null;
            functionCallName: string | null;
            step: number;
            query: string;
        } | {
            type: "tool_action";
            id: number;
            agentMessageId: number;
            functionCallName: string | null;
            params?: unknown;
        };
    } | {
        type: "agent_generation_cancelled";
        created: number;
        configurationId: string;
        messageId: string;
    };
    eventId: string;
}>;
export type AgentMessageEventType = z.infer<typeof AgentMessageEventTypeSchema>;
export declare const CoreAPIErrorSchema: z.ZodObject<{
    message: z.ZodString;
    code: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    code: string;
}, {
    message: string;
    code: string;
}>;
export type CoreAPIError = z.infer<typeof CoreAPIErrorSchema>;
export declare const CoreAPITokenTypeSchema: z.ZodTuple<[z.ZodNumber, z.ZodString], null>;
export type CoreAPITokenType = z.infer<typeof CoreAPITokenTypeSchema>;
export declare const APIErrorSchema: z.ZodObject<{
    type: z.ZodType<"internal_server_error" | "unexpected_error_format" | "unexpected_response_format" | "unexpected_network_error" | "invalid_request_error" | "connector_update_error" | "connector_update_unauthorized" | "connector_oauth_target_mismatch" | "action_api_error" | "action_failed" | "action_unknown_error" | "agent_configuration_not_found" | "agent_message_error" | "app_auth_error" | "app_not_found" | "assistant_saving_error" | "chat_message_not_found" | "connector_credentials_error" | "connector_not_found_error" | "connector_provider_not_supported" | "content_too_large" | "conversation_access_restricted" | "conversation_not_found" | "data_source_auth_error" | "data_source_document_not_found" | "data_source_error" | "data_source_not_found" | "data_source_not_managed" | "data_source_quota_error" | "data_source_view_not_found" | "dataset_not_found" | "dust_app_secret_not_found" | "expired_oauth_token_error" | "feature_flag_already_exists" | "feature_flag_not_found" | "file_not_found" | "file_too_large" | "file_type_not_supported" | "global_agent_error" | "group_not_found" | "invalid_api_key_error" | "invalid_oauth_token_error" | "invalid_pagination_parameters" | "invalid_rows_request_error" | "invitation_already_sent_recently" | "invitation_not_found" | "key_not_found" | "malformed_authorization_header_error" | "membership_not_found" | "message_not_found" | "method_not_supported_error" | "missing_authorization_header_error" | "not_authenticated" | "personal_workspace_not_found" | "plan_limit_error" | "plan_message_limit_exceeded" | "plugin_execution_failed" | "plugin_not_found" | "provider_auth_error" | "provider_not_found" | "rate_limit_error" | "run_error" | "run_not_found" | "space_already_exists" | "space_not_found" | "stripe_invalid_product_id_error" | "subscription_not_found" | "subscription_payment_failed" | "subscription_state_invalid" | "table_not_found" | "template_not_found" | "labs_connection_configuration_already_exists" | "transcripts_configuration_already_exists" | "transcripts_configuration_default_not_allowed" | "transcripts_configuration_not_found" | "unexpected_action_response" | "user_not_found" | "workspace_auth_error" | "workspace_not_found" | "workspace_user_not_found", z.ZodTypeDef, "internal_server_error" | "unexpected_error_format" | "unexpected_response_format" | "unexpected_network_error" | "invalid_request_error" | "connector_update_error" | "connector_update_unauthorized" | "connector_oauth_target_mismatch" | "action_api_error" | "action_failed" | "action_unknown_error" | "agent_configuration_not_found" | "agent_message_error" | "app_auth_error" | "app_not_found" | "assistant_saving_error" | "chat_message_not_found" | "connector_credentials_error" | "connector_not_found_error" | "connector_provider_not_supported" | "content_too_large" | "conversation_access_restricted" | "conversation_not_found" | "data_source_auth_error" | "data_source_document_not_found" | "data_source_error" | "data_source_not_found" | "data_source_not_managed" | "data_source_quota_error" | "data_source_view_not_found" | "dataset_not_found" | "dust_app_secret_not_found" | "expired_oauth_token_error" | "feature_flag_already_exists" | "feature_flag_not_found" | "file_not_found" | "file_too_large" | "file_type_not_supported" | "global_agent_error" | "group_not_found" | "invalid_api_key_error" | "invalid_oauth_token_error" | "invalid_pagination_parameters" | "invalid_rows_request_error" | "invitation_already_sent_recently" | "invitation_not_found" | "key_not_found" | "malformed_authorization_header_error" | "membership_not_found" | "message_not_found" | "method_not_supported_error" | "missing_authorization_header_error" | "not_authenticated" | "personal_workspace_not_found" | "plan_limit_error" | "plan_message_limit_exceeded" | "plugin_execution_failed" | "plugin_not_found" | "provider_auth_error" | "provider_not_found" | "rate_limit_error" | "run_error" | "run_not_found" | "space_already_exists" | "space_not_found" | "stripe_invalid_product_id_error" | "subscription_not_found" | "subscription_payment_failed" | "subscription_state_invalid" | "table_not_found" | "template_not_found" | "labs_connection_configuration_already_exists" | "transcripts_configuration_already_exists" | "transcripts_configuration_default_not_allowed" | "transcripts_configuration_not_found" | "unexpected_action_response" | "user_not_found" | "workspace_auth_error" | "workspace_not_found" | "workspace_user_not_found">;
    message: z.ZodString;
    data_source_error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        code: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        code: string;
    }, {
        message: string;
        code: string;
    }>>;
    run_error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        code: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        code: string;
    }, {
        message: string;
        code: string;
    }>>;
    app_error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        code: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        code: string;
    }, {
        message: string;
        code: string;
    }>>;
    connectors_error: z.ZodOptional<z.ZodObject<{
        type: z.ZodType<"authorization_error" | "not_found" | "internal_server_error" | "unexpected_error_format" | "unexpected_response_format" | "unexpected_network_error" | "unknown_connector_provider" | "invalid_request_error" | "connector_authorization_error" | "connector_not_found" | "connector_configuration_not_found" | "connector_update_error" | "connector_update_unauthorized" | "connector_oauth_target_mismatch" | "connector_oauth_error" | "slack_channel_not_found" | "connector_rate_limit_error" | "slack_configuration_not_found" | "google_drive_webhook_not_found", z.ZodTypeDef, "authorization_error" | "not_found" | "internal_server_error" | "unexpected_error_format" | "unexpected_response_format" | "unexpected_network_error" | "unknown_connector_provider" | "invalid_request_error" | "connector_authorization_error" | "connector_not_found" | "connector_configuration_not_found" | "connector_update_error" | "connector_update_unauthorized" | "connector_oauth_target_mismatch" | "connector_oauth_error" | "slack_channel_not_found" | "connector_rate_limit_error" | "slack_configuration_not_found" | "google_drive_webhook_not_found">;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "authorization_error" | "not_found" | "internal_server_error" | "unexpected_error_format" | "unexpected_response_format" | "unexpected_network_error" | "unknown_connector_provider" | "invalid_request_error" | "connector_authorization_error" | "connector_not_found" | "connector_configuration_not_found" | "connector_update_error" | "connector_update_unauthorized" | "connector_oauth_target_mismatch" | "connector_oauth_error" | "slack_channel_not_found" | "connector_rate_limit_error" | "slack_configuration_not_found" | "google_drive_webhook_not_found";
        message: string;
    }, {
        type: "authorization_error" | "not_found" | "internal_server_error" | "unexpected_error_format" | "unexpected_response_format" | "unexpected_network_error" | "unknown_connector_provider" | "invalid_request_error" | "connector_authorization_error" | "connector_not_found" | "connector_configuration_not_found" | "connector_update_error" | "connector_update_unauthorized" | "connector_oauth_target_mismatch" | "connector_oauth_error" | "slack_channel_not_found" | "connector_rate_limit_error" | "slack_configuration_not_found" | "google_drive_webhook_not_found";
        message: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "internal_server_error" | "unexpected_error_format" | "unexpected_response_format" | "unexpected_network_error" | "invalid_request_error" | "connector_update_error" | "connector_update_unauthorized" | "connector_oauth_target_mismatch" | "action_api_error" | "action_failed" | "action_unknown_error" | "agent_configuration_not_found" | "agent_message_error" | "app_auth_error" | "app_not_found" | "assistant_saving_error" | "chat_message_not_found" | "connector_credentials_error" | "connector_not_found_error" | "connector_provider_not_supported" | "content_too_large" | "conversation_access_restricted" | "conversation_not_found" | "data_source_auth_error" | "data_source_document_not_found" | "data_source_error" | "data_source_not_found" | "data_source_not_managed" | "data_source_quota_error" | "data_source_view_not_found" | "dataset_not_found" | "dust_app_secret_not_found" | "expired_oauth_token_error" | "feature_flag_already_exists" | "feature_flag_not_found" | "file_not_found" | "file_too_large" | "file_type_not_supported" | "global_agent_error" | "group_not_found" | "invalid_api_key_error" | "invalid_oauth_token_error" | "invalid_pagination_parameters" | "invalid_rows_request_error" | "invitation_already_sent_recently" | "invitation_not_found" | "key_not_found" | "malformed_authorization_header_error" | "membership_not_found" | "message_not_found" | "method_not_supported_error" | "missing_authorization_header_error" | "not_authenticated" | "personal_workspace_not_found" | "plan_limit_error" | "plan_message_limit_exceeded" | "plugin_execution_failed" | "plugin_not_found" | "provider_auth_error" | "provider_not_found" | "rate_limit_error" | "run_error" | "run_not_found" | "space_already_exists" | "space_not_found" | "stripe_invalid_product_id_error" | "subscription_not_found" | "subscription_payment_failed" | "subscription_state_invalid" | "table_not_found" | "template_not_found" | "labs_connection_configuration_already_exists" | "transcripts_configuration_already_exists" | "transcripts_configuration_default_not_allowed" | "transcripts_configuration_not_found" | "unexpected_action_response" | "user_not_found" | "workspace_auth_error" | "workspace_not_found" | "workspace_user_not_found";
    message: string;
    data_source_error?: {
        message: string;
        code: string;
    } | undefined;
    run_error?: {
        message: string;
        code: string;
    } | undefined;
    app_error?: {
        message: string;
        code: string;
    } | undefined;
    connectors_error?: {
        type: "authorization_error" | "not_found" | "internal_server_error" | "unexpected_error_format" | "unexpected_response_format" | "unexpected_network_error" | "unknown_connector_provider" | "invalid_request_error" | "connector_authorization_error" | "connector_not_found" | "connector_configuration_not_found" | "connector_update_error" | "connector_update_unauthorized" | "connector_oauth_target_mismatch" | "connector_oauth_error" | "slack_channel_not_found" | "connector_rate_limit_error" | "slack_configuration_not_found" | "google_drive_webhook_not_found";
        message: string;
    } | undefined;
}, {
    type: "internal_server_error" | "unexpected_error_format" | "unexpected_response_format" | "unexpected_network_error" | "invalid_request_error" | "connector_update_error" | "connector_update_unauthorized" | "connector_oauth_target_mismatch" | "action_api_error" | "action_failed" | "action_unknown_error" | "agent_configuration_not_found" | "agent_message_error" | "app_auth_error" | "app_not_found" | "assistant_saving_error" | "chat_message_not_found" | "connector_credentials_error" | "connector_not_found_error" | "connector_provider_not_supported" | "content_too_large" | "conversation_access_restricted" | "conversation_not_found" | "data_source_auth_error" | "data_source_document_not_found" | "data_source_error" | "data_source_not_found" | "data_source_not_managed" | "data_source_quota_error" | "data_source_view_not_found" | "dataset_not_found" | "dust_app_secret_not_found" | "expired_oauth_token_error" | "feature_flag_already_exists" | "feature_flag_not_found" | "file_not_found" | "file_too_large" | "file_type_not_supported" | "global_agent_error" | "group_not_found" | "invalid_api_key_error" | "invalid_oauth_token_error" | "invalid_pagination_parameters" | "invalid_rows_request_error" | "invitation_already_sent_recently" | "invitation_not_found" | "key_not_found" | "malformed_authorization_header_error" | "membership_not_found" | "message_not_found" | "method_not_supported_error" | "missing_authorization_header_error" | "not_authenticated" | "personal_workspace_not_found" | "plan_limit_error" | "plan_message_limit_exceeded" | "plugin_execution_failed" | "plugin_not_found" | "provider_auth_error" | "provider_not_found" | "rate_limit_error" | "run_error" | "run_not_found" | "space_already_exists" | "space_not_found" | "stripe_invalid_product_id_error" | "subscription_not_found" | "subscription_payment_failed" | "subscription_state_invalid" | "table_not_found" | "template_not_found" | "labs_connection_configuration_already_exists" | "transcripts_configuration_already_exists" | "transcripts_configuration_default_not_allowed" | "transcripts_configuration_not_found" | "unexpected_action_response" | "user_not_found" | "workspace_auth_error" | "workspace_not_found" | "workspace_user_not_found";
    message: string;
    data_source_error?: {
        message: string;
        code: string;
    } | undefined;
    run_error?: {
        message: string;
        code: string;
    } | undefined;
    app_error?: {
        message: string;
        code: string;
    } | undefined;
    connectors_error?: {
        type: "authorization_error" | "not_found" | "internal_server_error" | "unexpected_error_format" | "unexpected_response_format" | "unexpected_network_error" | "unknown_connector_provider" | "invalid_request_error" | "connector_authorization_error" | "connector_not_found" | "connector_configuration_not_found" | "connector_update_error" | "connector_update_unauthorized" | "connector_oauth_target_mismatch" | "connector_oauth_error" | "slack_channel_not_found" | "connector_rate_limit_error" | "slack_configuration_not_found" | "google_drive_webhook_not_found";
        message: string;
    } | undefined;
}>;
export type APIError = z.infer<typeof APIErrorSchema>;
export declare const WorkspaceDomainSchema: z.ZodObject<{
    domain: z.ZodString;
    domainAutoJoinEnabled: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    domain: string;
    domainAutoJoinEnabled: boolean;
}, {
    domain: string;
    domainAutoJoinEnabled: boolean;
}>;
export type WorkspaceDomainType = z.infer<typeof WorkspaceDomainSchema>;
export declare const DustAppTypeSchema: z.ZodObject<{
    appHash: z.ZodString;
    appId: z.ZodString;
    workspaceId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    appId: string;
    workspaceId: string;
    appHash: string;
}, {
    appId: string;
    workspaceId: string;
    appHash: string;
}>;
export type DustAppType = z.infer<typeof DustAppTypeSchema>;
export declare const DustAppConfigTypeSchema: z.ZodRecord<z.ZodString, z.ZodUnknown>;
export type DustAppConfigType = z.infer<typeof DustAppConfigTypeSchema>;
export declare const DustAppRunErroredEventSchema: z.ZodObject<{
    type: z.ZodLiteral<"error">;
    content: z.ZodObject<{
        code: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        code: string;
    }, {
        message: string;
        code: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "error";
    content: {
        message: string;
        code: string;
    };
}, {
    type: "error";
    content: {
        message: string;
        code: string;
    };
}>;
export type DustAppRunErroredEvent = z.infer<typeof DustAppRunErroredEventSchema>;
export declare const DustAppRunRunStatusEventSchema: z.ZodObject<{
    type: z.ZodLiteral<"run_status">;
    content: z.ZodObject<{
        status: z.ZodEnum<["running", "succeeded", "errored"]>;
        run_id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        status: "running" | "succeeded" | "errored";
        run_id: string;
    }, {
        status: "running" | "succeeded" | "errored";
        run_id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "run_status";
    content: {
        status: "running" | "succeeded" | "errored";
        run_id: string;
    };
}, {
    type: "run_status";
    content: {
        status: "running" | "succeeded" | "errored";
        run_id: string;
    };
}>;
export type DustAppRunRunStatusEvent = z.infer<typeof DustAppRunRunStatusEventSchema>;
export declare const DustAppRunBlockStatusEventSchema: z.ZodObject<{
    type: z.ZodLiteral<"block_status">;
    content: z.ZodObject<{
        block_type: z.ZodType<"map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema", z.ZodTypeDef, "map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema">;
        name: z.ZodString;
        status: z.ZodEnum<["running", "succeeded", "errored"]>;
        success_count: z.ZodNumber;
        error_count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        status: "running" | "succeeded" | "errored";
        name: string;
        block_type: "map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema";
        success_count: number;
        error_count: number;
    }, {
        status: "running" | "succeeded" | "errored";
        name: string;
        block_type: "map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema";
        success_count: number;
        error_count: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "block_status";
    content: {
        status: "running" | "succeeded" | "errored";
        name: string;
        block_type: "map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema";
        success_count: number;
        error_count: number;
    };
}, {
    type: "block_status";
    content: {
        status: "running" | "succeeded" | "errored";
        name: string;
        block_type: "map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema";
        success_count: number;
        error_count: number;
    };
}>;
export type DustAppRunBlockStatusEvent = z.infer<typeof DustAppRunBlockStatusEventSchema>;
export declare const DustAppRunBlockExecutionEventSchema: z.ZodObject<{
    type: z.ZodLiteral<"block_execution">;
    content: z.ZodObject<{
        block_type: z.ZodType<"map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema", z.ZodTypeDef, "map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema">;
        block_name: z.ZodString;
        execution: z.ZodArray<z.ZodArray<z.ZodObject<{
            value: z.ZodNullable<z.ZodUnknown>;
            error: z.ZodNullable<z.ZodString>;
            meta: z.ZodNullable<z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            error: string | null;
            value?: unknown;
            meta?: unknown;
        }, {
            error: string | null;
            value?: unknown;
            meta?: unknown;
        }>, "many">, "many">;
    }, "strip", z.ZodTypeAny, {
        block_type: "map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema";
        block_name: string;
        execution: {
            error: string | null;
            value?: unknown;
            meta?: unknown;
        }[][];
    }, {
        block_type: "map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema";
        block_name: string;
        execution: {
            error: string | null;
            value?: unknown;
            meta?: unknown;
        }[][];
    }>;
}, "strip", z.ZodTypeAny, {
    type: "block_execution";
    content: {
        block_type: "map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema";
        block_name: string;
        execution: {
            error: string | null;
            value?: unknown;
            meta?: unknown;
        }[][];
    };
}, {
    type: "block_execution";
    content: {
        block_type: "map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema";
        block_name: string;
        execution: {
            error: string | null;
            value?: unknown;
            meta?: unknown;
        }[][];
    };
}>;
export type DustAppRunBlockExecutionEvent = z.infer<typeof DustAppRunBlockExecutionEventSchema>;
export declare const DustAppRunFinalEventSchema: z.ZodObject<{
    type: z.ZodLiteral<"final">;
}, "strip", z.ZodTypeAny, {
    type: "final";
}, {
    type: "final";
}>;
export type DustAppRunFinalEvent = z.infer<typeof DustAppRunFinalEventSchema>;
export declare const DustAppRunTokensEventSchema: z.ZodObject<{
    type: z.ZodLiteral<"tokens">;
    content: z.ZodObject<{
        block_type: z.ZodString;
        block_name: z.ZodString;
        input_index: z.ZodNumber;
        map: z.ZodNullable<z.ZodObject<{
            name: z.ZodString;
            iteration: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            iteration: number;
        }, {
            name: string;
            iteration: number;
        }>>;
        tokens: z.ZodObject<{
            text: z.ZodString;
            tokens: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            logprobs: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            text: string;
            tokens?: string[] | undefined;
            logprobs?: number[] | undefined;
        }, {
            text: string;
            tokens?: string[] | undefined;
            logprobs?: number[] | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        map: {
            name: string;
            iteration: number;
        } | null;
        block_type: string;
        tokens: {
            text: string;
            tokens?: string[] | undefined;
            logprobs?: number[] | undefined;
        };
        block_name: string;
        input_index: number;
    }, {
        map: {
            name: string;
            iteration: number;
        } | null;
        block_type: string;
        tokens: {
            text: string;
            tokens?: string[] | undefined;
            logprobs?: number[] | undefined;
        };
        block_name: string;
        input_index: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "tokens";
    content: {
        map: {
            name: string;
            iteration: number;
        } | null;
        block_type: string;
        tokens: {
            text: string;
            tokens?: string[] | undefined;
            logprobs?: number[] | undefined;
        };
        block_name: string;
        input_index: number;
    };
}, {
    type: "tokens";
    content: {
        map: {
            name: string;
            iteration: number;
        } | null;
        block_type: string;
        tokens: {
            text: string;
            tokens?: string[] | undefined;
            logprobs?: number[] | undefined;
        };
        block_name: string;
        input_index: number;
    };
}>;
export type DustAppRunTokensEvent = z.infer<typeof DustAppRunTokensEventSchema>;
export declare const DustAppRunFunctionCallEventSchema: z.ZodObject<{
    type: z.ZodLiteral<"function_call">;
    content: z.ZodObject<{
        block_type: z.ZodString;
        block_name: z.ZodString;
        input_index: z.ZodNumber;
        map: z.ZodNullable<z.ZodObject<{
            name: z.ZodString;
            iteration: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            iteration: number;
        }, {
            name: string;
            iteration: number;
        }>>;
        function_call: z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        map: {
            name: string;
            iteration: number;
        } | null;
        block_type: string;
        block_name: string;
        input_index: number;
        function_call: {
            name: string;
        };
    }, {
        map: {
            name: string;
            iteration: number;
        } | null;
        block_type: string;
        block_name: string;
        input_index: number;
        function_call: {
            name: string;
        };
    }>;
}, "strip", z.ZodTypeAny, {
    type: "function_call";
    content: {
        map: {
            name: string;
            iteration: number;
        } | null;
        block_type: string;
        block_name: string;
        input_index: number;
        function_call: {
            name: string;
        };
    };
}, {
    type: "function_call";
    content: {
        map: {
            name: string;
            iteration: number;
        } | null;
        block_type: string;
        block_name: string;
        input_index: number;
        function_call: {
            name: string;
        };
    };
}>;
export type DustAppRunFunctionCallEvent = z.infer<typeof DustAppRunFunctionCallEventSchema>;
export declare const DustAppRunFunctionCallArgumentsTokensEventSchema: z.ZodObject<{
    type: z.ZodLiteral<"function_call_arguments_tokens">;
    content: z.ZodObject<{
        block_type: z.ZodString;
        block_name: z.ZodString;
        input_index: z.ZodNumber;
        map: z.ZodNullable<z.ZodObject<{
            name: z.ZodString;
            iteration: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            iteration: number;
        }, {
            name: string;
            iteration: number;
        }>>;
        tokens: z.ZodObject<{
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            text: string;
        }, {
            text: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        map: {
            name: string;
            iteration: number;
        } | null;
        block_type: string;
        tokens: {
            text: string;
        };
        block_name: string;
        input_index: number;
    }, {
        map: {
            name: string;
            iteration: number;
        } | null;
        block_type: string;
        tokens: {
            text: string;
        };
        block_name: string;
        input_index: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "function_call_arguments_tokens";
    content: {
        map: {
            name: string;
            iteration: number;
        } | null;
        block_type: string;
        tokens: {
            text: string;
        };
        block_name: string;
        input_index: number;
    };
}, {
    type: "function_call_arguments_tokens";
    content: {
        map: {
            name: string;
            iteration: number;
        } | null;
        block_type: string;
        tokens: {
            text: string;
        };
        block_name: string;
        input_index: number;
    };
}>;
export type DustAppRunFunctionCallArgumentsTokensEvent = z.infer<typeof DustAppRunFunctionCallArgumentsTokensEventSchema>;
export type DustAPICredentials = {
    apiKey: string | (() => string | null | Promise<string | null>);
    workspaceId: string;
    extraHeaders?: Record<string, string>;
};
declare const SpaceTypeSchema: z.ZodObject<{
    createdAt: z.ZodNumber;
    groupIds: z.ZodArray<z.ZodString, "many">;
    isRestricted: z.ZodBoolean;
    kind: z.ZodType<"global" | "regular" | "system" | "public" | "conversations", z.ZodTypeDef, "global" | "regular" | "system" | "public" | "conversations">;
    name: z.ZodString;
    sId: z.ZodString;
    updatedAt: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    sId: string;
    createdAt: number;
    name: string;
    kind: "global" | "regular" | "system" | "public" | "conversations";
    updatedAt: number;
    groupIds: string[];
    isRestricted: boolean;
}, {
    sId: string;
    createdAt: number;
    name: string;
    kind: "global" | "regular" | "system" | "public" | "conversations";
    updatedAt: number;
    groupIds: string[];
    isRestricted: boolean;
}>;
export type SpaceType = z.infer<typeof SpaceTypeSchema>;
declare const AppTypeSchema: z.ZodObject<{
    id: z.ZodNumber;
    sId: z.ZodString;
    name: z.ZodString;
    description: z.ZodNullable<z.ZodString>;
    savedSpecification: z.ZodNullable<z.ZodString>;
    savedConfig: z.ZodNullable<z.ZodString>;
    savedRun: z.ZodNullable<z.ZodString>;
    dustAPIProjectId: z.ZodString;
    space: z.ZodObject<{
        createdAt: z.ZodNumber;
        groupIds: z.ZodArray<z.ZodString, "many">;
        isRestricted: z.ZodBoolean;
        kind: z.ZodType<"global" | "regular" | "system" | "public" | "conversations", z.ZodTypeDef, "global" | "regular" | "system" | "public" | "conversations">;
        name: z.ZodString;
        sId: z.ZodString;
        updatedAt: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        sId: string;
        createdAt: number;
        name: string;
        kind: "global" | "regular" | "system" | "public" | "conversations";
        updatedAt: number;
        groupIds: string[];
        isRestricted: boolean;
    }, {
        sId: string;
        createdAt: number;
        name: string;
        kind: "global" | "regular" | "system" | "public" | "conversations";
        updatedAt: number;
        groupIds: string[];
        isRestricted: boolean;
    }>;
    datasets: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        description: z.ZodNullable<z.ZodString>;
        data: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>, "many">>>;
        schema: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            type: z.ZodType<"string" | "number" | "boolean" | "json", z.ZodTypeDef, "string" | "number" | "boolean" | "json">;
            description: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "string" | "number" | "boolean" | "json";
            description: string | null;
            key: string;
        }, {
            type: "string" | "number" | "boolean" | "json";
            description: string | null;
            key: string;
        }>, "many">>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description: string | null;
        schema?: {
            type: "string" | "number" | "boolean" | "json";
            description: string | null;
            key: string;
        }[] | null | undefined;
        data?: Record<string, any>[] | null | undefined;
    }, {
        name: string;
        description: string | null;
        schema?: {
            type: "string" | "number" | "boolean" | "json";
            description: string | null;
            key: string;
        }[] | null | undefined;
        data?: Record<string, any>[] | null | undefined;
    }>, "many">>;
    coreSpecifications: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    space: {
        sId: string;
        createdAt: number;
        name: string;
        kind: "global" | "regular" | "system" | "public" | "conversations";
        updatedAt: number;
        groupIds: string[];
        isRestricted: boolean;
    };
    id: number;
    sId: string;
    name: string;
    description: string | null;
    dustAPIProjectId: string;
    savedSpecification: string | null;
    savedConfig: string | null;
    savedRun: string | null;
    datasets?: {
        name: string;
        description: string | null;
        schema?: {
            type: "string" | "number" | "boolean" | "json";
            description: string | null;
            key: string;
        }[] | null | undefined;
        data?: Record<string, any>[] | null | undefined;
    }[] | undefined;
    coreSpecifications?: Record<string, string> | undefined;
}, {
    space: {
        sId: string;
        createdAt: number;
        name: string;
        kind: "global" | "regular" | "system" | "public" | "conversations";
        updatedAt: number;
        groupIds: string[];
        isRestricted: boolean;
    };
    id: number;
    sId: string;
    name: string;
    description: string | null;
    dustAPIProjectId: string;
    savedSpecification: string | null;
    savedConfig: string | null;
    savedRun: string | null;
    datasets?: {
        name: string;
        description: string | null;
        schema?: {
            type: "string" | "number" | "boolean" | "json";
            description: string | null;
            key: string;
        }[] | null | undefined;
        data?: Record<string, any>[] | null | undefined;
    }[] | undefined;
    coreSpecifications?: Record<string, string> | undefined;
}>;
export type ApiAppType = z.infer<typeof AppTypeSchema>;
export declare const RunAppResponseSchema: z.ZodObject<{
    run: z.ZodObject<{
        run_id: z.ZodString;
        created: z.ZodNumber;
        run_type: z.ZodEnum<["deploy", "local", "execute"]>;
        app_hash: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        specification_hash: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        config: z.ZodObject<{
            blocks: z.ZodRecord<z.ZodString, z.ZodAny>;
        }, "strip", z.ZodTypeAny, {
            blocks: Record<string, any>;
        }, {
            blocks: Record<string, any>;
        }>;
        status: z.ZodObject<{
            run: z.ZodEnum<["running", "succeeded", "errored"]>;
            blocks: z.ZodArray<z.ZodObject<{
                block_type: z.ZodType<"map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema", z.ZodTypeDef, "map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema">;
                name: z.ZodString;
                status: z.ZodEnum<["running", "succeeded", "errored"]>;
                success_count: z.ZodNumber;
                error_count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                status: "running" | "succeeded" | "errored";
                name: string;
                block_type: "map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema";
                success_count: number;
                error_count: number;
            }, {
                status: "running" | "succeeded" | "errored";
                name: string;
                block_type: "map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema";
                success_count: number;
                error_count: number;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            blocks: {
                status: "running" | "succeeded" | "errored";
                name: string;
                block_type: "map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema";
                success_count: number;
                error_count: number;
            }[];
            run: "running" | "succeeded" | "errored";
        }, {
            blocks: {
                status: "running" | "succeeded" | "errored";
                name: string;
                block_type: "map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema";
                success_count: number;
                error_count: number;
            }[];
            run: "running" | "succeeded" | "errored";
        }>;
        traces: z.ZodArray<z.ZodTuple<[z.ZodTuple<[z.ZodType<"map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema", z.ZodTypeDef, "map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema">, z.ZodString], null>, z.ZodArray<z.ZodArray<z.ZodObject<{
            value: z.ZodNullable<z.ZodUnknown>;
            error: z.ZodNullable<z.ZodString>;
            meta: z.ZodNullable<z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            error: string | null;
            value?: unknown;
            meta?: unknown;
        }, {
            error: string | null;
            value?: unknown;
            meta?: unknown;
        }>, "many">, "many">], null>, "many">;
        results: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodArray<z.ZodObject<{
            value: z.ZodOptional<z.ZodNullable<z.ZodUnknown>>;
            error: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            value?: unknown;
            error?: string | null | undefined;
        }, {
            value?: unknown;
            error?: string | null | undefined;
        }>, "many">, "many">>>;
    }, "strip", z.ZodTypeAny, {
        status: {
            blocks: {
                status: "running" | "succeeded" | "errored";
                name: string;
                block_type: "map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema";
                success_count: number;
                error_count: number;
            }[];
            run: "running" | "succeeded" | "errored";
        };
        created: number;
        run_id: string;
        run_type: "deploy" | "local" | "execute";
        config: {
            blocks: Record<string, any>;
        };
        traces: [["map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema", string], {
            error: string | null;
            value?: unknown;
            meta?: unknown;
        }[][]][];
        app_hash?: string | null | undefined;
        specification_hash?: string | null | undefined;
        results?: {
            value?: unknown;
            error?: string | null | undefined;
        }[][] | null | undefined;
    }, {
        status: {
            blocks: {
                status: "running" | "succeeded" | "errored";
                name: string;
                block_type: "map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema";
                success_count: number;
                error_count: number;
            }[];
            run: "running" | "succeeded" | "errored";
        };
        created: number;
        run_id: string;
        run_type: "deploy" | "local" | "execute";
        config: {
            blocks: Record<string, any>;
        };
        traces: [["map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema", string], {
            error: string | null;
            value?: unknown;
            meta?: unknown;
        }[][]][];
        app_hash?: string | null | undefined;
        specification_hash?: string | null | undefined;
        results?: {
            value?: unknown;
            error?: string | null | undefined;
        }[][] | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    run: {
        status: {
            blocks: {
                status: "running" | "succeeded" | "errored";
                name: string;
                block_type: "map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema";
                success_count: number;
                error_count: number;
            }[];
            run: "running" | "succeeded" | "errored";
        };
        created: number;
        run_id: string;
        run_type: "deploy" | "local" | "execute";
        config: {
            blocks: Record<string, any>;
        };
        traces: [["map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema", string], {
            error: string | null;
            value?: unknown;
            meta?: unknown;
        }[][]][];
        app_hash?: string | null | undefined;
        specification_hash?: string | null | undefined;
        results?: {
            value?: unknown;
            error?: string | null | undefined;
        }[][] | null | undefined;
    };
}, {
    run: {
        status: {
            blocks: {
                status: "running" | "succeeded" | "errored";
                name: string;
                block_type: "map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema";
                success_count: number;
                error_count: number;
            }[];
            run: "running" | "succeeded" | "errored";
        };
        created: number;
        run_id: string;
        run_type: "deploy" | "local" | "execute";
        config: {
            blocks: Record<string, any>;
        };
        traces: [["map" | "reduce" | "database" | "code" | "input" | "data" | "data_source" | "llm" | "chat" | "while" | "end" | "search" | "curl" | "browser" | "database_schema", string], {
            error: string | null;
            value?: unknown;
            meta?: unknown;
        }[][]][];
        app_hash?: string | null | undefined;
        specification_hash?: string | null | undefined;
        results?: {
            value?: unknown;
            error?: string | null | undefined;
        }[][] | null | undefined;
    };
}>;
export type RunAppResponseType = z.infer<typeof RunAppResponseSchema>;
export declare const GetDataSourcesResponseSchema: z.ZodObject<{
    data_sources: z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        sId: z.ZodString;
        createdAt: z.ZodNumber;
        name: z.ZodString;
        description: z.ZodNullable<z.ZodString>;
        assistantDefaultSelected: z.ZodBoolean;
        dustAPIProjectId: z.ZodString;
        dustAPIDataSourceId: z.ZodString;
        connectorId: z.ZodNullable<z.ZodString>;
        connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
        editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            editedAt: z.ZodNullable<z.ZodNumber>;
            fullName: z.ZodNullable<z.ZodString>;
            imageUrl: z.ZodNullable<z.ZodString>;
            email: z.ZodNullable<z.ZodString>;
            userId: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        }, {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        sId: string;
        createdAt: number;
        name: string;
        description: string | null;
        assistantDefaultSelected: boolean;
        dustAPIProjectId: string;
        dustAPIDataSourceId: string;
        connectorId: string | null;
        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }, {
        id: number;
        sId: string;
        createdAt: number;
        name: string;
        description: string | null;
        assistantDefaultSelected: boolean;
        dustAPIProjectId: string;
        dustAPIDataSourceId: string;
        connectorId: string | null;
        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data_sources: {
        id: number;
        sId: string;
        createdAt: number;
        name: string;
        description: string | null;
        assistantDefaultSelected: boolean;
        dustAPIProjectId: string;
        dustAPIDataSourceId: string;
        connectorId: string | null;
        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }[];
}, {
    data_sources: {
        id: number;
        sId: string;
        createdAt: number;
        name: string;
        description: string | null;
        assistantDefaultSelected: boolean;
        dustAPIProjectId: string;
        dustAPIDataSourceId: string;
        connectorId: string | null;
        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }[];
}>;
export type GetDataSourcesResponseType = z.infer<typeof GetDataSourcesResponseSchema>;
export declare const GetOrPatchAgentConfigurationResponseSchema: z.ZodObject<{
    agentConfiguration: z.ZodObject<{
        id: z.ZodNumber;
        versionCreatedAt: z.ZodNullable<z.ZodString>;
        sId: z.ZodString;
        version: z.ZodNumber;
        versionAuthorId: z.ZodNullable<z.ZodNumber>;
        instructions: z.ZodNullable<z.ZodString>;
        model: z.ZodObject<{
            providerId: z.ZodType<"openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks", z.ZodTypeDef, "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks">;
            modelId: z.ZodType<"gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1", z.ZodTypeDef, "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1">;
            temperature: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
            modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
            temperature: number;
        }, {
            providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
            modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
            temperature: number;
        }>;
        status: z.ZodUnion<[z.ZodType<"active" | "archived" | "draft", z.ZodTypeDef, "active" | "archived" | "draft">, z.ZodType<"active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace", z.ZodTypeDef, "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace">]>;
        scope: z.ZodType<"global" | "workspace" | "published" | "private", z.ZodTypeDef, "global" | "workspace" | "published" | "private">;
        userFavorite: z.ZodBoolean;
        name: z.ZodString;
        description: z.ZodString;
        pictureUrl: z.ZodString;
        lastAuthors: z.ZodOptional<z.ZodReadonly<z.ZodArray<z.ZodString, "many">>>;
        usage: z.ZodOptional<z.ZodObject<{
            messageCount: z.ZodNumber;
            conversationCount: z.ZodNumber;
            userCount: z.ZodNumber;
            timePeriodSec: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            messageCount: number;
            conversationCount: number;
            userCount: number;
            timePeriodSec: number;
        }, {
            messageCount: number;
            conversationCount: number;
            userCount: number;
            timePeriodSec: number;
        }>>;
        maxStepsPerRun: z.ZodNumber;
        visualizationEnabled: z.ZodBoolean;
        templateId: z.ZodNullable<z.ZodString>;
        groupIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        requestedGroupIds: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
    }, "strip", z.ZodTypeAny, {
        status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
        id: number;
        sId: string;
        name: string;
        description: string;
        versionCreatedAt: string | null;
        version: number;
        versionAuthorId: number | null;
        instructions: string | null;
        model: {
            providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
            modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
            temperature: number;
        };
        scope: "global" | "workspace" | "published" | "private";
        userFavorite: boolean;
        pictureUrl: string;
        maxStepsPerRun: number;
        visualizationEnabled: boolean;
        templateId: string | null;
        requestedGroupIds: string[][];
        lastAuthors?: readonly string[] | undefined;
        usage?: {
            messageCount: number;
            conversationCount: number;
            userCount: number;
            timePeriodSec: number;
        } | undefined;
        groupIds?: string[] | undefined;
    }, {
        status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
        id: number;
        sId: string;
        name: string;
        description: string;
        versionCreatedAt: string | null;
        version: number;
        versionAuthorId: number | null;
        instructions: string | null;
        model: {
            providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
            modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
            temperature: number;
        };
        scope: "global" | "workspace" | "published" | "private";
        userFavorite: boolean;
        pictureUrl: string;
        maxStepsPerRun: number;
        visualizationEnabled: boolean;
        templateId: string | null;
        requestedGroupIds: string[][];
        lastAuthors?: readonly string[] | undefined;
        usage?: {
            messageCount: number;
            conversationCount: number;
            userCount: number;
            timePeriodSec: number;
        } | undefined;
        groupIds?: string[] | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    agentConfiguration: {
        status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
        id: number;
        sId: string;
        name: string;
        description: string;
        versionCreatedAt: string | null;
        version: number;
        versionAuthorId: number | null;
        instructions: string | null;
        model: {
            providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
            modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
            temperature: number;
        };
        scope: "global" | "workspace" | "published" | "private";
        userFavorite: boolean;
        pictureUrl: string;
        maxStepsPerRun: number;
        visualizationEnabled: boolean;
        templateId: string | null;
        requestedGroupIds: string[][];
        lastAuthors?: readonly string[] | undefined;
        usage?: {
            messageCount: number;
            conversationCount: number;
            userCount: number;
            timePeriodSec: number;
        } | undefined;
        groupIds?: string[] | undefined;
    };
}, {
    agentConfiguration: {
        status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
        id: number;
        sId: string;
        name: string;
        description: string;
        versionCreatedAt: string | null;
        version: number;
        versionAuthorId: number | null;
        instructions: string | null;
        model: {
            providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
            modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
            temperature: number;
        };
        scope: "global" | "workspace" | "published" | "private";
        userFavorite: boolean;
        pictureUrl: string;
        maxStepsPerRun: number;
        visualizationEnabled: boolean;
        templateId: string | null;
        requestedGroupIds: string[][];
        lastAuthors?: readonly string[] | undefined;
        usage?: {
            messageCount: number;
            conversationCount: number;
            userCount: number;
            timePeriodSec: number;
        } | undefined;
        groupIds?: string[] | undefined;
    };
}>;
export type GetOrPatchAgentConfigurationResponseType = z.infer<typeof GetOrPatchAgentConfigurationResponseSchema>;
export declare const PatchAgentConfigurationRequestSchema: z.ZodObject<{
    userFavorite: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    userFavorite?: boolean | undefined;
}, {
    userFavorite?: boolean | undefined;
}>;
export type PatchAgentConfigurationRequestType = z.infer<typeof PatchAgentConfigurationRequestSchema>;
export declare const GetAgentConfigurationsResponseSchema: z.ZodObject<{
    agentConfigurations: z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        versionCreatedAt: z.ZodNullable<z.ZodString>;
        sId: z.ZodString;
        version: z.ZodNumber;
        versionAuthorId: z.ZodNullable<z.ZodNumber>;
        instructions: z.ZodNullable<z.ZodString>;
        model: z.ZodObject<{
            providerId: z.ZodType<"openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks", z.ZodTypeDef, "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks">;
            modelId: z.ZodType<"gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1", z.ZodTypeDef, "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1">;
            temperature: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
            modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
            temperature: number;
        }, {
            providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
            modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
            temperature: number;
        }>;
        status: z.ZodUnion<[z.ZodType<"active" | "archived" | "draft", z.ZodTypeDef, "active" | "archived" | "draft">, z.ZodType<"active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace", z.ZodTypeDef, "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace">]>;
        scope: z.ZodType<"global" | "workspace" | "published" | "private", z.ZodTypeDef, "global" | "workspace" | "published" | "private">;
        userFavorite: z.ZodBoolean;
        name: z.ZodString;
        description: z.ZodString;
        pictureUrl: z.ZodString;
        lastAuthors: z.ZodOptional<z.ZodReadonly<z.ZodArray<z.ZodString, "many">>>;
        usage: z.ZodOptional<z.ZodObject<{
            messageCount: z.ZodNumber;
            conversationCount: z.ZodNumber;
            userCount: z.ZodNumber;
            timePeriodSec: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            messageCount: number;
            conversationCount: number;
            userCount: number;
            timePeriodSec: number;
        }, {
            messageCount: number;
            conversationCount: number;
            userCount: number;
            timePeriodSec: number;
        }>>;
        maxStepsPerRun: z.ZodNumber;
        visualizationEnabled: z.ZodBoolean;
        templateId: z.ZodNullable<z.ZodString>;
        groupIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        requestedGroupIds: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
    }, "strip", z.ZodTypeAny, {
        status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
        id: number;
        sId: string;
        name: string;
        description: string;
        versionCreatedAt: string | null;
        version: number;
        versionAuthorId: number | null;
        instructions: string | null;
        model: {
            providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
            modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
            temperature: number;
        };
        scope: "global" | "workspace" | "published" | "private";
        userFavorite: boolean;
        pictureUrl: string;
        maxStepsPerRun: number;
        visualizationEnabled: boolean;
        templateId: string | null;
        requestedGroupIds: string[][];
        lastAuthors?: readonly string[] | undefined;
        usage?: {
            messageCount: number;
            conversationCount: number;
            userCount: number;
            timePeriodSec: number;
        } | undefined;
        groupIds?: string[] | undefined;
    }, {
        status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
        id: number;
        sId: string;
        name: string;
        description: string;
        versionCreatedAt: string | null;
        version: number;
        versionAuthorId: number | null;
        instructions: string | null;
        model: {
            providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
            modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
            temperature: number;
        };
        scope: "global" | "workspace" | "published" | "private";
        userFavorite: boolean;
        pictureUrl: string;
        maxStepsPerRun: number;
        visualizationEnabled: boolean;
        templateId: string | null;
        requestedGroupIds: string[][];
        lastAuthors?: readonly string[] | undefined;
        usage?: {
            messageCount: number;
            conversationCount: number;
            userCount: number;
            timePeriodSec: number;
        } | undefined;
        groupIds?: string[] | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    agentConfigurations: {
        status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
        id: number;
        sId: string;
        name: string;
        description: string;
        versionCreatedAt: string | null;
        version: number;
        versionAuthorId: number | null;
        instructions: string | null;
        model: {
            providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
            modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
            temperature: number;
        };
        scope: "global" | "workspace" | "published" | "private";
        userFavorite: boolean;
        pictureUrl: string;
        maxStepsPerRun: number;
        visualizationEnabled: boolean;
        templateId: string | null;
        requestedGroupIds: string[][];
        lastAuthors?: readonly string[] | undefined;
        usage?: {
            messageCount: number;
            conversationCount: number;
            userCount: number;
            timePeriodSec: number;
        } | undefined;
        groupIds?: string[] | undefined;
    }[];
}, {
    agentConfigurations: {
        status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
        id: number;
        sId: string;
        name: string;
        description: string;
        versionCreatedAt: string | null;
        version: number;
        versionAuthorId: number | null;
        instructions: string | null;
        model: {
            providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
            modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
            temperature: number;
        };
        scope: "global" | "workspace" | "published" | "private";
        userFavorite: boolean;
        pictureUrl: string;
        maxStepsPerRun: number;
        visualizationEnabled: boolean;
        templateId: string | null;
        requestedGroupIds: string[][];
        lastAuthors?: readonly string[] | undefined;
        usage?: {
            messageCount: number;
            conversationCount: number;
            userCount: number;
            timePeriodSec: number;
        } | undefined;
        groupIds?: string[] | undefined;
    }[];
}>;
export type GetAgentConfigurationsResponseType = z.infer<typeof GetAgentConfigurationsResponseSchema>;
export declare const PostContentFragmentResponseSchema: z.ZodObject<{
    contentFragment: z.ZodObject<{
        id: z.ZodNumber;
        sId: z.ZodString;
        fileId: z.ZodNullable<z.ZodString>;
        created: z.ZodNumber;
        type: z.ZodLiteral<"content_fragment">;
        visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
        version: z.ZodNumber;
        sourceUrl: z.ZodNullable<z.ZodString>;
        textUrl: z.ZodString;
        textBytes: z.ZodNullable<z.ZodNumber>;
        title: z.ZodString;
        contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
        context: z.ZodObject<{
            username: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        }, {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        }>;
        contentFragmentId: z.ZodString;
        contentFragmentVersion: z.ZodUnion<[z.ZodLiteral<"latest">, z.ZodLiteral<"superseded">]>;
        contentNodeData: z.ZodNullable<z.ZodObject<{
            nodeId: z.ZodString;
            nodeDataSourceViewId: z.ZodString;
            nodeType: z.ZodUnion<[z.ZodLiteral<"document">, z.ZodLiteral<"table">, z.ZodLiteral<"folder">]>;
            provider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
            spaceName: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            nodeDataSourceViewId: string;
            nodeId: string;
            nodeType: "folder" | "table" | "document";
            spaceName: string;
        }, {
            provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            nodeDataSourceViewId: string;
            nodeId: string;
            nodeType: "folder" | "table" | "document";
            spaceName: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "content_fragment";
        id: number;
        sId: string;
        created: number;
        title: string;
        fileId: string | null;
        contentFragmentId: string;
        contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
        sourceUrl: string | null;
        version: number;
        visibility: "visible" | "deleted";
        textUrl: string;
        textBytes: number | null;
        context: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        };
        contentFragmentVersion: "latest" | "superseded";
        contentNodeData: {
            provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            nodeDataSourceViewId: string;
            nodeId: string;
            nodeType: "folder" | "table" | "document";
            spaceName: string;
        } | null;
    }, {
        type: "content_fragment";
        id: number;
        sId: string;
        created: number;
        title: string;
        fileId: string | null;
        contentFragmentId: string;
        contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
        sourceUrl: string | null;
        version: number;
        visibility: "visible" | "deleted";
        textUrl: string;
        textBytes: number | null;
        context: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        };
        contentFragmentVersion: "latest" | "superseded";
        contentNodeData: {
            provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            nodeDataSourceViewId: string;
            nodeId: string;
            nodeType: "folder" | "table" | "document";
            spaceName: string;
        } | null;
    }>;
}, "strip", z.ZodTypeAny, {
    contentFragment: {
        type: "content_fragment";
        id: number;
        sId: string;
        created: number;
        title: string;
        fileId: string | null;
        contentFragmentId: string;
        contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
        sourceUrl: string | null;
        version: number;
        visibility: "visible" | "deleted";
        textUrl: string;
        textBytes: number | null;
        context: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        };
        contentFragmentVersion: "latest" | "superseded";
        contentNodeData: {
            provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            nodeDataSourceViewId: string;
            nodeId: string;
            nodeType: "folder" | "table" | "document";
            spaceName: string;
        } | null;
    };
}, {
    contentFragment: {
        type: "content_fragment";
        id: number;
        sId: string;
        created: number;
        title: string;
        fileId: string | null;
        contentFragmentId: string;
        contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
        sourceUrl: string | null;
        version: number;
        visibility: "visible" | "deleted";
        textUrl: string;
        textBytes: number | null;
        context: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        };
        contentFragmentVersion: "latest" | "superseded";
        contentNodeData: {
            provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            nodeDataSourceViewId: string;
            nodeId: string;
            nodeType: "folder" | "table" | "document";
            spaceName: string;
        } | null;
    };
}>;
export type PostContentFragmentResponseType = z.infer<typeof PostContentFragmentResponseSchema>;
export declare const CreateConversationResponseSchema: z.ZodObject<{
    conversation: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        created: z.ZodNumber;
        updated: z.ZodOptional<z.ZodNumber>;
        owner: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            sId: z.ZodString;
            name: z.ZodString;
            role: z.ZodEnum<["admin", "builder", "user", "none"]>;
            segmentation: z.ZodNullable<z.ZodType<"interesting", z.ZodTypeDef, "interesting">>;
            whiteListedProviders: z.ZodNullable<z.ZodArray<z.ZodType<"openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks", z.ZodTypeDef, "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks">, "many">>;
            defaultEmbeddingProvider: z.ZodNullable<z.ZodType<"openai" | "mistral", z.ZodTypeDef, "openai" | "mistral">>;
        }, {
            ssoEnforced: z.ZodOptional<z.ZodBoolean>;
        }>, "strip", z.ZodTypeAny, {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        }, {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        }>;
        sId: z.ZodString;
        title: z.ZodNullable<z.ZodString>;
        visibility: z.ZodType<"deleted" | "workspace" | "unlisted" | "test", z.ZodTypeDef, "deleted" | "workspace" | "unlisted" | "test">;
        groupIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        requestedGroupIds: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
    }, {
        content: z.ZodArray<z.ZodUnion<[z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            created: z.ZodNumber;
            type: z.ZodLiteral<"user_message">;
            sId: z.ZodString;
            visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
            version: z.ZodNumber;
            user: z.ZodNullable<z.ZodObject<{
                sId: z.ZodString;
                id: z.ZodNumber;
                createdAt: z.ZodNumber;
                provider: z.ZodNullable<z.ZodType<"github" | "google" | "auth0" | "okta" | "samlp" | "waad", z.ZodTypeDef, "github" | "google" | "auth0" | "okta" | "samlp" | "waad">>;
                username: z.ZodString;
                email: z.ZodString;
                firstName: z.ZodString;
                lastName: z.ZodNullable<z.ZodString>;
                fullName: z.ZodString;
                image: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            }, {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            }>>;
            mentions: z.ZodArray<z.ZodObject<{
                configurationId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                configurationId: string;
            }, {
                configurationId: string;
            }>, "many">;
            content: z.ZodString;
            context: z.ZodObject<{
                username: z.ZodString;
                timezone: z.ZodEffects<z.ZodString, string, string>;
                fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                origin: z.ZodUnion<[z.ZodUnion<[z.ZodType<"slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email", z.ZodTypeDef, "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email">, z.ZodNull]>, z.ZodUndefined]>;
                localMCPServerIds: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
            }, "strip", z.ZodTypeAny, {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            }, {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        }, {
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        }>, "many">, z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            agentMessageId: z.ZodNumber;
            created: z.ZodNumber;
            type: z.ZodLiteral<"agent_message">;
            sId: z.ZodString;
            visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
            version: z.ZodNumber;
            parentMessageId: z.ZodNullable<z.ZodString>;
            configuration: z.ZodObject<{
                id: z.ZodNumber;
                versionCreatedAt: z.ZodNullable<z.ZodString>;
                sId: z.ZodString;
                version: z.ZodNumber;
                versionAuthorId: z.ZodNullable<z.ZodNumber>;
                instructions: z.ZodNullable<z.ZodString>;
                model: z.ZodObject<{
                    providerId: z.ZodType<"openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks", z.ZodTypeDef, "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks">;
                    modelId: z.ZodType<"gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1", z.ZodTypeDef, "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1">;
                    temperature: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                }, {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                }>;
                status: z.ZodUnion<[z.ZodType<"active" | "archived" | "draft", z.ZodTypeDef, "active" | "archived" | "draft">, z.ZodType<"active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace", z.ZodTypeDef, "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace">]>;
                scope: z.ZodType<"global" | "workspace" | "published" | "private", z.ZodTypeDef, "global" | "workspace" | "published" | "private">;
                userFavorite: z.ZodBoolean;
                name: z.ZodString;
                description: z.ZodString;
                pictureUrl: z.ZodString;
                lastAuthors: z.ZodOptional<z.ZodReadonly<z.ZodArray<z.ZodString, "many">>>;
                usage: z.ZodOptional<z.ZodObject<{
                    messageCount: z.ZodNumber;
                    conversationCount: z.ZodNumber;
                    userCount: z.ZodNumber;
                    timePeriodSec: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                }, {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                }>>;
                maxStepsPerRun: z.ZodNumber;
                visualizationEnabled: z.ZodBoolean;
                templateId: z.ZodNullable<z.ZodString>;
                groupIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                requestedGroupIds: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
            }, "strip", z.ZodTypeAny, {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            }, {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            }>;
            status: z.ZodType<"created" | "succeeded" | "failed" | "cancelled", z.ZodTypeDef, "created" | "succeeded" | "failed" | "cancelled">;
            actions: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                params: z.ZodObject<{
                    relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                        duration: z.ZodNumber;
                        unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
                    }, "strip", z.ZodTypeAny, {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    }, {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    }>>;
                    query: z.ZodNullable<z.ZodString>;
                    topK: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                }, {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                }>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                documents: z.ZodNullable<z.ZodArray<z.ZodObject<{
                    chunks: z.ZodArray<z.ZodObject<{
                        offset: z.ZodNumber;
                        score: z.ZodNullable<z.ZodNumber>;
                        text: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        text: string;
                        offset: number;
                        score: number | null;
                    }, {
                        text: string;
                        offset: number;
                        score: number | null;
                    }>, "many">;
                    documentId: z.ZodString;
                    dataSourceView: z.ZodNullable<z.ZodObject<{
                        category: z.ZodType<"folder" | "managed" | "website" | "apps" | "actions", z.ZodTypeDef, "folder" | "managed" | "website" | "apps" | "actions">;
                        createdAt: z.ZodNumber;
                        dataSource: z.ZodObject<{
                            id: z.ZodNumber;
                            sId: z.ZodString;
                            createdAt: z.ZodNumber;
                            name: z.ZodString;
                            description: z.ZodNullable<z.ZodString>;
                            assistantDefaultSelected: z.ZodBoolean;
                            dustAPIProjectId: z.ZodString;
                            dustAPIDataSourceId: z.ZodString;
                            connectorId: z.ZodNullable<z.ZodString>;
                            connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
                            editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                                editedAt: z.ZodNullable<z.ZodNumber>;
                                fullName: z.ZodNullable<z.ZodString>;
                                imageUrl: z.ZodNullable<z.ZodString>;
                                email: z.ZodNullable<z.ZodString>;
                                userId: z.ZodNullable<z.ZodString>;
                            }, "strip", z.ZodTypeAny, {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            }, {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            }>>>;
                        }, "strip", z.ZodTypeAny, {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        }, {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        }>;
                        editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                            editedAt: z.ZodNullable<z.ZodNumber>;
                            fullName: z.ZodNullable<z.ZodString>;
                            imageUrl: z.ZodNullable<z.ZodString>;
                            email: z.ZodNullable<z.ZodString>;
                            userId: z.ZodNullable<z.ZodString>;
                        }, "strip", z.ZodTypeAny, {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        }, {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        }>>>;
                        id: z.ZodNumber;
                        kind: z.ZodType<"custom" | "default", z.ZodTypeDef, "custom" | "default">;
                        parentsIn: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
                        sId: z.ZodString;
                        updatedAt: z.ZodNumber;
                        spaceId: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    }, {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    }>>;
                    id: z.ZodNumber;
                    reference: z.ZodString;
                    score: z.ZodNullable<z.ZodNumber>;
                    sourceUrl: z.ZodNullable<z.ZodString>;
                    tags: z.ZodArray<z.ZodString, "many">;
                    timestamp: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }, {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }>, "many">>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"retrieval_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            }, {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            }>, z.ZodEffects<z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                appWorkspaceId: z.ZodString;
                appId: z.ZodString;
                appName: z.ZodString;
                params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
                runningBlock: z.ZodNullable<z.ZodObject<{
                    type: z.ZodString;
                    name: z.ZodString;
                    status: z.ZodEnum<["running", "succeeded", "errored"]>;
                }, "strip", z.ZodTypeAny, {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                }, {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                }>>;
                output: z.ZodNullable<z.ZodUnknown>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"dust_app_run_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            }, {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            }>, {
                output: unknown;
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
            }, {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
                output: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
                resultsFileId: z.ZodNullable<z.ZodString>;
                resultsFileSnippet: z.ZodNullable<z.ZodString>;
                sectionFileId: z.ZodNullable<z.ZodString>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                agentMessageId: z.ZodNumber;
                step: z.ZodNumber;
                type: z.ZodLiteral<"tables_query_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            }, {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                params: z.ZodObject<{
                    relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                        duration: z.ZodNumber;
                        unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
                    }, "strip", z.ZodTypeAny, {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    }, {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                }, {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                }>;
                schema: z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    type: z.ZodEnum<["string", "number", "boolean"]>;
                    description: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }, {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }>, "many">;
                outputs: z.ZodNullable<z.ZodObject<{
                    data: z.ZodArray<z.ZodUnknown, "many">;
                    min_timestamp: z.ZodNumber;
                    total_documents: z.ZodNumber;
                    total_chunks: z.ZodNumber;
                    total_tokens: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                }, {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                }>>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"process_action">;
            }>, "strip", z.ZodTypeAny, {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            }, {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                query: z.ZodString;
                output: z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    results: z.ZodArray<z.ZodObject<{
                        title: z.ZodString;
                        snippet: z.ZodString;
                        link: z.ZodString;
                        reference: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }, {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }>, "many">;
                }, "strip", z.ZodTypeAny, {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                }, {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                }>, z.ZodObject<{
                    results: z.ZodArray<z.ZodObject<{
                        title: z.ZodString;
                        snippet: z.ZodString;
                        link: z.ZodString;
                        reference: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }, {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }>, "many">;
                    error: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                }, {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                }>]>>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"websearch_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            }, {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                urls: z.ZodArray<z.ZodString, "many">;
                output: z.ZodNullable<z.ZodObject<{
                    results: z.ZodArray<z.ZodObject<{
                        requestedUrl: z.ZodString;
                        browsedUrl: z.ZodString;
                        content: z.ZodString;
                        responseCode: z.ZodString;
                        errorMessage: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }, {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }>, "many">;
                }, "strip", z.ZodTypeAny, {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                }, {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                }>>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"browse_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            }, {
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                files: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    fileId: z.ZodString;
                    contentFragmentId: z.ZodUndefined;
                    nodeDataSourceViewId: z.ZodUndefined;
                    title: z.ZodString;
                    contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
                }, "strip", z.ZodTypeAny, {
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                }, {
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                }>, z.ZodObject<{
                    fileId: z.ZodUndefined;
                    contentFragmentId: z.ZodString;
                    nodeDataSourceViewId: z.ZodString;
                    title: z.ZodString;
                    contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
                }, "strip", z.ZodTypeAny, {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                }, {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                }>]>, "many">;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                agentMessageId: z.ZodNumber;
                step: z.ZodNumber;
                type: z.ZodLiteral<"conversation_list_files_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            }, {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                params: z.ZodObject<{
                    fileId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    fileId: string;
                }, {
                    fileId: string;
                }>;
                tokensCount: z.ZodNullable<z.ZodNumber>;
                fileTitle: z.ZodNullable<z.ZodString>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"conversation_include_file_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            }, {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                output: z.ZodNullable<z.ZodString>;
                thinking: z.ZodNullable<z.ZodString>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"reasoning_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            }, {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                output: z.ZodNullable<z.ZodObject<{
                    tags: z.ZodArray<z.ZodObject<{
                        tag: z.ZodString;
                        match_count: z.ZodNumber;
                        data_sources: z.ZodArray<z.ZodString, "many">;
                    }, "strip", z.ZodTypeAny, {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }, {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }>, "many">;
                }, "strip", z.ZodTypeAny, {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                }, {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                }>>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"search_labels_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            }, {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                functionCallName: z.ZodNullable<z.ZodString>;
                params: z.ZodUnknown;
                type: z.ZodLiteral<"tool_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            }, {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            }>]>, "many">;
            content: z.ZodNullable<z.ZodString>;
            chainOfThought: z.ZodNullable<z.ZodString>;
            rawContents: z.ZodArray<z.ZodObject<{
                step: z.ZodNumber;
                content: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                content: string;
                step: number;
            }, {
                content: string;
                step: number;
            }>, "many">;
            error: z.ZodNullable<z.ZodObject<{
                code: z.ZodString;
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
                code: string;
            }, {
                message: string;
                code: string;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                output: unknown;
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        }, {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        }>, "many">, z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            sId: z.ZodString;
            fileId: z.ZodNullable<z.ZodString>;
            created: z.ZodNumber;
            type: z.ZodLiteral<"content_fragment">;
            visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
            version: z.ZodNumber;
            sourceUrl: z.ZodNullable<z.ZodString>;
            textUrl: z.ZodString;
            textBytes: z.ZodNullable<z.ZodNumber>;
            title: z.ZodString;
            contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
            context: z.ZodObject<{
                username: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            }, {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            }>;
            contentFragmentId: z.ZodString;
            contentFragmentVersion: z.ZodUnion<[z.ZodLiteral<"latest">, z.ZodLiteral<"superseded">]>;
            contentNodeData: z.ZodNullable<z.ZodObject<{
                nodeId: z.ZodString;
                nodeDataSourceViewId: z.ZodString;
                nodeType: z.ZodUnion<[z.ZodLiteral<"document">, z.ZodLiteral<"table">, z.ZodLiteral<"folder">]>;
                provider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
                spaceName: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            }, {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "content_fragment";
            id: number;
            sId: string;
            created: number;
            title: string;
            fileId: string | null;
            contentFragmentId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            sourceUrl: string | null;
            version: number;
            visibility: "visible" | "deleted";
            textUrl: string;
            textBytes: number | null;
            context: {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            };
            contentFragmentVersion: "latest" | "superseded";
            contentNodeData: {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            } | null;
        }, {
            type: "content_fragment";
            id: number;
            sId: string;
            created: number;
            title: string;
            fileId: string | null;
            contentFragmentId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            sourceUrl: string | null;
            version: number;
            visibility: "visible" | "deleted";
            textUrl: string;
            textBytes: number | null;
            context: {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            };
            contentFragmentVersion: "latest" | "superseded";
            contentNodeData: {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            } | null;
        }>, "many">]>, "many">;
    }>, "strip", z.ZodTypeAny, {
        id: number;
        sId: string;
        created: number;
        title: string | null;
        content: ({
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        }[] | {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                output: unknown;
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        }[] | {
            type: "content_fragment";
            id: number;
            sId: string;
            created: number;
            title: string;
            fileId: string | null;
            contentFragmentId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            sourceUrl: string | null;
            version: number;
            visibility: "visible" | "deleted";
            textUrl: string;
            textBytes: number | null;
            context: {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            };
            contentFragmentVersion: "latest" | "superseded";
            contentNodeData: {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            } | null;
        }[])[];
        requestedGroupIds: string[][];
        visibility: "deleted" | "workspace" | "unlisted" | "test";
        owner: {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        };
        groupIds?: string[] | undefined;
        updated?: number | undefined;
    }, {
        id: number;
        sId: string;
        created: number;
        title: string | null;
        content: ({
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        }[] | {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        }[] | {
            type: "content_fragment";
            id: number;
            sId: string;
            created: number;
            title: string;
            fileId: string | null;
            contentFragmentId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            sourceUrl: string | null;
            version: number;
            visibility: "visible" | "deleted";
            textUrl: string;
            textBytes: number | null;
            context: {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            };
            contentFragmentVersion: "latest" | "superseded";
            contentNodeData: {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            } | null;
        }[])[];
        requestedGroupIds: string[][];
        visibility: "deleted" | "workspace" | "unlisted" | "test";
        owner: {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        };
        groupIds?: string[] | undefined;
        updated?: number | undefined;
    }>;
    message: z.ZodObject<{
        id: z.ZodNumber;
        created: z.ZodNumber;
        type: z.ZodLiteral<"user_message">;
        sId: z.ZodString;
        visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
        version: z.ZodNumber;
        user: z.ZodNullable<z.ZodObject<{
            sId: z.ZodString;
            id: z.ZodNumber;
            createdAt: z.ZodNumber;
            provider: z.ZodNullable<z.ZodType<"github" | "google" | "auth0" | "okta" | "samlp" | "waad", z.ZodTypeDef, "github" | "google" | "auth0" | "okta" | "samlp" | "waad">>;
            username: z.ZodString;
            email: z.ZodString;
            firstName: z.ZodString;
            lastName: z.ZodNullable<z.ZodString>;
            fullName: z.ZodString;
            image: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        }, {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        }>>;
        mentions: z.ZodArray<z.ZodObject<{
            configurationId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            configurationId: string;
        }, {
            configurationId: string;
        }>, "many">;
        content: z.ZodString;
        context: z.ZodObject<{
            username: z.ZodString;
            timezone: z.ZodEffects<z.ZodString, string, string>;
            fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            origin: z.ZodUnion<[z.ZodUnion<[z.ZodType<"slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email", z.ZodTypeDef, "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email">, z.ZodNull]>, z.ZodUndefined]>;
            localMCPServerIds: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        }, {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "user_message";
        id: number;
        sId: string;
        created: number;
        content: string;
        user: {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        } | null;
        version: number;
        visibility: "visible" | "deleted";
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    }, {
        type: "user_message";
        id: number;
        sId: string;
        created: number;
        content: string;
        user: {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        } | null;
        version: number;
        visibility: "visible" | "deleted";
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    }>;
}, "strip", z.ZodTypeAny, {
    conversation: {
        id: number;
        sId: string;
        created: number;
        title: string | null;
        content: ({
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        }[] | {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                output: unknown;
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        }[] | {
            type: "content_fragment";
            id: number;
            sId: string;
            created: number;
            title: string;
            fileId: string | null;
            contentFragmentId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            sourceUrl: string | null;
            version: number;
            visibility: "visible" | "deleted";
            textUrl: string;
            textBytes: number | null;
            context: {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            };
            contentFragmentVersion: "latest" | "superseded";
            contentNodeData: {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            } | null;
        }[])[];
        requestedGroupIds: string[][];
        visibility: "deleted" | "workspace" | "unlisted" | "test";
        owner: {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        };
        groupIds?: string[] | undefined;
        updated?: number | undefined;
    };
    message: {
        type: "user_message";
        id: number;
        sId: string;
        created: number;
        content: string;
        user: {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        } | null;
        version: number;
        visibility: "visible" | "deleted";
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    };
}, {
    conversation: {
        id: number;
        sId: string;
        created: number;
        title: string | null;
        content: ({
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        }[] | {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        }[] | {
            type: "content_fragment";
            id: number;
            sId: string;
            created: number;
            title: string;
            fileId: string | null;
            contentFragmentId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            sourceUrl: string | null;
            version: number;
            visibility: "visible" | "deleted";
            textUrl: string;
            textBytes: number | null;
            context: {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            };
            contentFragmentVersion: "latest" | "superseded";
            contentNodeData: {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            } | null;
        }[])[];
        requestedGroupIds: string[][];
        visibility: "deleted" | "workspace" | "unlisted" | "test";
        owner: {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        };
        groupIds?: string[] | undefined;
        updated?: number | undefined;
    };
    message: {
        type: "user_message";
        id: number;
        sId: string;
        created: number;
        content: string;
        user: {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        } | null;
        version: number;
        visibility: "visible" | "deleted";
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    };
}>;
export type CreateConversationResponseType = z.infer<typeof CreateConversationResponseSchema>;
export declare const GetFeedbacksResponseSchema: z.ZodObject<{
    feedbacks: z.ZodArray<z.ZodObject<{
        messageId: z.ZodString;
        agentMessageId: z.ZodNumber;
        userId: z.ZodNumber;
        thumbDirection: z.ZodUnion<[z.ZodLiteral<"up">, z.ZodLiteral<"down">]>;
        content: z.ZodNullable<z.ZodString>;
        createdAt: z.ZodNumber;
        agentConfigurationId: z.ZodString;
        agentConfigurationVersion: z.ZodNumber;
        isConversationShared: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        userId: number;
        createdAt: number;
        messageId: string;
        content: string | null;
        agentMessageId: number;
        thumbDirection: "up" | "down";
        agentConfigurationId: string;
        agentConfigurationVersion: number;
        isConversationShared: boolean;
    }, {
        userId: number;
        createdAt: number;
        messageId: string;
        content: string | null;
        agentMessageId: number;
        thumbDirection: "up" | "down";
        agentConfigurationId: string;
        agentConfigurationVersion: number;
        isConversationShared: boolean;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    feedbacks: {
        userId: number;
        createdAt: number;
        messageId: string;
        content: string | null;
        agentMessageId: number;
        thumbDirection: "up" | "down";
        agentConfigurationId: string;
        agentConfigurationVersion: number;
        isConversationShared: boolean;
    }[];
}, {
    feedbacks: {
        userId: number;
        createdAt: number;
        messageId: string;
        content: string | null;
        agentMessageId: number;
        thumbDirection: "up" | "down";
        agentConfigurationId: string;
        agentConfigurationVersion: number;
        isConversationShared: boolean;
    }[];
}>;
export type GetFeedbacksResponseType = z.infer<typeof GetFeedbacksResponseSchema>;
export declare const PublicPostMessageFeedbackRequestBodySchema: z.ZodObject<{
    thumbDirection: z.ZodString;
    feedbackContent: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    isConversationShared: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    thumbDirection: string;
    isConversationShared?: boolean | undefined;
    feedbackContent?: string | null | undefined;
}, {
    thumbDirection: string;
    isConversationShared?: boolean | undefined;
    feedbackContent?: string | null | undefined;
}>;
export type PublicPostMessageFeedbackRequestBody = z.infer<typeof PublicPostMessageFeedbackRequestBodySchema>;
export declare const PostMessageFeedbackResponseSchema: z.ZodObject<{
    success: z.ZodLiteral<true>;
}, "strip", z.ZodTypeAny, {
    success: true;
}, {
    success: true;
}>;
export declare const PostUserMessageResponseSchema: z.ZodObject<{
    message: z.ZodObject<{
        id: z.ZodNumber;
        created: z.ZodNumber;
        type: z.ZodLiteral<"user_message">;
        sId: z.ZodString;
        visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
        version: z.ZodNumber;
        user: z.ZodNullable<z.ZodObject<{
            sId: z.ZodString;
            id: z.ZodNumber;
            createdAt: z.ZodNumber;
            provider: z.ZodNullable<z.ZodType<"github" | "google" | "auth0" | "okta" | "samlp" | "waad", z.ZodTypeDef, "github" | "google" | "auth0" | "okta" | "samlp" | "waad">>;
            username: z.ZodString;
            email: z.ZodString;
            firstName: z.ZodString;
            lastName: z.ZodNullable<z.ZodString>;
            fullName: z.ZodString;
            image: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        }, {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        }>>;
        mentions: z.ZodArray<z.ZodObject<{
            configurationId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            configurationId: string;
        }, {
            configurationId: string;
        }>, "many">;
        content: z.ZodString;
        context: z.ZodObject<{
            username: z.ZodString;
            timezone: z.ZodEffects<z.ZodString, string, string>;
            fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            origin: z.ZodUnion<[z.ZodUnion<[z.ZodType<"slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email", z.ZodTypeDef, "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email">, z.ZodNull]>, z.ZodUndefined]>;
            localMCPServerIds: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        }, {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "user_message";
        id: number;
        sId: string;
        created: number;
        content: string;
        user: {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        } | null;
        version: number;
        visibility: "visible" | "deleted";
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    }, {
        type: "user_message";
        id: number;
        sId: string;
        created: number;
        content: string;
        user: {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        } | null;
        version: number;
        visibility: "visible" | "deleted";
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    }>;
}, "strip", z.ZodTypeAny, {
    message: {
        type: "user_message";
        id: number;
        sId: string;
        created: number;
        content: string;
        user: {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        } | null;
        version: number;
        visibility: "visible" | "deleted";
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    };
}, {
    message: {
        type: "user_message";
        id: number;
        sId: string;
        created: number;
        content: string;
        user: {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        } | null;
        version: number;
        visibility: "visible" | "deleted";
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    };
}>;
export type PostUserMessageResponseType = z.infer<typeof PostUserMessageResponseSchema>;
export declare const GetConversationResponseSchema: z.ZodObject<{
    conversation: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        created: z.ZodNumber;
        updated: z.ZodOptional<z.ZodNumber>;
        owner: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            sId: z.ZodString;
            name: z.ZodString;
            role: z.ZodEnum<["admin", "builder", "user", "none"]>;
            segmentation: z.ZodNullable<z.ZodType<"interesting", z.ZodTypeDef, "interesting">>;
            whiteListedProviders: z.ZodNullable<z.ZodArray<z.ZodType<"openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks", z.ZodTypeDef, "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks">, "many">>;
            defaultEmbeddingProvider: z.ZodNullable<z.ZodType<"openai" | "mistral", z.ZodTypeDef, "openai" | "mistral">>;
        }, {
            ssoEnforced: z.ZodOptional<z.ZodBoolean>;
        }>, "strip", z.ZodTypeAny, {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        }, {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        }>;
        sId: z.ZodString;
        title: z.ZodNullable<z.ZodString>;
        visibility: z.ZodType<"deleted" | "workspace" | "unlisted" | "test", z.ZodTypeDef, "deleted" | "workspace" | "unlisted" | "test">;
        groupIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        requestedGroupIds: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
    }, {
        content: z.ZodArray<z.ZodUnion<[z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            created: z.ZodNumber;
            type: z.ZodLiteral<"user_message">;
            sId: z.ZodString;
            visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
            version: z.ZodNumber;
            user: z.ZodNullable<z.ZodObject<{
                sId: z.ZodString;
                id: z.ZodNumber;
                createdAt: z.ZodNumber;
                provider: z.ZodNullable<z.ZodType<"github" | "google" | "auth0" | "okta" | "samlp" | "waad", z.ZodTypeDef, "github" | "google" | "auth0" | "okta" | "samlp" | "waad">>;
                username: z.ZodString;
                email: z.ZodString;
                firstName: z.ZodString;
                lastName: z.ZodNullable<z.ZodString>;
                fullName: z.ZodString;
                image: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            }, {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            }>>;
            mentions: z.ZodArray<z.ZodObject<{
                configurationId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                configurationId: string;
            }, {
                configurationId: string;
            }>, "many">;
            content: z.ZodString;
            context: z.ZodObject<{
                username: z.ZodString;
                timezone: z.ZodEffects<z.ZodString, string, string>;
                fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                origin: z.ZodUnion<[z.ZodUnion<[z.ZodType<"slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email", z.ZodTypeDef, "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email">, z.ZodNull]>, z.ZodUndefined]>;
                localMCPServerIds: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
            }, "strip", z.ZodTypeAny, {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            }, {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        }, {
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        }>, "many">, z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            agentMessageId: z.ZodNumber;
            created: z.ZodNumber;
            type: z.ZodLiteral<"agent_message">;
            sId: z.ZodString;
            visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
            version: z.ZodNumber;
            parentMessageId: z.ZodNullable<z.ZodString>;
            configuration: z.ZodObject<{
                id: z.ZodNumber;
                versionCreatedAt: z.ZodNullable<z.ZodString>;
                sId: z.ZodString;
                version: z.ZodNumber;
                versionAuthorId: z.ZodNullable<z.ZodNumber>;
                instructions: z.ZodNullable<z.ZodString>;
                model: z.ZodObject<{
                    providerId: z.ZodType<"openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks", z.ZodTypeDef, "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks">;
                    modelId: z.ZodType<"gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1", z.ZodTypeDef, "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1">;
                    temperature: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                }, {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                }>;
                status: z.ZodUnion<[z.ZodType<"active" | "archived" | "draft", z.ZodTypeDef, "active" | "archived" | "draft">, z.ZodType<"active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace", z.ZodTypeDef, "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace">]>;
                scope: z.ZodType<"global" | "workspace" | "published" | "private", z.ZodTypeDef, "global" | "workspace" | "published" | "private">;
                userFavorite: z.ZodBoolean;
                name: z.ZodString;
                description: z.ZodString;
                pictureUrl: z.ZodString;
                lastAuthors: z.ZodOptional<z.ZodReadonly<z.ZodArray<z.ZodString, "many">>>;
                usage: z.ZodOptional<z.ZodObject<{
                    messageCount: z.ZodNumber;
                    conversationCount: z.ZodNumber;
                    userCount: z.ZodNumber;
                    timePeriodSec: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                }, {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                }>>;
                maxStepsPerRun: z.ZodNumber;
                visualizationEnabled: z.ZodBoolean;
                templateId: z.ZodNullable<z.ZodString>;
                groupIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                requestedGroupIds: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
            }, "strip", z.ZodTypeAny, {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            }, {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            }>;
            status: z.ZodType<"created" | "succeeded" | "failed" | "cancelled", z.ZodTypeDef, "created" | "succeeded" | "failed" | "cancelled">;
            actions: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                params: z.ZodObject<{
                    relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                        duration: z.ZodNumber;
                        unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
                    }, "strip", z.ZodTypeAny, {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    }, {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    }>>;
                    query: z.ZodNullable<z.ZodString>;
                    topK: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                }, {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                }>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                documents: z.ZodNullable<z.ZodArray<z.ZodObject<{
                    chunks: z.ZodArray<z.ZodObject<{
                        offset: z.ZodNumber;
                        score: z.ZodNullable<z.ZodNumber>;
                        text: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        text: string;
                        offset: number;
                        score: number | null;
                    }, {
                        text: string;
                        offset: number;
                        score: number | null;
                    }>, "many">;
                    documentId: z.ZodString;
                    dataSourceView: z.ZodNullable<z.ZodObject<{
                        category: z.ZodType<"folder" | "managed" | "website" | "apps" | "actions", z.ZodTypeDef, "folder" | "managed" | "website" | "apps" | "actions">;
                        createdAt: z.ZodNumber;
                        dataSource: z.ZodObject<{
                            id: z.ZodNumber;
                            sId: z.ZodString;
                            createdAt: z.ZodNumber;
                            name: z.ZodString;
                            description: z.ZodNullable<z.ZodString>;
                            assistantDefaultSelected: z.ZodBoolean;
                            dustAPIProjectId: z.ZodString;
                            dustAPIDataSourceId: z.ZodString;
                            connectorId: z.ZodNullable<z.ZodString>;
                            connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
                            editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                                editedAt: z.ZodNullable<z.ZodNumber>;
                                fullName: z.ZodNullable<z.ZodString>;
                                imageUrl: z.ZodNullable<z.ZodString>;
                                email: z.ZodNullable<z.ZodString>;
                                userId: z.ZodNullable<z.ZodString>;
                            }, "strip", z.ZodTypeAny, {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            }, {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            }>>>;
                        }, "strip", z.ZodTypeAny, {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        }, {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        }>;
                        editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                            editedAt: z.ZodNullable<z.ZodNumber>;
                            fullName: z.ZodNullable<z.ZodString>;
                            imageUrl: z.ZodNullable<z.ZodString>;
                            email: z.ZodNullable<z.ZodString>;
                            userId: z.ZodNullable<z.ZodString>;
                        }, "strip", z.ZodTypeAny, {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        }, {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        }>>>;
                        id: z.ZodNumber;
                        kind: z.ZodType<"custom" | "default", z.ZodTypeDef, "custom" | "default">;
                        parentsIn: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
                        sId: z.ZodString;
                        updatedAt: z.ZodNumber;
                        spaceId: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    }, {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    }>>;
                    id: z.ZodNumber;
                    reference: z.ZodString;
                    score: z.ZodNullable<z.ZodNumber>;
                    sourceUrl: z.ZodNullable<z.ZodString>;
                    tags: z.ZodArray<z.ZodString, "many">;
                    timestamp: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }, {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }>, "many">>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"retrieval_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            }, {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            }>, z.ZodEffects<z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                appWorkspaceId: z.ZodString;
                appId: z.ZodString;
                appName: z.ZodString;
                params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
                runningBlock: z.ZodNullable<z.ZodObject<{
                    type: z.ZodString;
                    name: z.ZodString;
                    status: z.ZodEnum<["running", "succeeded", "errored"]>;
                }, "strip", z.ZodTypeAny, {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                }, {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                }>>;
                output: z.ZodNullable<z.ZodUnknown>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"dust_app_run_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            }, {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            }>, {
                output: unknown;
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
            }, {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
                output: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
                resultsFileId: z.ZodNullable<z.ZodString>;
                resultsFileSnippet: z.ZodNullable<z.ZodString>;
                sectionFileId: z.ZodNullable<z.ZodString>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                agentMessageId: z.ZodNumber;
                step: z.ZodNumber;
                type: z.ZodLiteral<"tables_query_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            }, {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                params: z.ZodObject<{
                    relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                        duration: z.ZodNumber;
                        unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
                    }, "strip", z.ZodTypeAny, {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    }, {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                }, {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                }>;
                schema: z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    type: z.ZodEnum<["string", "number", "boolean"]>;
                    description: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }, {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }>, "many">;
                outputs: z.ZodNullable<z.ZodObject<{
                    data: z.ZodArray<z.ZodUnknown, "many">;
                    min_timestamp: z.ZodNumber;
                    total_documents: z.ZodNumber;
                    total_chunks: z.ZodNumber;
                    total_tokens: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                }, {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                }>>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"process_action">;
            }>, "strip", z.ZodTypeAny, {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            }, {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                query: z.ZodString;
                output: z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    results: z.ZodArray<z.ZodObject<{
                        title: z.ZodString;
                        snippet: z.ZodString;
                        link: z.ZodString;
                        reference: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }, {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }>, "many">;
                }, "strip", z.ZodTypeAny, {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                }, {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                }>, z.ZodObject<{
                    results: z.ZodArray<z.ZodObject<{
                        title: z.ZodString;
                        snippet: z.ZodString;
                        link: z.ZodString;
                        reference: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }, {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }>, "many">;
                    error: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                }, {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                }>]>>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"websearch_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            }, {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                urls: z.ZodArray<z.ZodString, "many">;
                output: z.ZodNullable<z.ZodObject<{
                    results: z.ZodArray<z.ZodObject<{
                        requestedUrl: z.ZodString;
                        browsedUrl: z.ZodString;
                        content: z.ZodString;
                        responseCode: z.ZodString;
                        errorMessage: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }, {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }>, "many">;
                }, "strip", z.ZodTypeAny, {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                }, {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                }>>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"browse_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            }, {
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                files: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    fileId: z.ZodString;
                    contentFragmentId: z.ZodUndefined;
                    nodeDataSourceViewId: z.ZodUndefined;
                    title: z.ZodString;
                    contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
                }, "strip", z.ZodTypeAny, {
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                }, {
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                }>, z.ZodObject<{
                    fileId: z.ZodUndefined;
                    contentFragmentId: z.ZodString;
                    nodeDataSourceViewId: z.ZodString;
                    title: z.ZodString;
                    contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
                }, "strip", z.ZodTypeAny, {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                }, {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                }>]>, "many">;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                agentMessageId: z.ZodNumber;
                step: z.ZodNumber;
                type: z.ZodLiteral<"conversation_list_files_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            }, {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                params: z.ZodObject<{
                    fileId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    fileId: string;
                }, {
                    fileId: string;
                }>;
                tokensCount: z.ZodNullable<z.ZodNumber>;
                fileTitle: z.ZodNullable<z.ZodString>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"conversation_include_file_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            }, {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                output: z.ZodNullable<z.ZodString>;
                thinking: z.ZodNullable<z.ZodString>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"reasoning_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            }, {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                output: z.ZodNullable<z.ZodObject<{
                    tags: z.ZodArray<z.ZodObject<{
                        tag: z.ZodString;
                        match_count: z.ZodNumber;
                        data_sources: z.ZodArray<z.ZodString, "many">;
                    }, "strip", z.ZodTypeAny, {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }, {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }>, "many">;
                }, "strip", z.ZodTypeAny, {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                }, {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                }>>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"search_labels_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            }, {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                functionCallName: z.ZodNullable<z.ZodString>;
                params: z.ZodUnknown;
                type: z.ZodLiteral<"tool_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            }, {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            }>]>, "many">;
            content: z.ZodNullable<z.ZodString>;
            chainOfThought: z.ZodNullable<z.ZodString>;
            rawContents: z.ZodArray<z.ZodObject<{
                step: z.ZodNumber;
                content: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                content: string;
                step: number;
            }, {
                content: string;
                step: number;
            }>, "many">;
            error: z.ZodNullable<z.ZodObject<{
                code: z.ZodString;
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
                code: string;
            }, {
                message: string;
                code: string;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                output: unknown;
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        }, {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        }>, "many">, z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            sId: z.ZodString;
            fileId: z.ZodNullable<z.ZodString>;
            created: z.ZodNumber;
            type: z.ZodLiteral<"content_fragment">;
            visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
            version: z.ZodNumber;
            sourceUrl: z.ZodNullable<z.ZodString>;
            textUrl: z.ZodString;
            textBytes: z.ZodNullable<z.ZodNumber>;
            title: z.ZodString;
            contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
            context: z.ZodObject<{
                username: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            }, {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            }>;
            contentFragmentId: z.ZodString;
            contentFragmentVersion: z.ZodUnion<[z.ZodLiteral<"latest">, z.ZodLiteral<"superseded">]>;
            contentNodeData: z.ZodNullable<z.ZodObject<{
                nodeId: z.ZodString;
                nodeDataSourceViewId: z.ZodString;
                nodeType: z.ZodUnion<[z.ZodLiteral<"document">, z.ZodLiteral<"table">, z.ZodLiteral<"folder">]>;
                provider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
                spaceName: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            }, {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "content_fragment";
            id: number;
            sId: string;
            created: number;
            title: string;
            fileId: string | null;
            contentFragmentId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            sourceUrl: string | null;
            version: number;
            visibility: "visible" | "deleted";
            textUrl: string;
            textBytes: number | null;
            context: {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            };
            contentFragmentVersion: "latest" | "superseded";
            contentNodeData: {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            } | null;
        }, {
            type: "content_fragment";
            id: number;
            sId: string;
            created: number;
            title: string;
            fileId: string | null;
            contentFragmentId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            sourceUrl: string | null;
            version: number;
            visibility: "visible" | "deleted";
            textUrl: string;
            textBytes: number | null;
            context: {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            };
            contentFragmentVersion: "latest" | "superseded";
            contentNodeData: {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            } | null;
        }>, "many">]>, "many">;
    }>, "strip", z.ZodTypeAny, {
        id: number;
        sId: string;
        created: number;
        title: string | null;
        content: ({
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        }[] | {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                output: unknown;
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        }[] | {
            type: "content_fragment";
            id: number;
            sId: string;
            created: number;
            title: string;
            fileId: string | null;
            contentFragmentId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            sourceUrl: string | null;
            version: number;
            visibility: "visible" | "deleted";
            textUrl: string;
            textBytes: number | null;
            context: {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            };
            contentFragmentVersion: "latest" | "superseded";
            contentNodeData: {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            } | null;
        }[])[];
        requestedGroupIds: string[][];
        visibility: "deleted" | "workspace" | "unlisted" | "test";
        owner: {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        };
        groupIds?: string[] | undefined;
        updated?: number | undefined;
    }, {
        id: number;
        sId: string;
        created: number;
        title: string | null;
        content: ({
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        }[] | {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        }[] | {
            type: "content_fragment";
            id: number;
            sId: string;
            created: number;
            title: string;
            fileId: string | null;
            contentFragmentId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            sourceUrl: string | null;
            version: number;
            visibility: "visible" | "deleted";
            textUrl: string;
            textBytes: number | null;
            context: {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            };
            contentFragmentVersion: "latest" | "superseded";
            contentNodeData: {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            } | null;
        }[])[];
        requestedGroupIds: string[][];
        visibility: "deleted" | "workspace" | "unlisted" | "test";
        owner: {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        };
        groupIds?: string[] | undefined;
        updated?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    conversation: {
        id: number;
        sId: string;
        created: number;
        title: string | null;
        content: ({
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        }[] | {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                output: unknown;
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        }[] | {
            type: "content_fragment";
            id: number;
            sId: string;
            created: number;
            title: string;
            fileId: string | null;
            contentFragmentId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            sourceUrl: string | null;
            version: number;
            visibility: "visible" | "deleted";
            textUrl: string;
            textBytes: number | null;
            context: {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            };
            contentFragmentVersion: "latest" | "superseded";
            contentNodeData: {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            } | null;
        }[])[];
        requestedGroupIds: string[][];
        visibility: "deleted" | "workspace" | "unlisted" | "test";
        owner: {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        };
        groupIds?: string[] | undefined;
        updated?: number | undefined;
    };
}, {
    conversation: {
        id: number;
        sId: string;
        created: number;
        title: string | null;
        content: ({
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        }[] | {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        }[] | {
            type: "content_fragment";
            id: number;
            sId: string;
            created: number;
            title: string;
            fileId: string | null;
            contentFragmentId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            sourceUrl: string | null;
            version: number;
            visibility: "visible" | "deleted";
            textUrl: string;
            textBytes: number | null;
            context: {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            };
            contentFragmentVersion: "latest" | "superseded";
            contentNodeData: {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            } | null;
        }[])[];
        requestedGroupIds: string[][];
        visibility: "deleted" | "workspace" | "unlisted" | "test";
        owner: {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        };
        groupIds?: string[] | undefined;
        updated?: number | undefined;
    };
}>;
export type GetConversationResponseType = z.infer<typeof GetConversationResponseSchema>;
export declare const TokenizeResponseSchema: z.ZodObject<{
    tokens: z.ZodArray<z.ZodTuple<[z.ZodNumber, z.ZodString], null>, "many">;
}, "strip", z.ZodTypeAny, {
    tokens: [number, string][];
}, {
    tokens: [number, string][];
}>;
export type TokenizeResponseType = z.infer<typeof TokenizeResponseSchema>;
export declare const GetActiveMemberEmailsInWorkspaceResponseSchema: z.ZodObject<{
    emails: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    emails: string[];
}, {
    emails: string[];
}>;
export type GetActiveMemberEmailsInWorkspaceResponseType = z.infer<typeof GetActiveMemberEmailsInWorkspaceResponseSchema>;
export declare const GetWorkspaceVerifiedDomainsResponseSchema: z.ZodObject<{
    verified_domains: z.ZodArray<z.ZodObject<{
        domain: z.ZodString;
        domainAutoJoinEnabled: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        domain: string;
        domainAutoJoinEnabled: boolean;
    }, {
        domain: string;
        domainAutoJoinEnabled: boolean;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    verified_domains: {
        domain: string;
        domainAutoJoinEnabled: boolean;
    }[];
}, {
    verified_domains: {
        domain: string;
        domainAutoJoinEnabled: boolean;
    }[];
}>;
export type GetWorkspaceVerifiedDomainsResponseType = z.infer<typeof GetWorkspaceVerifiedDomainsResponseSchema>;
export declare const GetWorkspaceFeatureFlagsResponseSchema: z.ZodObject<{
    feature_flags: z.ZodArray<z.ZodType<"usage_data_api" | "okta_enterprise_connection" | "co_edition" | "labs_transcripts" | "labs_connection_hubspot" | "labs_connection_linear" | "labs_trackers" | "labs_salesforce_personal_connections" | "document_tracker" | "openai_o1_feature" | "openai_o1_mini_feature" | "openai_o1_high_reasoning_feature" | "openai_o1_custom_assistants_feature" | "openai_o1_high_reasoning_custom_assistants_feature" | "deepseek_feature" | "google_ai_studio_experimental_models_feature" | "snowflake_connector_feature" | "index_private_slack_channel" | "disable_run_logs" | "show_debug_tools" | "deepseek_r1_global_agent_feature" | "salesforce_feature" | "advanced_notion_management" | "search_knowledge_builder" | "force_gdrive_labels_scope" | "claude_3_7_reasoning" | "mcp_actions" | "dev_mcp_actions" | "agent_discovery", z.ZodTypeDef, "usage_data_api" | "okta_enterprise_connection" | "co_edition" | "labs_transcripts" | "labs_connection_hubspot" | "labs_connection_linear" | "labs_trackers" | "labs_salesforce_personal_connections" | "document_tracker" | "openai_o1_feature" | "openai_o1_mini_feature" | "openai_o1_high_reasoning_feature" | "openai_o1_custom_assistants_feature" | "openai_o1_high_reasoning_custom_assistants_feature" | "deepseek_feature" | "google_ai_studio_experimental_models_feature" | "snowflake_connector_feature" | "index_private_slack_channel" | "disable_run_logs" | "show_debug_tools" | "deepseek_r1_global_agent_feature" | "salesforce_feature" | "advanced_notion_management" | "search_knowledge_builder" | "force_gdrive_labels_scope" | "claude_3_7_reasoning" | "mcp_actions" | "dev_mcp_actions" | "agent_discovery">, "many">;
}, "strip", z.ZodTypeAny, {
    feature_flags: ("usage_data_api" | "okta_enterprise_connection" | "co_edition" | "labs_transcripts" | "labs_connection_hubspot" | "labs_connection_linear" | "labs_trackers" | "labs_salesforce_personal_connections" | "document_tracker" | "openai_o1_feature" | "openai_o1_mini_feature" | "openai_o1_high_reasoning_feature" | "openai_o1_custom_assistants_feature" | "openai_o1_high_reasoning_custom_assistants_feature" | "deepseek_feature" | "google_ai_studio_experimental_models_feature" | "snowflake_connector_feature" | "index_private_slack_channel" | "disable_run_logs" | "show_debug_tools" | "deepseek_r1_global_agent_feature" | "salesforce_feature" | "advanced_notion_management" | "search_knowledge_builder" | "force_gdrive_labels_scope" | "claude_3_7_reasoning" | "mcp_actions" | "dev_mcp_actions" | "agent_discovery")[];
}, {
    feature_flags: ("usage_data_api" | "okta_enterprise_connection" | "co_edition" | "labs_transcripts" | "labs_connection_hubspot" | "labs_connection_linear" | "labs_trackers" | "labs_salesforce_personal_connections" | "document_tracker" | "openai_o1_feature" | "openai_o1_mini_feature" | "openai_o1_high_reasoning_feature" | "openai_o1_custom_assistants_feature" | "openai_o1_high_reasoning_custom_assistants_feature" | "deepseek_feature" | "google_ai_studio_experimental_models_feature" | "snowflake_connector_feature" | "index_private_slack_channel" | "disable_run_logs" | "show_debug_tools" | "deepseek_r1_global_agent_feature" | "salesforce_feature" | "advanced_notion_management" | "search_knowledge_builder" | "force_gdrive_labels_scope" | "claude_3_7_reasoning" | "mcp_actions" | "dev_mcp_actions" | "agent_discovery")[];
}>;
export type GetWorkspaceFeatureFlagsResponseType = z.infer<typeof GetWorkspaceFeatureFlagsResponseSchema>;
export declare const PublicPostMessagesRequestBodySchema: z.ZodIntersection<z.ZodObject<{
    content: z.ZodString;
    mentions: z.ZodArray<z.ZodObject<{
        configurationId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        configurationId: string;
    }, {
        configurationId: string;
    }>, "many">;
    context: z.ZodObject<z.objectUtil.extendShape<{
        username: z.ZodString;
        timezone: z.ZodEffects<z.ZodString, string, string>;
        fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        origin: z.ZodUnion<[z.ZodUnion<[z.ZodType<"slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email", z.ZodTypeDef, "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email">, z.ZodNull]>, z.ZodUndefined]>;
        localMCPServerIds: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
    }, {
        localMCPServerIds: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
    }>, "strip", z.ZodTypeAny, {
        username: string;
        timezone: string;
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
        origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
        localMCPServerIds?: string[] | null | undefined;
    }, {
        username: string;
        timezone: string;
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
        origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
        localMCPServerIds?: string[] | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    content: string;
    context: {
        username: string;
        timezone: string;
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
        origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
        localMCPServerIds?: string[] | null | undefined;
    };
    mentions: {
        configurationId: string;
    }[];
}, {
    content: string;
    context: {
        username: string;
        timezone: string;
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
        origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
        localMCPServerIds?: string[] | null | undefined;
    };
    mentions: {
        configurationId: string;
    }[];
}>, z.ZodObject<{
    blocking: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    blocking?: boolean | undefined;
}, {
    blocking?: boolean | undefined;
}>>;
export type PublicPostMessagesRequestBody = z.infer<typeof PublicPostMessagesRequestBodySchema>;
export type PostMessagesResponseBody = {
    message: UserMessageType;
    agentMessages?: AgentMessagePublicType[];
};
export declare const PublicPostEditMessagesRequestBodySchema: z.ZodObject<{
    content: z.ZodString;
    mentions: z.ZodArray<z.ZodObject<{
        configurationId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        configurationId: string;
    }, {
        configurationId: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    content: string;
    mentions: {
        configurationId: string;
    }[];
}, {
    content: string;
    mentions: {
        configurationId: string;
    }[];
}>;
export type PublicPostEditMessagesRequestBody = z.infer<typeof PublicPostEditMessagesRequestBodySchema>;
export declare const PublicContentFragmentWithContentSchema: z.ZodObject<{
    title: z.ZodString;
    url: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    content: z.ZodString;
    contentType: z.ZodString;
    fileId: z.ZodNullable<z.ZodUndefined>;
    nodeId: z.ZodNullable<z.ZodUndefined>;
    nodeDataSourceViewId: z.ZodNullable<z.ZodUndefined>;
    context: z.ZodNullable<z.ZodOptional<z.ZodObject<{
        username: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    }, {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    }>>>;
    supersededContentFragmentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    title: string;
    content: string;
    contentType: string;
    fileId?: null | undefined;
    nodeDataSourceViewId?: null | undefined;
    nodeId?: null | undefined;
    context?: {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    } | null | undefined;
    url?: string | null | undefined;
    supersededContentFragmentId?: string | null | undefined;
}, {
    title: string;
    content: string;
    contentType: string;
    fileId?: null | undefined;
    nodeDataSourceViewId?: null | undefined;
    nodeId?: null | undefined;
    context?: {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    } | null | undefined;
    url?: string | null | undefined;
    supersededContentFragmentId?: string | null | undefined;
}>;
export type PublicContentFragmentWithContent = z.infer<typeof PublicContentFragmentWithContentSchema>;
export declare const PublicContentFragmentWithFileIdSchema: z.ZodObject<{
    title: z.ZodString;
    fileId: z.ZodString;
    url: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    content: z.ZodNullable<z.ZodUndefined>;
    contentType: z.ZodNullable<z.ZodUndefined>;
    nodeId: z.ZodNullable<z.ZodUndefined>;
    nodeDataSourceViewId: z.ZodNullable<z.ZodUndefined>;
    context: z.ZodNullable<z.ZodOptional<z.ZodObject<{
        username: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    }, {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    }>>>;
    supersededContentFragmentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    title: string;
    fileId: string;
    content?: null | undefined;
    nodeDataSourceViewId?: null | undefined;
    contentType?: null | undefined;
    nodeId?: null | undefined;
    context?: {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    } | null | undefined;
    url?: string | null | undefined;
    supersededContentFragmentId?: string | null | undefined;
}, {
    title: string;
    fileId: string;
    content?: null | undefined;
    nodeDataSourceViewId?: null | undefined;
    contentType?: null | undefined;
    nodeId?: null | undefined;
    context?: {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    } | null | undefined;
    url?: string | null | undefined;
    supersededContentFragmentId?: string | null | undefined;
}>;
export type PublicContentFragmentWithFileId = z.infer<typeof PublicContentFragmentWithFileIdSchema>;
export declare const PublicPostContentFragmentRequestBodySchema: z.ZodUnion<[z.ZodObject<{
    title: z.ZodString;
    url: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    content: z.ZodString;
    contentType: z.ZodString;
    fileId: z.ZodNullable<z.ZodUndefined>;
    nodeId: z.ZodNullable<z.ZodUndefined>;
    nodeDataSourceViewId: z.ZodNullable<z.ZodUndefined>;
    context: z.ZodNullable<z.ZodOptional<z.ZodObject<{
        username: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    }, {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    }>>>;
    supersededContentFragmentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    title: string;
    content: string;
    contentType: string;
    fileId?: null | undefined;
    nodeDataSourceViewId?: null | undefined;
    nodeId?: null | undefined;
    context?: {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    } | null | undefined;
    url?: string | null | undefined;
    supersededContentFragmentId?: string | null | undefined;
}, {
    title: string;
    content: string;
    contentType: string;
    fileId?: null | undefined;
    nodeDataSourceViewId?: null | undefined;
    nodeId?: null | undefined;
    context?: {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    } | null | undefined;
    url?: string | null | undefined;
    supersededContentFragmentId?: string | null | undefined;
}>, z.ZodObject<{
    title: z.ZodString;
    fileId: z.ZodString;
    url: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    content: z.ZodNullable<z.ZodUndefined>;
    contentType: z.ZodNullable<z.ZodUndefined>;
    nodeId: z.ZodNullable<z.ZodUndefined>;
    nodeDataSourceViewId: z.ZodNullable<z.ZodUndefined>;
    context: z.ZodNullable<z.ZodOptional<z.ZodObject<{
        username: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    }, {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    }>>>;
    supersededContentFragmentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    title: string;
    fileId: string;
    content?: null | undefined;
    nodeDataSourceViewId?: null | undefined;
    contentType?: null | undefined;
    nodeId?: null | undefined;
    context?: {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    } | null | undefined;
    url?: string | null | undefined;
    supersededContentFragmentId?: string | null | undefined;
}, {
    title: string;
    fileId: string;
    content?: null | undefined;
    nodeDataSourceViewId?: null | undefined;
    contentType?: null | undefined;
    nodeId?: null | undefined;
    context?: {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    } | null | undefined;
    url?: string | null | undefined;
    supersededContentFragmentId?: string | null | undefined;
}>, z.ZodObject<{
    title: z.ZodString;
    nodeId: z.ZodString;
    nodeDataSourceViewId: z.ZodString;
    url: z.ZodNullable<z.ZodUndefined>;
    content: z.ZodNullable<z.ZodUndefined>;
    contentType: z.ZodNullable<z.ZodUndefined>;
    fileId: z.ZodNullable<z.ZodUndefined>;
    context: z.ZodNullable<z.ZodOptional<z.ZodObject<{
        username: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    }, {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    }>>>;
    supersededContentFragmentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    title: string;
    nodeDataSourceViewId: string;
    nodeId: string;
    content?: null | undefined;
    fileId?: null | undefined;
    contentType?: null | undefined;
    context?: {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    } | null | undefined;
    url?: null | undefined;
    supersededContentFragmentId?: string | null | undefined;
}, {
    title: string;
    nodeDataSourceViewId: string;
    nodeId: string;
    content?: null | undefined;
    fileId?: null | undefined;
    contentType?: null | undefined;
    context?: {
        email?: string | null | undefined;
        fullName?: string | null | undefined;
        username?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
    } | null | undefined;
    url?: null | undefined;
    supersededContentFragmentId?: string | null | undefined;
}>]>;
export type PublicPostContentFragmentRequestBody = z.infer<typeof PublicPostContentFragmentRequestBodySchema>;
export declare const PublicPostConversationsRequestBodySchema: z.ZodIntersection<z.ZodObject<{
    title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    visibility: z.ZodDefault<z.ZodOptional<z.ZodEnum<["unlisted", "workspace", "deleted", "test"]>>>;
    message: z.ZodUnion<[z.ZodIntersection<z.ZodObject<{
        content: z.ZodString;
        mentions: z.ZodArray<z.ZodObject<{
            configurationId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            configurationId: string;
        }, {
            configurationId: string;
        }>, "many">;
        context: z.ZodObject<{
            username: z.ZodString;
            timezone: z.ZodEffects<z.ZodString, string, string>;
            fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            origin: z.ZodUnion<[z.ZodUnion<[z.ZodType<"slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email", z.ZodTypeDef, "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email">, z.ZodNull]>, z.ZodUndefined]>;
            localMCPServerIds: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        }, {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        content: string;
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    }, {
        content: string;
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    }>, z.ZodObject<{
        blocking: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        blocking?: boolean | undefined;
    }, {
        blocking?: boolean | undefined;
    }>>, z.ZodUndefined]>;
    contentFragment: z.ZodUnion<[z.ZodObject<{
        title: z.ZodString;
        url: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        content: z.ZodString;
        contentType: z.ZodString;
        fileId: z.ZodNullable<z.ZodUndefined>;
        nodeId: z.ZodNullable<z.ZodUndefined>;
        nodeDataSourceViewId: z.ZodNullable<z.ZodUndefined>;
        context: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            username: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        }, {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        }>>>;
        supersededContentFragmentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        title: string;
        content: string;
        contentType: string;
        fileId?: null | undefined;
        nodeDataSourceViewId?: null | undefined;
        nodeId?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: string | null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    }, {
        title: string;
        content: string;
        contentType: string;
        fileId?: null | undefined;
        nodeDataSourceViewId?: null | undefined;
        nodeId?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: string | null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    }>, z.ZodObject<{
        title: z.ZodString;
        fileId: z.ZodString;
        url: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        content: z.ZodNullable<z.ZodUndefined>;
        contentType: z.ZodNullable<z.ZodUndefined>;
        nodeId: z.ZodNullable<z.ZodUndefined>;
        nodeDataSourceViewId: z.ZodNullable<z.ZodUndefined>;
        context: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            username: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        }, {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        }>>>;
        supersededContentFragmentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        title: string;
        fileId: string;
        content?: null | undefined;
        nodeDataSourceViewId?: null | undefined;
        contentType?: null | undefined;
        nodeId?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: string | null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    }, {
        title: string;
        fileId: string;
        content?: null | undefined;
        nodeDataSourceViewId?: null | undefined;
        contentType?: null | undefined;
        nodeId?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: string | null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    }>, z.ZodObject<{
        title: z.ZodString;
        nodeId: z.ZodString;
        nodeDataSourceViewId: z.ZodString;
        url: z.ZodNullable<z.ZodUndefined>;
        content: z.ZodNullable<z.ZodUndefined>;
        contentType: z.ZodNullable<z.ZodUndefined>;
        fileId: z.ZodNullable<z.ZodUndefined>;
        context: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            username: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        }, {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        }>>>;
        supersededContentFragmentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        title: string;
        nodeDataSourceViewId: string;
        nodeId: string;
        content?: null | undefined;
        fileId?: null | undefined;
        contentType?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    }, {
        title: string;
        nodeDataSourceViewId: string;
        nodeId: string;
        content?: null | undefined;
        fileId?: null | undefined;
        contentType?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    }>, z.ZodUndefined]>;
    contentFragments: z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodObject<{
        title: z.ZodString;
        url: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        content: z.ZodString;
        contentType: z.ZodString;
        fileId: z.ZodNullable<z.ZodUndefined>;
        nodeId: z.ZodNullable<z.ZodUndefined>;
        nodeDataSourceViewId: z.ZodNullable<z.ZodUndefined>;
        context: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            username: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        }, {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        }>>>;
        supersededContentFragmentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        title: string;
        content: string;
        contentType: string;
        fileId?: null | undefined;
        nodeDataSourceViewId?: null | undefined;
        nodeId?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: string | null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    }, {
        title: string;
        content: string;
        contentType: string;
        fileId?: null | undefined;
        nodeDataSourceViewId?: null | undefined;
        nodeId?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: string | null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    }>, z.ZodObject<{
        title: z.ZodString;
        fileId: z.ZodString;
        url: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        content: z.ZodNullable<z.ZodUndefined>;
        contentType: z.ZodNullable<z.ZodUndefined>;
        nodeId: z.ZodNullable<z.ZodUndefined>;
        nodeDataSourceViewId: z.ZodNullable<z.ZodUndefined>;
        context: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            username: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        }, {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        }>>>;
        supersededContentFragmentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        title: string;
        fileId: string;
        content?: null | undefined;
        nodeDataSourceViewId?: null | undefined;
        contentType?: null | undefined;
        nodeId?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: string | null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    }, {
        title: string;
        fileId: string;
        content?: null | undefined;
        nodeDataSourceViewId?: null | undefined;
        contentType?: null | undefined;
        nodeId?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: string | null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    }>, z.ZodObject<{
        title: z.ZodString;
        nodeId: z.ZodString;
        nodeDataSourceViewId: z.ZodString;
        url: z.ZodNullable<z.ZodUndefined>;
        content: z.ZodNullable<z.ZodUndefined>;
        contentType: z.ZodNullable<z.ZodUndefined>;
        fileId: z.ZodNullable<z.ZodUndefined>;
        context: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            username: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        }, {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        }>>>;
        supersededContentFragmentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        title: string;
        nodeDataSourceViewId: string;
        nodeId: string;
        content?: null | undefined;
        fileId?: null | undefined;
        contentType?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    }, {
        title: string;
        nodeDataSourceViewId: string;
        nodeId: string;
        content?: null | undefined;
        fileId?: null | undefined;
        contentType?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    }>]>, "many">, z.ZodUndefined]>;
}, "strip", z.ZodTypeAny, {
    visibility: "deleted" | "workspace" | "unlisted" | "test";
    message?: ({
        content: string;
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    } & {
        blocking?: boolean | undefined;
    }) | undefined;
    title?: string | null | undefined;
    contentFragment?: {
        title: string;
        content: string;
        contentType: string;
        fileId?: null | undefined;
        nodeDataSourceViewId?: null | undefined;
        nodeId?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: string | null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    } | {
        title: string;
        fileId: string;
        content?: null | undefined;
        nodeDataSourceViewId?: null | undefined;
        contentType?: null | undefined;
        nodeId?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: string | null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    } | {
        title: string;
        nodeDataSourceViewId: string;
        nodeId: string;
        content?: null | undefined;
        fileId?: null | undefined;
        contentType?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    } | undefined;
    contentFragments?: ({
        title: string;
        content: string;
        contentType: string;
        fileId?: null | undefined;
        nodeDataSourceViewId?: null | undefined;
        nodeId?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: string | null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    } | {
        title: string;
        fileId: string;
        content?: null | undefined;
        nodeDataSourceViewId?: null | undefined;
        contentType?: null | undefined;
        nodeId?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: string | null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    } | {
        title: string;
        nodeDataSourceViewId: string;
        nodeId: string;
        content?: null | undefined;
        fileId?: null | undefined;
        contentType?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    })[] | undefined;
}, {
    message?: ({
        content: string;
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    } & {
        blocking?: boolean | undefined;
    }) | undefined;
    title?: string | null | undefined;
    visibility?: "deleted" | "workspace" | "unlisted" | "test" | undefined;
    contentFragment?: {
        title: string;
        content: string;
        contentType: string;
        fileId?: null | undefined;
        nodeDataSourceViewId?: null | undefined;
        nodeId?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: string | null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    } | {
        title: string;
        fileId: string;
        content?: null | undefined;
        nodeDataSourceViewId?: null | undefined;
        contentType?: null | undefined;
        nodeId?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: string | null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    } | {
        title: string;
        nodeDataSourceViewId: string;
        nodeId: string;
        content?: null | undefined;
        fileId?: null | undefined;
        contentType?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    } | undefined;
    contentFragments?: ({
        title: string;
        content: string;
        contentType: string;
        fileId?: null | undefined;
        nodeDataSourceViewId?: null | undefined;
        nodeId?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: string | null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    } | {
        title: string;
        fileId: string;
        content?: null | undefined;
        nodeDataSourceViewId?: null | undefined;
        contentType?: null | undefined;
        nodeId?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: string | null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    } | {
        title: string;
        nodeDataSourceViewId: string;
        nodeId: string;
        content?: null | undefined;
        fileId?: null | undefined;
        contentType?: null | undefined;
        context?: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        } | null | undefined;
        url?: null | undefined;
        supersededContentFragmentId?: string | null | undefined;
    })[] | undefined;
}>, z.ZodObject<{
    blocking: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    blocking?: boolean | undefined;
}, {
    blocking?: boolean | undefined;
}>>;
export type PublicPostConversationsRequestBody = z.infer<typeof PublicPostConversationsRequestBodySchema>;
export declare const PostConversationsResponseSchema: z.ZodObject<{
    conversation: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        created: z.ZodNumber;
        updated: z.ZodOptional<z.ZodNumber>;
        owner: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            sId: z.ZodString;
            name: z.ZodString;
            role: z.ZodEnum<["admin", "builder", "user", "none"]>;
            segmentation: z.ZodNullable<z.ZodType<"interesting", z.ZodTypeDef, "interesting">>;
            whiteListedProviders: z.ZodNullable<z.ZodArray<z.ZodType<"openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks", z.ZodTypeDef, "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks">, "many">>;
            defaultEmbeddingProvider: z.ZodNullable<z.ZodType<"openai" | "mistral", z.ZodTypeDef, "openai" | "mistral">>;
        }, {
            ssoEnforced: z.ZodOptional<z.ZodBoolean>;
        }>, "strip", z.ZodTypeAny, {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        }, {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        }>;
        sId: z.ZodString;
        title: z.ZodNullable<z.ZodString>;
        visibility: z.ZodType<"deleted" | "workspace" | "unlisted" | "test", z.ZodTypeDef, "deleted" | "workspace" | "unlisted" | "test">;
        groupIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        requestedGroupIds: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
    }, {
        content: z.ZodArray<z.ZodUnion<[z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            created: z.ZodNumber;
            type: z.ZodLiteral<"user_message">;
            sId: z.ZodString;
            visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
            version: z.ZodNumber;
            user: z.ZodNullable<z.ZodObject<{
                sId: z.ZodString;
                id: z.ZodNumber;
                createdAt: z.ZodNumber;
                provider: z.ZodNullable<z.ZodType<"github" | "google" | "auth0" | "okta" | "samlp" | "waad", z.ZodTypeDef, "github" | "google" | "auth0" | "okta" | "samlp" | "waad">>;
                username: z.ZodString;
                email: z.ZodString;
                firstName: z.ZodString;
                lastName: z.ZodNullable<z.ZodString>;
                fullName: z.ZodString;
                image: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            }, {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            }>>;
            mentions: z.ZodArray<z.ZodObject<{
                configurationId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                configurationId: string;
            }, {
                configurationId: string;
            }>, "many">;
            content: z.ZodString;
            context: z.ZodObject<{
                username: z.ZodString;
                timezone: z.ZodEffects<z.ZodString, string, string>;
                fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                origin: z.ZodUnion<[z.ZodUnion<[z.ZodType<"slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email", z.ZodTypeDef, "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email">, z.ZodNull]>, z.ZodUndefined]>;
                localMCPServerIds: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
            }, "strip", z.ZodTypeAny, {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            }, {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        }, {
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        }>, "many">, z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            agentMessageId: z.ZodNumber;
            created: z.ZodNumber;
            type: z.ZodLiteral<"agent_message">;
            sId: z.ZodString;
            visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
            version: z.ZodNumber;
            parentMessageId: z.ZodNullable<z.ZodString>;
            configuration: z.ZodObject<{
                id: z.ZodNumber;
                versionCreatedAt: z.ZodNullable<z.ZodString>;
                sId: z.ZodString;
                version: z.ZodNumber;
                versionAuthorId: z.ZodNullable<z.ZodNumber>;
                instructions: z.ZodNullable<z.ZodString>;
                model: z.ZodObject<{
                    providerId: z.ZodType<"openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks", z.ZodTypeDef, "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks">;
                    modelId: z.ZodType<"gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1", z.ZodTypeDef, "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1">;
                    temperature: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                }, {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                }>;
                status: z.ZodUnion<[z.ZodType<"active" | "archived" | "draft", z.ZodTypeDef, "active" | "archived" | "draft">, z.ZodType<"active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace", z.ZodTypeDef, "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace">]>;
                scope: z.ZodType<"global" | "workspace" | "published" | "private", z.ZodTypeDef, "global" | "workspace" | "published" | "private">;
                userFavorite: z.ZodBoolean;
                name: z.ZodString;
                description: z.ZodString;
                pictureUrl: z.ZodString;
                lastAuthors: z.ZodOptional<z.ZodReadonly<z.ZodArray<z.ZodString, "many">>>;
                usage: z.ZodOptional<z.ZodObject<{
                    messageCount: z.ZodNumber;
                    conversationCount: z.ZodNumber;
                    userCount: z.ZodNumber;
                    timePeriodSec: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                }, {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                }>>;
                maxStepsPerRun: z.ZodNumber;
                visualizationEnabled: z.ZodBoolean;
                templateId: z.ZodNullable<z.ZodString>;
                groupIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                requestedGroupIds: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
            }, "strip", z.ZodTypeAny, {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            }, {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            }>;
            status: z.ZodType<"created" | "succeeded" | "failed" | "cancelled", z.ZodTypeDef, "created" | "succeeded" | "failed" | "cancelled">;
            actions: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                params: z.ZodObject<{
                    relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                        duration: z.ZodNumber;
                        unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
                    }, "strip", z.ZodTypeAny, {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    }, {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    }>>;
                    query: z.ZodNullable<z.ZodString>;
                    topK: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                }, {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                }>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                documents: z.ZodNullable<z.ZodArray<z.ZodObject<{
                    chunks: z.ZodArray<z.ZodObject<{
                        offset: z.ZodNumber;
                        score: z.ZodNullable<z.ZodNumber>;
                        text: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        text: string;
                        offset: number;
                        score: number | null;
                    }, {
                        text: string;
                        offset: number;
                        score: number | null;
                    }>, "many">;
                    documentId: z.ZodString;
                    dataSourceView: z.ZodNullable<z.ZodObject<{
                        category: z.ZodType<"folder" | "managed" | "website" | "apps" | "actions", z.ZodTypeDef, "folder" | "managed" | "website" | "apps" | "actions">;
                        createdAt: z.ZodNumber;
                        dataSource: z.ZodObject<{
                            id: z.ZodNumber;
                            sId: z.ZodString;
                            createdAt: z.ZodNumber;
                            name: z.ZodString;
                            description: z.ZodNullable<z.ZodString>;
                            assistantDefaultSelected: z.ZodBoolean;
                            dustAPIProjectId: z.ZodString;
                            dustAPIDataSourceId: z.ZodString;
                            connectorId: z.ZodNullable<z.ZodString>;
                            connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
                            editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                                editedAt: z.ZodNullable<z.ZodNumber>;
                                fullName: z.ZodNullable<z.ZodString>;
                                imageUrl: z.ZodNullable<z.ZodString>;
                                email: z.ZodNullable<z.ZodString>;
                                userId: z.ZodNullable<z.ZodString>;
                            }, "strip", z.ZodTypeAny, {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            }, {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            }>>>;
                        }, "strip", z.ZodTypeAny, {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        }, {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        }>;
                        editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                            editedAt: z.ZodNullable<z.ZodNumber>;
                            fullName: z.ZodNullable<z.ZodString>;
                            imageUrl: z.ZodNullable<z.ZodString>;
                            email: z.ZodNullable<z.ZodString>;
                            userId: z.ZodNullable<z.ZodString>;
                        }, "strip", z.ZodTypeAny, {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        }, {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        }>>>;
                        id: z.ZodNumber;
                        kind: z.ZodType<"custom" | "default", z.ZodTypeDef, "custom" | "default">;
                        parentsIn: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
                        sId: z.ZodString;
                        updatedAt: z.ZodNumber;
                        spaceId: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    }, {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    }>>;
                    id: z.ZodNumber;
                    reference: z.ZodString;
                    score: z.ZodNullable<z.ZodNumber>;
                    sourceUrl: z.ZodNullable<z.ZodString>;
                    tags: z.ZodArray<z.ZodString, "many">;
                    timestamp: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }, {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }>, "many">>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"retrieval_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            }, {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            }>, z.ZodEffects<z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                appWorkspaceId: z.ZodString;
                appId: z.ZodString;
                appName: z.ZodString;
                params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
                runningBlock: z.ZodNullable<z.ZodObject<{
                    type: z.ZodString;
                    name: z.ZodString;
                    status: z.ZodEnum<["running", "succeeded", "errored"]>;
                }, "strip", z.ZodTypeAny, {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                }, {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                }>>;
                output: z.ZodNullable<z.ZodUnknown>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"dust_app_run_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            }, {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            }>, {
                output: unknown;
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
            }, {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                params: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
                output: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
                resultsFileId: z.ZodNullable<z.ZodString>;
                resultsFileSnippet: z.ZodNullable<z.ZodString>;
                sectionFileId: z.ZodNullable<z.ZodString>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                agentMessageId: z.ZodNumber;
                step: z.ZodNumber;
                type: z.ZodLiteral<"tables_query_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            }, {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                params: z.ZodObject<{
                    relativeTimeFrame: z.ZodNullable<z.ZodObject<{
                        duration: z.ZodNumber;
                        unit: z.ZodEnum<["hour", "day", "week", "month", "year"]>;
                    }, "strip", z.ZodTypeAny, {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    }, {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                }, {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                }>;
                schema: z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    type: z.ZodEnum<["string", "number", "boolean"]>;
                    description: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }, {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }>, "many">;
                outputs: z.ZodNullable<z.ZodObject<{
                    data: z.ZodArray<z.ZodUnknown, "many">;
                    min_timestamp: z.ZodNumber;
                    total_documents: z.ZodNumber;
                    total_chunks: z.ZodNumber;
                    total_tokens: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                }, {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                }>>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"process_action">;
            }>, "strip", z.ZodTypeAny, {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            }, {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                query: z.ZodString;
                output: z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    results: z.ZodArray<z.ZodObject<{
                        title: z.ZodString;
                        snippet: z.ZodString;
                        link: z.ZodString;
                        reference: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }, {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }>, "many">;
                }, "strip", z.ZodTypeAny, {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                }, {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                }>, z.ZodObject<{
                    results: z.ZodArray<z.ZodObject<{
                        title: z.ZodString;
                        snippet: z.ZodString;
                        link: z.ZodString;
                        reference: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }, {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }>, "many">;
                    error: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                }, {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                }>]>>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"websearch_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            }, {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                urls: z.ZodArray<z.ZodString, "many">;
                output: z.ZodNullable<z.ZodObject<{
                    results: z.ZodArray<z.ZodObject<{
                        requestedUrl: z.ZodString;
                        browsedUrl: z.ZodString;
                        content: z.ZodString;
                        responseCode: z.ZodString;
                        errorMessage: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }, {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }>, "many">;
                }, "strip", z.ZodTypeAny, {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                }, {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                }>>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"browse_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            }, {
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                files: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    fileId: z.ZodString;
                    contentFragmentId: z.ZodUndefined;
                    nodeDataSourceViewId: z.ZodUndefined;
                    title: z.ZodString;
                    contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
                }, "strip", z.ZodTypeAny, {
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                }, {
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                }>, z.ZodObject<{
                    fileId: z.ZodUndefined;
                    contentFragmentId: z.ZodString;
                    nodeDataSourceViewId: z.ZodString;
                    title: z.ZodString;
                    contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
                }, "strip", z.ZodTypeAny, {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                }, {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                }>]>, "many">;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                agentMessageId: z.ZodNumber;
                step: z.ZodNumber;
                type: z.ZodLiteral<"conversation_list_files_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            }, {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                params: z.ZodObject<{
                    fileId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    fileId: string;
                }, {
                    fileId: string;
                }>;
                tokensCount: z.ZodNullable<z.ZodNumber>;
                fileTitle: z.ZodNullable<z.ZodString>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"conversation_include_file_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            }, {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                output: z.ZodNullable<z.ZodString>;
                thinking: z.ZodNullable<z.ZodString>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"reasoning_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            }, {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                output: z.ZodNullable<z.ZodObject<{
                    tags: z.ZodArray<z.ZodObject<{
                        tag: z.ZodString;
                        match_count: z.ZodNumber;
                        data_sources: z.ZodArray<z.ZodString, "many">;
                    }, "strip", z.ZodTypeAny, {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }, {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }>, "many">;
                }, "strip", z.ZodTypeAny, {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                }, {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                }>>;
                functionCallId: z.ZodNullable<z.ZodString>;
                functionCallName: z.ZodNullable<z.ZodString>;
                step: z.ZodNumber;
                type: z.ZodLiteral<"search_labels_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            }, {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                type: z.ZodType<"dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action", z.ZodTypeDef, "dust_app_run_action" | "tables_query_action" | "retrieval_action" | "process_action" | "websearch_action" | "browse_action" | "reasoning_action" | "visualization_action">;
            }, {
                agentMessageId: z.ZodNumber;
                functionCallName: z.ZodNullable<z.ZodString>;
                params: z.ZodUnknown;
                type: z.ZodLiteral<"tool_action">;
            }>, "strip", z.ZodTypeAny, {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            }, {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            }>]>, "many">;
            content: z.ZodNullable<z.ZodString>;
            chainOfThought: z.ZodNullable<z.ZodString>;
            rawContents: z.ZodArray<z.ZodObject<{
                step: z.ZodNumber;
                content: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                content: string;
                step: number;
            }, {
                content: string;
                step: number;
            }>, "many">;
            error: z.ZodNullable<z.ZodObject<{
                code: z.ZodString;
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
                code: string;
            }, {
                message: string;
                code: string;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                output: unknown;
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        }, {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        }>, "many">, z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            sId: z.ZodString;
            fileId: z.ZodNullable<z.ZodString>;
            created: z.ZodNumber;
            type: z.ZodLiteral<"content_fragment">;
            visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
            version: z.ZodNumber;
            sourceUrl: z.ZodNullable<z.ZodString>;
            textUrl: z.ZodString;
            textBytes: z.ZodNullable<z.ZodNumber>;
            title: z.ZodString;
            contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
            context: z.ZodObject<{
                username: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            }, {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            }>;
            contentFragmentId: z.ZodString;
            contentFragmentVersion: z.ZodUnion<[z.ZodLiteral<"latest">, z.ZodLiteral<"superseded">]>;
            contentNodeData: z.ZodNullable<z.ZodObject<{
                nodeId: z.ZodString;
                nodeDataSourceViewId: z.ZodString;
                nodeType: z.ZodUnion<[z.ZodLiteral<"document">, z.ZodLiteral<"table">, z.ZodLiteral<"folder">]>;
                provider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
                spaceName: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            }, {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "content_fragment";
            id: number;
            sId: string;
            created: number;
            title: string;
            fileId: string | null;
            contentFragmentId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            sourceUrl: string | null;
            version: number;
            visibility: "visible" | "deleted";
            textUrl: string;
            textBytes: number | null;
            context: {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            };
            contentFragmentVersion: "latest" | "superseded";
            contentNodeData: {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            } | null;
        }, {
            type: "content_fragment";
            id: number;
            sId: string;
            created: number;
            title: string;
            fileId: string | null;
            contentFragmentId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            sourceUrl: string | null;
            version: number;
            visibility: "visible" | "deleted";
            textUrl: string;
            textBytes: number | null;
            context: {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            };
            contentFragmentVersion: "latest" | "superseded";
            contentNodeData: {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            } | null;
        }>, "many">]>, "many">;
    }>, "strip", z.ZodTypeAny, {
        id: number;
        sId: string;
        created: number;
        title: string | null;
        content: ({
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        }[] | {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                output: unknown;
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        }[] | {
            type: "content_fragment";
            id: number;
            sId: string;
            created: number;
            title: string;
            fileId: string | null;
            contentFragmentId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            sourceUrl: string | null;
            version: number;
            visibility: "visible" | "deleted";
            textUrl: string;
            textBytes: number | null;
            context: {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            };
            contentFragmentVersion: "latest" | "superseded";
            contentNodeData: {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            } | null;
        }[])[];
        requestedGroupIds: string[][];
        visibility: "deleted" | "workspace" | "unlisted" | "test";
        owner: {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        };
        groupIds?: string[] | undefined;
        updated?: number | undefined;
    }, {
        id: number;
        sId: string;
        created: number;
        title: string | null;
        content: ({
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        }[] | {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        }[] | {
            type: "content_fragment";
            id: number;
            sId: string;
            created: number;
            title: string;
            fileId: string | null;
            contentFragmentId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            sourceUrl: string | null;
            version: number;
            visibility: "visible" | "deleted";
            textUrl: string;
            textBytes: number | null;
            context: {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            };
            contentFragmentVersion: "latest" | "superseded";
            contentNodeData: {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            } | null;
        }[])[];
        requestedGroupIds: string[][];
        visibility: "deleted" | "workspace" | "unlisted" | "test";
        owner: {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        };
        groupIds?: string[] | undefined;
        updated?: number | undefined;
    }>;
    message: z.ZodOptional<z.ZodObject<{
        id: z.ZodNumber;
        created: z.ZodNumber;
        type: z.ZodLiteral<"user_message">;
        sId: z.ZodString;
        visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
        version: z.ZodNumber;
        user: z.ZodNullable<z.ZodObject<{
            sId: z.ZodString;
            id: z.ZodNumber;
            createdAt: z.ZodNumber;
            provider: z.ZodNullable<z.ZodType<"github" | "google" | "auth0" | "okta" | "samlp" | "waad", z.ZodTypeDef, "github" | "google" | "auth0" | "okta" | "samlp" | "waad">>;
            username: z.ZodString;
            email: z.ZodString;
            firstName: z.ZodString;
            lastName: z.ZodNullable<z.ZodString>;
            fullName: z.ZodString;
            image: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        }, {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        }>>;
        mentions: z.ZodArray<z.ZodObject<{
            configurationId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            configurationId: string;
        }, {
            configurationId: string;
        }>, "many">;
        content: z.ZodString;
        context: z.ZodObject<{
            username: z.ZodString;
            timezone: z.ZodEffects<z.ZodString, string, string>;
            fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            origin: z.ZodUnion<[z.ZodUnion<[z.ZodType<"slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email", z.ZodTypeDef, "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email">, z.ZodNull]>, z.ZodUndefined]>;
            localMCPServerIds: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        }, {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "user_message";
        id: number;
        sId: string;
        created: number;
        content: string;
        user: {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        } | null;
        version: number;
        visibility: "visible" | "deleted";
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    }, {
        type: "user_message";
        id: number;
        sId: string;
        created: number;
        content: string;
        user: {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        } | null;
        version: number;
        visibility: "visible" | "deleted";
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    }>>;
    contentFragment: z.ZodOptional<z.ZodObject<{
        id: z.ZodNumber;
        sId: z.ZodString;
        fileId: z.ZodNullable<z.ZodString>;
        created: z.ZodNumber;
        type: z.ZodLiteral<"content_fragment">;
        visibility: z.ZodType<"visible" | "deleted", z.ZodTypeDef, "visible" | "deleted">;
        version: z.ZodNumber;
        sourceUrl: z.ZodNullable<z.ZodString>;
        textUrl: z.ZodString;
        textBytes: z.ZodNullable<z.ZodNumber>;
        title: z.ZodString;
        contentType: z.ZodType<"application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack", z.ZodTypeDef, "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack">;
        context: z.ZodObject<{
            username: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            fullName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            profilePictureUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        }, {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        }>;
        contentFragmentId: z.ZodString;
        contentFragmentVersion: z.ZodUnion<[z.ZodLiteral<"latest">, z.ZodLiteral<"superseded">]>;
        contentNodeData: z.ZodNullable<z.ZodObject<{
            nodeId: z.ZodString;
            nodeDataSourceViewId: z.ZodString;
            nodeType: z.ZodUnion<[z.ZodLiteral<"document">, z.ZodLiteral<"table">, z.ZodLiteral<"folder">]>;
            provider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
            spaceName: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            nodeDataSourceViewId: string;
            nodeId: string;
            nodeType: "folder" | "table" | "document";
            spaceName: string;
        }, {
            provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            nodeDataSourceViewId: string;
            nodeId: string;
            nodeType: "folder" | "table" | "document";
            spaceName: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "content_fragment";
        id: number;
        sId: string;
        created: number;
        title: string;
        fileId: string | null;
        contentFragmentId: string;
        contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
        sourceUrl: string | null;
        version: number;
        visibility: "visible" | "deleted";
        textUrl: string;
        textBytes: number | null;
        context: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        };
        contentFragmentVersion: "latest" | "superseded";
        contentNodeData: {
            provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            nodeDataSourceViewId: string;
            nodeId: string;
            nodeType: "folder" | "table" | "document";
            spaceName: string;
        } | null;
    }, {
        type: "content_fragment";
        id: number;
        sId: string;
        created: number;
        title: string;
        fileId: string | null;
        contentFragmentId: string;
        contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
        sourceUrl: string | null;
        version: number;
        visibility: "visible" | "deleted";
        textUrl: string;
        textBytes: number | null;
        context: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        };
        contentFragmentVersion: "latest" | "superseded";
        contentNodeData: {
            provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            nodeDataSourceViewId: string;
            nodeId: string;
            nodeType: "folder" | "table" | "document";
            spaceName: string;
        } | null;
    }>>;
}, "strip", z.ZodTypeAny, {
    conversation: {
        id: number;
        sId: string;
        created: number;
        title: string | null;
        content: ({
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        }[] | {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                output: unknown;
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        }[] | {
            type: "content_fragment";
            id: number;
            sId: string;
            created: number;
            title: string;
            fileId: string | null;
            contentFragmentId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            sourceUrl: string | null;
            version: number;
            visibility: "visible" | "deleted";
            textUrl: string;
            textBytes: number | null;
            context: {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            };
            contentFragmentVersion: "latest" | "superseded";
            contentNodeData: {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            } | null;
        }[])[];
        requestedGroupIds: string[][];
        visibility: "deleted" | "workspace" | "unlisted" | "test";
        owner: {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        };
        groupIds?: string[] | undefined;
        updated?: number | undefined;
    };
    message?: {
        type: "user_message";
        id: number;
        sId: string;
        created: number;
        content: string;
        user: {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        } | null;
        version: number;
        visibility: "visible" | "deleted";
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    } | undefined;
    contentFragment?: {
        type: "content_fragment";
        id: number;
        sId: string;
        created: number;
        title: string;
        fileId: string | null;
        contentFragmentId: string;
        contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
        sourceUrl: string | null;
        version: number;
        visibility: "visible" | "deleted";
        textUrl: string;
        textBytes: number | null;
        context: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        };
        contentFragmentVersion: "latest" | "superseded";
        contentNodeData: {
            provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            nodeDataSourceViewId: string;
            nodeId: string;
            nodeType: "folder" | "table" | "document";
            spaceName: string;
        } | null;
    } | undefined;
}, {
    conversation: {
        id: number;
        sId: string;
        created: number;
        title: string | null;
        content: ({
            type: "user_message";
            id: number;
            sId: string;
            created: number;
            content: string;
            user: {
                provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
                email: string;
                fullName: string;
                id: number;
                sId: string;
                createdAt: number;
                username: string;
                firstName: string;
                lastName: string | null;
                image: string | null;
            } | null;
            version: number;
            visibility: "visible" | "deleted";
            context: {
                username: string;
                timezone: string;
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
                localMCPServerIds?: string[] | null | undefined;
            };
            mentions: {
                configurationId: string;
            }[];
        }[] | {
            type: "agent_message";
            status: "created" | "succeeded" | "failed" | "cancelled";
            id: number;
            sId: string;
            created: number;
            actions: ({
                type: "browse_action";
                id: number;
                agentMessageId: number;
                urls: string[];
                output: {
                    results: {
                        requestedUrl: string;
                        browsedUrl: string;
                        content: string;
                        responseCode: string;
                        errorMessage: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "search_labels_action";
                id: number;
                agentMessageId: number;
                output: {
                    tags: {
                        tag: string;
                        match_count: number;
                        data_sources: string[];
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
            } | {
                type: "reasoning_action";
                id: number;
                agentMessageId: number;
                output: string | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                thinking: string | null;
            } | {
                type: "conversation_include_file_action";
                params: {
                    fileId: string;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                tokensCount: number | null;
                fileTitle: string | null;
            } | {
                type: "conversation_list_files_action";
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                files: ({
                    title: string;
                    fileId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    contentFragmentId?: undefined;
                    nodeDataSourceViewId?: undefined;
                } | {
                    title: string;
                    contentFragmentId: string;
                    nodeDataSourceViewId: string;
                    contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
                    fileId?: undefined;
                })[];
            } | {
                type: "dust_app_run_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                appWorkspaceId: string;
                appId: string;
                appName: string;
                runningBlock: {
                    type: string;
                    status: "running" | "succeeded" | "errored";
                    name: string;
                } | null;
                output?: unknown;
            } | {
                type: "retrieval_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                    query: string | null;
                    topK: number;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                documents: {
                    id: number;
                    score: number | null;
                    timestamp: number;
                    tags: string[];
                    chunks: {
                        text: string;
                        offset: number;
                        score: number | null;
                    }[];
                    documentId: string;
                    dataSourceView: {
                        category: "folder" | "managed" | "website" | "apps" | "actions";
                        id: number;
                        sId: string;
                        createdAt: number;
                        dataSource: {
                            id: number;
                            sId: string;
                            createdAt: number;
                            name: string;
                            description: string | null;
                            assistantDefaultSelected: boolean;
                            dustAPIProjectId: string;
                            dustAPIDataSourceId: string;
                            connectorId: string | null;
                            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                            editedByUser?: {
                                email: string | null;
                                editedAt: number | null;
                                fullName: string | null;
                                imageUrl: string | null;
                                userId: string | null;
                            } | null | undefined;
                        };
                        kind: "custom" | "default";
                        parentsIn: string[] | null;
                        updatedAt: number;
                        spaceId: string;
                        editedByUser?: {
                            email: string | null;
                            editedAt: number | null;
                            fullName: string | null;
                            imageUrl: string | null;
                            userId: string | null;
                        } | null | undefined;
                    } | null;
                    reference: string;
                    sourceUrl: string | null;
                }[] | null;
            } | {
                schema: {
                    type: "string" | "number" | "boolean";
                    name: string;
                    description: string;
                }[];
                type: "process_action";
                params: {
                    relativeTimeFrame: {
                        duration: number;
                        unit: "hour" | "day" | "week" | "month" | "year";
                    } | null;
                };
                id: number;
                agentMessageId: number;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                outputs: {
                    data: unknown[];
                    min_timestamp: number;
                    total_documents: number;
                    total_chunks: number;
                    total_tokens: number;
                } | null;
            } | {
                type: "tables_query_action";
                params: Record<string, string | number | boolean>;
                id: number;
                agentMessageId: number;
                output: Record<string, string | number | boolean> | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                resultsFileId: string | null;
                resultsFileSnippet: string | null;
                sectionFileId: string | null;
            } | {
                type: "websearch_action";
                id: number;
                agentMessageId: number;
                output: {
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | {
                    error: string;
                    results: {
                        title: string;
                        reference: string;
                        snippet: string;
                        link: string;
                    }[];
                } | null;
                functionCallId: string | null;
                functionCallName: string | null;
                step: number;
                query: string;
            } | {
                type: "tool_action";
                id: number;
                agentMessageId: number;
                functionCallName: string | null;
                params?: unknown;
            })[];
            error: {
                message: string;
                code: string;
            } | null;
            content: string | null;
            agentMessageId: number;
            version: number;
            visibility: "visible" | "deleted";
            parentMessageId: string | null;
            configuration: {
                status: "active" | "disabled_by_admin" | "disabled_missing_datasource" | "disabled_free_workspace" | "archived" | "draft";
                id: number;
                sId: string;
                name: string;
                description: string;
                versionCreatedAt: string | null;
                version: number;
                versionAuthorId: number | null;
                instructions: string | null;
                model: {
                    providerId: "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks";
                    modelId: "gpt-3.5-turbo" | "gpt-4-turbo" | "gpt-4o-2024-08-06" | "gpt-4o" | "gpt-4o-mini" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "o1" | "o1-mini" | "o3-mini" | "claude-3-opus-20240229" | "claude-3-5-sonnet-20240620" | "claude-3-5-sonnet-20241022" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-20241022" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-instant-1.2" | "mistral-large-latest" | "mistral-medium" | "mistral-small-latest" | "codestral-latest" | "gemini-1.5-pro-latest" | "gemini-1.5-flash-latest" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-pro-preview-03-25" | "gemini-2.0-flash-exp" | "gemini-2.0-flash-lite-preview-02-05" | "gemini-2.0-pro-exp-02-05" | "gemini-2.0-flash-thinking-exp-01-21" | "meta-llama/Llama-3.3-70B-Instruct-Turbo" | "Qwen/Qwen2.5-Coder-32B-Instruct" | "Qwen/QwQ-32B-Preview" | "Qwen/Qwen2-72B-Instruct" | "deepseek-ai/DeepSeek-V3" | "deepseek-ai/DeepSeek-R1" | "deepseek-chat" | "deepseek-reasoner" | "accounts/fireworks/models/deepseek-r1";
                    temperature: number;
                };
                scope: "global" | "workspace" | "published" | "private";
                userFavorite: boolean;
                pictureUrl: string;
                maxStepsPerRun: number;
                visualizationEnabled: boolean;
                templateId: string | null;
                requestedGroupIds: string[][];
                lastAuthors?: readonly string[] | undefined;
                usage?: {
                    messageCount: number;
                    conversationCount: number;
                    userCount: number;
                    timePeriodSec: number;
                } | undefined;
                groupIds?: string[] | undefined;
            };
            chainOfThought: string | null;
            rawContents: {
                content: string;
                step: number;
            }[];
        }[] | {
            type: "content_fragment";
            id: number;
            sId: string;
            created: number;
            title: string;
            fileId: string | null;
            contentFragmentId: string;
            contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
            sourceUrl: string | null;
            version: number;
            visibility: "visible" | "deleted";
            textUrl: string;
            textBytes: number | null;
            context: {
                email?: string | null | undefined;
                fullName?: string | null | undefined;
                username?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
            };
            contentFragmentVersion: "latest" | "superseded";
            contentNodeData: {
                provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                nodeDataSourceViewId: string;
                nodeId: string;
                nodeType: "folder" | "table" | "document";
                spaceName: string;
            } | null;
        }[])[];
        requestedGroupIds: string[][];
        visibility: "deleted" | "workspace" | "unlisted" | "test";
        owner: {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        };
        groupIds?: string[] | undefined;
        updated?: number | undefined;
    };
    message?: {
        type: "user_message";
        id: number;
        sId: string;
        created: number;
        content: string;
        user: {
            provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
            email: string;
            fullName: string;
            id: number;
            sId: string;
            createdAt: number;
            username: string;
            firstName: string;
            lastName: string | null;
            image: string | null;
        } | null;
        version: number;
        visibility: "visible" | "deleted";
        context: {
            username: string;
            timezone: string;
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            origin?: "slack" | "zendesk" | "web" | "api" | "gsheet" | "zapier" | "n8n" | "make" | "raycast" | "github-copilot-chat" | "extension" | "email" | null | undefined;
            localMCPServerIds?: string[] | null | undefined;
        };
        mentions: {
            configurationId: string;
        }[];
    } | undefined;
    contentFragment?: {
        type: "content_fragment";
        id: number;
        sId: string;
        created: number;
        title: string;
        fileId: string | null;
        contentFragmentId: string;
        contentType: "application/vnd.dust.datasource" | "application/vnd.dust.confluence.page" | "application/vnd.dust.github.issue" | "application/vnd.dust.github.discussion" | "application/vnd.dust.intercom.conversation" | "application/vnd.dust.intercom.article" | "application/vnd.dust.notion.page" | "application/vnd.dust.slack.thread" | "application/vnd.dust.slack.messages" | "application/vnd.dust.zendesk.ticket" | "application/vnd.dust.zendesk.article" | "application/vnd.dust.confluence.space" | "application/vnd.dust.github.repository" | "application/vnd.dust.github.code-root" | "application/vnd.dust.github.code-directory" | "application/vnd.dust.github.code-file" | "application/vnd.dust.github.issues" | "application/vnd.dust.github.discussions" | "application/vnd.dust.googledrive.shared-with-me" | "application/vnd.dust.googledrive.folder" | "application/vnd.dust.googledrive.spreadsheet" | "application/vnd.dust.intercom.collection" | "application/vnd.dust.intercom.teams-folder" | "application/vnd.dust.intercom.team" | "application/vnd.dust.intercom.help-center" | "application/vnd.dust.microsoft.folder" | "application/vnd.dust.microsoft.spreadsheet" | "application/vnd.dust.notion.unknown-folder" | "application/vnd.dust.notion.syncing-folder" | "application/vnd.dust.notion.database" | "application/vnd.dust.slack.channel" | "application/vnd.dust.snowflake.database" | "application/vnd.dust.snowflake.schema" | "application/vnd.dust.snowflake.table" | "application/vnd.dust.webcrawler.folder" | "application/vnd.dust.zendesk.help-center" | "application/vnd.dust.zendesk.brand" | "application/vnd.dust.zendesk.category" | "application/vnd.dust.zendesk.tickets" | "application/vnd.dust.bigquery.database" | "application/vnd.dust.bigquery.schema" | "application/vnd.dust.bigquery.table" | "application/vnd.dust.salesforce.database" | "application/vnd.dust.salesforce.schema" | "application/vnd.dust.salesforce.table" | "application/vnd.dust.gong.transcript" | "application/vnd.dust.gong.transcript-folder" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp" | "dust-application/slack";
        sourceUrl: string | null;
        version: number;
        visibility: "visible" | "deleted";
        textUrl: string;
        textBytes: number | null;
        context: {
            email?: string | null | undefined;
            fullName?: string | null | undefined;
            username?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
        };
        contentFragmentVersion: "latest" | "superseded";
        contentNodeData: {
            provider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            nodeDataSourceViewId: string;
            nodeId: string;
            nodeType: "folder" | "table" | "document";
            spaceName: string;
        } | null;
    } | undefined;
}>;
export type PostConversationsResponseType = z.infer<typeof PostConversationsResponseSchema>;
export declare const GetConversationsResponseSchema: z.ZodObject<{
    conversations: z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        created: z.ZodNumber;
        updated: z.ZodOptional<z.ZodNumber>;
        owner: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            sId: z.ZodString;
            name: z.ZodString;
            role: z.ZodEnum<["admin", "builder", "user", "none"]>;
            segmentation: z.ZodNullable<z.ZodType<"interesting", z.ZodTypeDef, "interesting">>;
            whiteListedProviders: z.ZodNullable<z.ZodArray<z.ZodType<"openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks", z.ZodTypeDef, "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks">, "many">>;
            defaultEmbeddingProvider: z.ZodNullable<z.ZodType<"openai" | "mistral", z.ZodTypeDef, "openai" | "mistral">>;
        }, {
            ssoEnforced: z.ZodOptional<z.ZodBoolean>;
        }>, "strip", z.ZodTypeAny, {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        }, {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        }>;
        sId: z.ZodString;
        title: z.ZodNullable<z.ZodString>;
        visibility: z.ZodType<"deleted" | "workspace" | "unlisted" | "test", z.ZodTypeDef, "deleted" | "workspace" | "unlisted" | "test">;
        groupIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        requestedGroupIds: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
    }, "strip", z.ZodTypeAny, {
        id: number;
        sId: string;
        created: number;
        title: string | null;
        requestedGroupIds: string[][];
        visibility: "deleted" | "workspace" | "unlisted" | "test";
        owner: {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        };
        groupIds?: string[] | undefined;
        updated?: number | undefined;
    }, {
        id: number;
        sId: string;
        created: number;
        title: string | null;
        requestedGroupIds: string[][];
        visibility: "deleted" | "workspace" | "unlisted" | "test";
        owner: {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        };
        groupIds?: string[] | undefined;
        updated?: number | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    conversations: {
        id: number;
        sId: string;
        created: number;
        title: string | null;
        requestedGroupIds: string[][];
        visibility: "deleted" | "workspace" | "unlisted" | "test";
        owner: {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        };
        groupIds?: string[] | undefined;
        updated?: number | undefined;
    }[];
}, {
    conversations: {
        id: number;
        sId: string;
        created: number;
        title: string | null;
        requestedGroupIds: string[][];
        visibility: "deleted" | "workspace" | "unlisted" | "test";
        owner: {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        };
        groupIds?: string[] | undefined;
        updated?: number | undefined;
    }[];
}>;
export type GetConversationsResponseType = z.infer<typeof GetConversationsResponseSchema>;
export declare const SearchDataSourceViewsRequestSchema: z.ZodObject<{
    dataSourceId: z.ZodOptional<z.ZodString>;
    kind: z.ZodOptional<z.ZodString>;
    vaultId: z.ZodOptional<z.ZodString>;
    vaultKind: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    kind?: string | undefined;
    dataSourceId?: string | undefined;
    vaultId?: string | undefined;
    vaultKind?: string | undefined;
}, {
    kind?: string | undefined;
    dataSourceId?: string | undefined;
    vaultId?: string | undefined;
    vaultKind?: string | undefined;
}>;
export declare const SearchDataSourceViewsResponseSchema: z.ZodObject<{
    data_source_views: z.ZodArray<z.ZodObject<{
        category: z.ZodType<"folder" | "managed" | "website" | "apps" | "actions", z.ZodTypeDef, "folder" | "managed" | "website" | "apps" | "actions">;
        createdAt: z.ZodNumber;
        dataSource: z.ZodObject<{
            id: z.ZodNumber;
            sId: z.ZodString;
            createdAt: z.ZodNumber;
            name: z.ZodString;
            description: z.ZodNullable<z.ZodString>;
            assistantDefaultSelected: z.ZodBoolean;
            dustAPIProjectId: z.ZodString;
            dustAPIDataSourceId: z.ZodString;
            connectorId: z.ZodNullable<z.ZodString>;
            connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
            editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                editedAt: z.ZodNullable<z.ZodNumber>;
                fullName: z.ZodNullable<z.ZodString>;
                imageUrl: z.ZodNullable<z.ZodString>;
                email: z.ZodNullable<z.ZodString>;
                userId: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            }, {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }, {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }>;
        editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            editedAt: z.ZodNullable<z.ZodNumber>;
            fullName: z.ZodNullable<z.ZodString>;
            imageUrl: z.ZodNullable<z.ZodString>;
            email: z.ZodNullable<z.ZodString>;
            userId: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        }, {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        }>>>;
        id: z.ZodNumber;
        kind: z.ZodType<"custom" | "default", z.ZodTypeDef, "custom" | "default">;
        parentsIn: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
        sId: z.ZodString;
        updatedAt: z.ZodNumber;
        spaceId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }, {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data_source_views: {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }[];
}, {
    data_source_views: {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }[];
}>;
export type SearchDataSourceViewsResponseType = z.infer<typeof SearchDataSourceViewsResponseSchema>;
declare const ListMemberEmailsResponseSchema: z.ZodObject<{
    emails: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    emails: string[];
}, {
    emails: string[];
}>;
export type ListMemberEmailsResponseType = z.infer<typeof ListMemberEmailsResponseSchema>;
export declare const ValidateMemberRequestSchema: z.ZodObject<{
    email: z.ZodString;
}, "strip", z.ZodTypeAny, {
    email: string;
}, {
    email: string;
}>;
declare const ValidateMemberResponseSchema: z.ZodObject<{
    valid: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    valid: boolean;
}, {
    valid: boolean;
}>;
export type ValidateMemberResponseType = z.infer<typeof ValidateMemberResponseSchema>;
export declare const GetAppsResponseSchema: z.ZodObject<{
    apps: z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        sId: z.ZodString;
        name: z.ZodString;
        description: z.ZodNullable<z.ZodString>;
        savedSpecification: z.ZodNullable<z.ZodString>;
        savedConfig: z.ZodNullable<z.ZodString>;
        savedRun: z.ZodNullable<z.ZodString>;
        dustAPIProjectId: z.ZodString;
        space: z.ZodObject<{
            createdAt: z.ZodNumber;
            groupIds: z.ZodArray<z.ZodString, "many">;
            isRestricted: z.ZodBoolean;
            kind: z.ZodType<"global" | "regular" | "system" | "public" | "conversations", z.ZodTypeDef, "global" | "regular" | "system" | "public" | "conversations">;
            name: z.ZodString;
            sId: z.ZodString;
            updatedAt: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            sId: string;
            createdAt: number;
            name: string;
            kind: "global" | "regular" | "system" | "public" | "conversations";
            updatedAt: number;
            groupIds: string[];
            isRestricted: boolean;
        }, {
            sId: string;
            createdAt: number;
            name: string;
            kind: "global" | "regular" | "system" | "public" | "conversations";
            updatedAt: number;
            groupIds: string[];
            isRestricted: boolean;
        }>;
        datasets: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            description: z.ZodNullable<z.ZodString>;
            data: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>, "many">>>;
            schema: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                type: z.ZodType<"string" | "number" | "boolean" | "json", z.ZodTypeDef, "string" | "number" | "boolean" | "json">;
                description: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                type: "string" | "number" | "boolean" | "json";
                description: string | null;
                key: string;
            }, {
                type: "string" | "number" | "boolean" | "json";
                description: string | null;
                key: string;
            }>, "many">>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description: string | null;
            schema?: {
                type: "string" | "number" | "boolean" | "json";
                description: string | null;
                key: string;
            }[] | null | undefined;
            data?: Record<string, any>[] | null | undefined;
        }, {
            name: string;
            description: string | null;
            schema?: {
                type: "string" | "number" | "boolean" | "json";
                description: string | null;
                key: string;
            }[] | null | undefined;
            data?: Record<string, any>[] | null | undefined;
        }>, "many">>;
        coreSpecifications: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        space: {
            sId: string;
            createdAt: number;
            name: string;
            kind: "global" | "regular" | "system" | "public" | "conversations";
            updatedAt: number;
            groupIds: string[];
            isRestricted: boolean;
        };
        id: number;
        sId: string;
        name: string;
        description: string | null;
        dustAPIProjectId: string;
        savedSpecification: string | null;
        savedConfig: string | null;
        savedRun: string | null;
        datasets?: {
            name: string;
            description: string | null;
            schema?: {
                type: "string" | "number" | "boolean" | "json";
                description: string | null;
                key: string;
            }[] | null | undefined;
            data?: Record<string, any>[] | null | undefined;
        }[] | undefined;
        coreSpecifications?: Record<string, string> | undefined;
    }, {
        space: {
            sId: string;
            createdAt: number;
            name: string;
            kind: "global" | "regular" | "system" | "public" | "conversations";
            updatedAt: number;
            groupIds: string[];
            isRestricted: boolean;
        };
        id: number;
        sId: string;
        name: string;
        description: string | null;
        dustAPIProjectId: string;
        savedSpecification: string | null;
        savedConfig: string | null;
        savedRun: string | null;
        datasets?: {
            name: string;
            description: string | null;
            schema?: {
                type: "string" | "number" | "boolean" | "json";
                description: string | null;
                key: string;
            }[] | null | undefined;
            data?: Record<string, any>[] | null | undefined;
        }[] | undefined;
        coreSpecifications?: Record<string, string> | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    apps: {
        space: {
            sId: string;
            createdAt: number;
            name: string;
            kind: "global" | "regular" | "system" | "public" | "conversations";
            updatedAt: number;
            groupIds: string[];
            isRestricted: boolean;
        };
        id: number;
        sId: string;
        name: string;
        description: string | null;
        dustAPIProjectId: string;
        savedSpecification: string | null;
        savedConfig: string | null;
        savedRun: string | null;
        datasets?: {
            name: string;
            description: string | null;
            schema?: {
                type: "string" | "number" | "boolean" | "json";
                description: string | null;
                key: string;
            }[] | null | undefined;
            data?: Record<string, any>[] | null | undefined;
        }[] | undefined;
        coreSpecifications?: Record<string, string> | undefined;
    }[];
}, {
    apps: {
        space: {
            sId: string;
            createdAt: number;
            name: string;
            kind: "global" | "regular" | "system" | "public" | "conversations";
            updatedAt: number;
            groupIds: string[];
            isRestricted: boolean;
        };
        id: number;
        sId: string;
        name: string;
        description: string | null;
        dustAPIProjectId: string;
        savedSpecification: string | null;
        savedConfig: string | null;
        savedRun: string | null;
        datasets?: {
            name: string;
            description: string | null;
            schema?: {
                type: "string" | "number" | "boolean" | "json";
                description: string | null;
                key: string;
            }[] | null | undefined;
            data?: Record<string, any>[] | null | undefined;
        }[] | undefined;
        coreSpecifications?: Record<string, string> | undefined;
    }[];
}>;
export declare const PostAppsRequestSchema: z.ZodObject<{
    apps: z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        sId: z.ZodString;
        name: z.ZodString;
        description: z.ZodNullable<z.ZodString>;
        savedSpecification: z.ZodNullable<z.ZodString>;
        savedConfig: z.ZodNullable<z.ZodString>;
        savedRun: z.ZodNullable<z.ZodString>;
        dustAPIProjectId: z.ZodString;
        space: z.ZodObject<{
            createdAt: z.ZodNumber;
            groupIds: z.ZodArray<z.ZodString, "many">;
            isRestricted: z.ZodBoolean;
            kind: z.ZodType<"global" | "regular" | "system" | "public" | "conversations", z.ZodTypeDef, "global" | "regular" | "system" | "public" | "conversations">;
            name: z.ZodString;
            sId: z.ZodString;
            updatedAt: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            sId: string;
            createdAt: number;
            name: string;
            kind: "global" | "regular" | "system" | "public" | "conversations";
            updatedAt: number;
            groupIds: string[];
            isRestricted: boolean;
        }, {
            sId: string;
            createdAt: number;
            name: string;
            kind: "global" | "regular" | "system" | "public" | "conversations";
            updatedAt: number;
            groupIds: string[];
            isRestricted: boolean;
        }>;
        datasets: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            description: z.ZodNullable<z.ZodString>;
            data: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>, "many">>>;
            schema: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                type: z.ZodType<"string" | "number" | "boolean" | "json", z.ZodTypeDef, "string" | "number" | "boolean" | "json">;
                description: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                type: "string" | "number" | "boolean" | "json";
                description: string | null;
                key: string;
            }, {
                type: "string" | "number" | "boolean" | "json";
                description: string | null;
                key: string;
            }>, "many">>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description: string | null;
            schema?: {
                type: "string" | "number" | "boolean" | "json";
                description: string | null;
                key: string;
            }[] | null | undefined;
            data?: Record<string, any>[] | null | undefined;
        }, {
            name: string;
            description: string | null;
            schema?: {
                type: "string" | "number" | "boolean" | "json";
                description: string | null;
                key: string;
            }[] | null | undefined;
            data?: Record<string, any>[] | null | undefined;
        }>, "many">>;
        coreSpecifications: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        space: {
            sId: string;
            createdAt: number;
            name: string;
            kind: "global" | "regular" | "system" | "public" | "conversations";
            updatedAt: number;
            groupIds: string[];
            isRestricted: boolean;
        };
        id: number;
        sId: string;
        name: string;
        description: string | null;
        dustAPIProjectId: string;
        savedSpecification: string | null;
        savedConfig: string | null;
        savedRun: string | null;
        datasets?: {
            name: string;
            description: string | null;
            schema?: {
                type: "string" | "number" | "boolean" | "json";
                description: string | null;
                key: string;
            }[] | null | undefined;
            data?: Record<string, any>[] | null | undefined;
        }[] | undefined;
        coreSpecifications?: Record<string, string> | undefined;
    }, {
        space: {
            sId: string;
            createdAt: number;
            name: string;
            kind: "global" | "regular" | "system" | "public" | "conversations";
            updatedAt: number;
            groupIds: string[];
            isRestricted: boolean;
        };
        id: number;
        sId: string;
        name: string;
        description: string | null;
        dustAPIProjectId: string;
        savedSpecification: string | null;
        savedConfig: string | null;
        savedRun: string | null;
        datasets?: {
            name: string;
            description: string | null;
            schema?: {
                type: "string" | "number" | "boolean" | "json";
                description: string | null;
                key: string;
            }[] | null | undefined;
            data?: Record<string, any>[] | null | undefined;
        }[] | undefined;
        coreSpecifications?: Record<string, string> | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    apps: {
        space: {
            sId: string;
            createdAt: number;
            name: string;
            kind: "global" | "regular" | "system" | "public" | "conversations";
            updatedAt: number;
            groupIds: string[];
            isRestricted: boolean;
        };
        id: number;
        sId: string;
        name: string;
        description: string | null;
        dustAPIProjectId: string;
        savedSpecification: string | null;
        savedConfig: string | null;
        savedRun: string | null;
        datasets?: {
            name: string;
            description: string | null;
            schema?: {
                type: "string" | "number" | "boolean" | "json";
                description: string | null;
                key: string;
            }[] | null | undefined;
            data?: Record<string, any>[] | null | undefined;
        }[] | undefined;
        coreSpecifications?: Record<string, string> | undefined;
    }[];
}, {
    apps: {
        space: {
            sId: string;
            createdAt: number;
            name: string;
            kind: "global" | "regular" | "system" | "public" | "conversations";
            updatedAt: number;
            groupIds: string[];
            isRestricted: boolean;
        };
        id: number;
        sId: string;
        name: string;
        description: string | null;
        dustAPIProjectId: string;
        savedSpecification: string | null;
        savedConfig: string | null;
        savedRun: string | null;
        datasets?: {
            name: string;
            description: string | null;
            schema?: {
                type: "string" | "number" | "boolean" | "json";
                description: string | null;
                key: string;
            }[] | null | undefined;
            data?: Record<string, any>[] | null | undefined;
        }[] | undefined;
        coreSpecifications?: Record<string, string> | undefined;
    }[];
}>;
export type GetAppsResponseType = z.infer<typeof GetAppsResponseSchema>;
export declare const ImportAppsResponseSchema: z.ZodObject<{
    apps: z.ZodArray<z.ZodObject<{
        sId: z.ZodString;
        name: z.ZodString;
        error: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        sId: string;
        name: string;
        error?: string | undefined;
    }, {
        sId: string;
        name: string;
        error?: string | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    apps: {
        sId: string;
        name: string;
        error?: string | undefined;
    }[];
}, {
    apps: {
        sId: string;
        name: string;
        error?: string | undefined;
    }[];
}>;
export type ImportAppsResponseType = z.infer<typeof ImportAppsResponseSchema>;
export declare const DataSourceViewResponseSchema: z.ZodObject<{
    dataSourceView: z.ZodObject<{
        category: z.ZodType<"folder" | "managed" | "website" | "apps" | "actions", z.ZodTypeDef, "folder" | "managed" | "website" | "apps" | "actions">;
        createdAt: z.ZodNumber;
        dataSource: z.ZodObject<{
            id: z.ZodNumber;
            sId: z.ZodString;
            createdAt: z.ZodNumber;
            name: z.ZodString;
            description: z.ZodNullable<z.ZodString>;
            assistantDefaultSelected: z.ZodBoolean;
            dustAPIProjectId: z.ZodString;
            dustAPIDataSourceId: z.ZodString;
            connectorId: z.ZodNullable<z.ZodString>;
            connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
            editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                editedAt: z.ZodNullable<z.ZodNumber>;
                fullName: z.ZodNullable<z.ZodString>;
                imageUrl: z.ZodNullable<z.ZodString>;
                email: z.ZodNullable<z.ZodString>;
                userId: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            }, {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }, {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }>;
        editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            editedAt: z.ZodNullable<z.ZodNumber>;
            fullName: z.ZodNullable<z.ZodString>;
            imageUrl: z.ZodNullable<z.ZodString>;
            email: z.ZodNullable<z.ZodString>;
            userId: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        }, {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        }>>>;
        id: z.ZodNumber;
        kind: z.ZodType<"custom" | "default", z.ZodTypeDef, "custom" | "default">;
        parentsIn: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
        sId: z.ZodString;
        updatedAt: z.ZodNumber;
        spaceId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }, {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    dataSourceView: {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    };
}, {
    dataSourceView: {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    };
}>;
export type DataSourceViewResponseType = z.infer<typeof DataSourceViewResponseSchema>;
export declare const PatchDataSourceViewRequestSchema: z.ZodUnion<[z.ZodEffects<z.ZodObject<{
    parentsToAdd: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodUndefined]>;
    parentsToRemove: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    parentsToAdd?: string[] | undefined;
    parentsToRemove?: string[] | undefined;
}, {
    parentsToAdd?: string[] | undefined;
    parentsToRemove?: string[] | undefined;
}>, {
    parentsToAdd: string[] | undefined;
    parentsToRemove: string[] | undefined;
}, {
    parentsToAdd?: string[] | undefined;
    parentsToRemove?: string[] | undefined;
}>, z.ZodObject<{
    parentsIn: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    parentsIn: string[];
}, {
    parentsIn: string[];
}>]>;
export type PatchDataSourceViewRequestType = z.infer<typeof PatchDataSourceViewRequestSchema>;
export declare const DataSourceSearchQuerySchema: z.ZodObject<{
    query: z.ZodString;
    top_k: z.ZodNumber;
    full_text: z.ZodBoolean;
    target_document_tokens: z.ZodOptional<z.ZodNumber>;
    timestamp_gt: z.ZodOptional<z.ZodNumber>;
    timestamp_lt: z.ZodOptional<z.ZodNumber>;
    tags_in: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    tags_not: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    parents_in: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    parents_not: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    query: string;
    top_k: number;
    full_text: boolean;
    target_document_tokens?: number | undefined;
    timestamp_gt?: number | undefined;
    timestamp_lt?: number | undefined;
    tags_in?: string[] | undefined;
    tags_not?: string[] | undefined;
    parents_in?: string[] | undefined;
    parents_not?: string[] | undefined;
}, {
    query: string;
    top_k: number;
    full_text: boolean;
    target_document_tokens?: number | undefined;
    timestamp_gt?: number | undefined;
    timestamp_lt?: number | undefined;
    tags_in?: string[] | undefined;
    tags_not?: string[] | undefined;
    parents_in?: string[] | undefined;
    parents_not?: string[] | undefined;
}>;
export type DataSourceSearchQuery = z.infer<typeof DataSourceSearchQuerySchema>;
declare const DataSourceSearchResponseSchema: z.ZodObject<{
    documents: z.ZodArray<z.ZodObject<{
        data_source_id: z.ZodString;
        created: z.ZodNumber;
        document_id: z.ZodString;
        timestamp: z.ZodNumber;
        parent_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        tags: z.ZodArray<z.ZodString, "many">;
        source_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        hash: z.ZodString;
        text_size: z.ZodNumber;
        chunk_count: z.ZodNumber;
        chunks: z.ZodArray<z.ZodObject<{
            text: z.ZodString;
            hash: z.ZodString;
            offset: z.ZodNumber;
            vector: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>>;
            score: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }, {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }>, "many">;
        text: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        hash: string;
        data_source_id: string;
        created: number;
        document_id: string;
        timestamp: number;
        tags: string[];
        text_size: number;
        chunk_count: number;
        chunks: {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }[];
        text?: string | null | undefined;
        parent_id?: string | null | undefined;
        source_url?: string | null | undefined;
    }, {
        hash: string;
        data_source_id: string;
        created: number;
        document_id: string;
        timestamp: number;
        tags: string[];
        text_size: number;
        chunk_count: number;
        chunks: {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }[];
        text?: string | null | undefined;
        parent_id?: string | null | undefined;
        source_url?: string | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    documents: {
        hash: string;
        data_source_id: string;
        created: number;
        document_id: string;
        timestamp: number;
        tags: string[];
        text_size: number;
        chunk_count: number;
        chunks: {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }[];
        text?: string | null | undefined;
        parent_id?: string | null | undefined;
        source_url?: string | null | undefined;
    }[];
}, {
    documents: {
        hash: string;
        data_source_id: string;
        created: number;
        document_id: string;
        timestamp: number;
        tags: string[];
        text_size: number;
        chunk_count: number;
        chunks: {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }[];
        text?: string | null | undefined;
        parent_id?: string | null | undefined;
        source_url?: string | null | undefined;
    }[];
}>;
export type DataSourceSearchResponseType = z.infer<typeof DataSourceSearchResponseSchema>;
declare const DataSourceViewsListResponseSchema: z.ZodObject<{
    dataSourceViews: z.ZodArray<z.ZodObject<{
        category: z.ZodType<"folder" | "managed" | "website" | "apps" | "actions", z.ZodTypeDef, "folder" | "managed" | "website" | "apps" | "actions">;
        createdAt: z.ZodNumber;
        dataSource: z.ZodObject<{
            id: z.ZodNumber;
            sId: z.ZodString;
            createdAt: z.ZodNumber;
            name: z.ZodString;
            description: z.ZodNullable<z.ZodString>;
            assistantDefaultSelected: z.ZodBoolean;
            dustAPIProjectId: z.ZodString;
            dustAPIDataSourceId: z.ZodString;
            connectorId: z.ZodNullable<z.ZodString>;
            connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
            editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                editedAt: z.ZodNullable<z.ZodNumber>;
                fullName: z.ZodNullable<z.ZodString>;
                imageUrl: z.ZodNullable<z.ZodString>;
                email: z.ZodNullable<z.ZodString>;
                userId: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            }, {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }, {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }>;
        editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            editedAt: z.ZodNullable<z.ZodNumber>;
            fullName: z.ZodNullable<z.ZodString>;
            imageUrl: z.ZodNullable<z.ZodString>;
            email: z.ZodNullable<z.ZodString>;
            userId: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        }, {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        }>>>;
        id: z.ZodNumber;
        kind: z.ZodType<"custom" | "default", z.ZodTypeDef, "custom" | "default">;
        parentsIn: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
        sId: z.ZodString;
        updatedAt: z.ZodNumber;
        spaceId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }, {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    dataSourceViews: {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }[];
}, {
    dataSourceViews: {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }[];
}>;
export type DataSourceViewsListResponseType = z.infer<typeof DataSourceViewsListResponseSchema>;
type FrontDataSourceDocumentSection = {
    prefix: string | null;
    content: string | null;
    sections: FrontDataSourceDocumentSection[];
};
export declare const PostDataSourceDocumentRequestSchema: z.ZodObject<{
    timestamp: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    parent_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    parents: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    source_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    upsert_context: z.ZodOptional<z.ZodEffects<z.ZodObject<{
        sync_type: z.ZodUnion<[z.ZodEnum<["batch", "incremental"]>, z.ZodUndefined]>;
    }, "strip", z.ZodTypeAny, {
        sync_type?: "batch" | "incremental" | undefined;
    }, {
        sync_type?: "batch" | "incremental" | undefined;
    }>, {
        sync_type: "batch" | "incremental" | undefined;
    }, {
        sync_type?: "batch" | "incremental" | undefined;
    }>>;
    text: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    section: z.ZodOptional<z.ZodNullable<z.ZodType<FrontDataSourceDocumentSection, z.ZodTypeDef, FrontDataSourceDocumentSection>>>;
    light_document_output: z.ZodOptional<z.ZodBoolean>;
    async: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    mime_type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    async?: boolean | null | undefined;
    text?: string | null | undefined;
    timestamp?: number | null | undefined;
    parent_id?: string | null | undefined;
    tags?: string[] | null | undefined;
    source_url?: string | null | undefined;
    parents?: string[] | null | undefined;
    mime_type?: string | null | undefined;
    title?: string | null | undefined;
    upsert_context?: {
        sync_type: "batch" | "incremental" | undefined;
    } | undefined;
    section?: FrontDataSourceDocumentSection | null | undefined;
    light_document_output?: boolean | undefined;
}, {
    async?: boolean | null | undefined;
    text?: string | null | undefined;
    timestamp?: number | null | undefined;
    parent_id?: string | null | undefined;
    tags?: string[] | null | undefined;
    source_url?: string | null | undefined;
    parents?: string[] | null | undefined;
    mime_type?: string | null | undefined;
    title?: string | null | undefined;
    upsert_context?: {
        sync_type?: "batch" | "incremental" | undefined;
    } | undefined;
    section?: FrontDataSourceDocumentSection | null | undefined;
    light_document_output?: boolean | undefined;
}>;
export type PostDataSourceDocumentRequestType = z.infer<typeof PostDataSourceDocumentRequestSchema>;
declare const GetDocumentResponseSchema: z.ZodObject<{
    document: z.ZodObject<{
        data_source_id: z.ZodString;
        created: z.ZodNumber;
        document_id: z.ZodString;
        timestamp: z.ZodNumber;
        parent_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        tags: z.ZodArray<z.ZodString, "many">;
        source_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        hash: z.ZodString;
        text_size: z.ZodNumber;
        chunk_count: z.ZodNumber;
        chunks: z.ZodArray<z.ZodObject<{
            text: z.ZodString;
            hash: z.ZodString;
            offset: z.ZodNumber;
            vector: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>>;
            score: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }, {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }>, "many">;
        text: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        hash: string;
        data_source_id: string;
        created: number;
        document_id: string;
        timestamp: number;
        tags: string[];
        text_size: number;
        chunk_count: number;
        chunks: {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }[];
        text?: string | null | undefined;
        parent_id?: string | null | undefined;
        source_url?: string | null | undefined;
    }, {
        hash: string;
        data_source_id: string;
        created: number;
        document_id: string;
        timestamp: number;
        tags: string[];
        text_size: number;
        chunk_count: number;
        chunks: {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }[];
        text?: string | null | undefined;
        parent_id?: string | null | undefined;
        source_url?: string | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    document: {
        hash: string;
        data_source_id: string;
        created: number;
        document_id: string;
        timestamp: number;
        tags: string[];
        text_size: number;
        chunk_count: number;
        chunks: {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }[];
        text?: string | null | undefined;
        parent_id?: string | null | undefined;
        source_url?: string | null | undefined;
    };
}, {
    document: {
        hash: string;
        data_source_id: string;
        created: number;
        document_id: string;
        timestamp: number;
        tags: string[];
        text_size: number;
        chunk_count: number;
        chunks: {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }[];
        text?: string | null | undefined;
        parent_id?: string | null | undefined;
        source_url?: string | null | undefined;
    };
}>;
export type GetDocumentResponseType = z.infer<typeof GetDocumentResponseSchema>;
declare const DeleteDocumentResponseSchema: z.ZodObject<{
    document: z.ZodObject<{
        document_id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        document_id: string;
    }, {
        document_id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    document: {
        document_id: string;
    };
}, {
    document: {
        document_id: string;
    };
}>;
export type DeleteDocumentResponseType = z.infer<typeof DeleteDocumentResponseSchema>;
declare const UpsertDocumentResponseSchema: z.ZodObject<{
    document: z.ZodUnion<[z.ZodObject<{
        data_source_id: z.ZodString;
        created: z.ZodNumber;
        document_id: z.ZodString;
        timestamp: z.ZodNumber;
        parent_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        tags: z.ZodArray<z.ZodString, "many">;
        source_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        hash: z.ZodString;
        text_size: z.ZodNumber;
        chunk_count: z.ZodNumber;
        chunks: z.ZodArray<z.ZodObject<{
            text: z.ZodString;
            hash: z.ZodString;
            offset: z.ZodNumber;
            vector: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>>;
            score: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }, {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }>, "many">;
        text: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        hash: string;
        data_source_id: string;
        created: number;
        document_id: string;
        timestamp: number;
        tags: string[];
        text_size: number;
        chunk_count: number;
        chunks: {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }[];
        text?: string | null | undefined;
        parent_id?: string | null | undefined;
        source_url?: string | null | undefined;
    }, {
        hash: string;
        data_source_id: string;
        created: number;
        document_id: string;
        timestamp: number;
        tags: string[];
        text_size: number;
        chunk_count: number;
        chunks: {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }[];
        text?: string | null | undefined;
        parent_id?: string | null | undefined;
        source_url?: string | null | undefined;
    }>, z.ZodObject<{
        hash: z.ZodString;
        text_size: z.ZodNumber;
        chunk_count: z.ZodNumber;
        token_count: z.ZodNumber;
        created: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        hash: string;
        created: number;
        text_size: number;
        chunk_count: number;
        token_count: number;
    }, {
        hash: string;
        created: number;
        text_size: number;
        chunk_count: number;
        token_count: number;
    }>, z.ZodObject<{
        document_id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        document_id: string;
    }, {
        document_id: string;
    }>]>;
    data_source: z.ZodObject<{
        id: z.ZodNumber;
        sId: z.ZodString;
        createdAt: z.ZodNumber;
        name: z.ZodString;
        description: z.ZodNullable<z.ZodString>;
        assistantDefaultSelected: z.ZodBoolean;
        dustAPIProjectId: z.ZodString;
        dustAPIDataSourceId: z.ZodString;
        connectorId: z.ZodNullable<z.ZodString>;
        connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
        editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            editedAt: z.ZodNullable<z.ZodNumber>;
            fullName: z.ZodNullable<z.ZodString>;
            imageUrl: z.ZodNullable<z.ZodString>;
            email: z.ZodNullable<z.ZodString>;
            userId: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        }, {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        sId: string;
        createdAt: number;
        name: string;
        description: string | null;
        assistantDefaultSelected: boolean;
        dustAPIProjectId: string;
        dustAPIDataSourceId: string;
        connectorId: string | null;
        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }, {
        id: number;
        sId: string;
        createdAt: number;
        name: string;
        description: string | null;
        assistantDefaultSelected: boolean;
        dustAPIProjectId: string;
        dustAPIDataSourceId: string;
        connectorId: string | null;
        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    data_source: {
        id: number;
        sId: string;
        createdAt: number;
        name: string;
        description: string | null;
        assistantDefaultSelected: boolean;
        dustAPIProjectId: string;
        dustAPIDataSourceId: string;
        connectorId: string | null;
        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    };
    document: {
        hash: string;
        data_source_id: string;
        created: number;
        document_id: string;
        timestamp: number;
        tags: string[];
        text_size: number;
        chunk_count: number;
        chunks: {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }[];
        text?: string | null | undefined;
        parent_id?: string | null | undefined;
        source_url?: string | null | undefined;
    } | {
        hash: string;
        created: number;
        text_size: number;
        chunk_count: number;
        token_count: number;
    } | {
        document_id: string;
    };
}, {
    data_source: {
        id: number;
        sId: string;
        createdAt: number;
        name: string;
        description: string | null;
        assistantDefaultSelected: boolean;
        dustAPIProjectId: string;
        dustAPIDataSourceId: string;
        connectorId: string | null;
        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    };
    document: {
        hash: string;
        data_source_id: string;
        created: number;
        document_id: string;
        timestamp: number;
        tags: string[];
        text_size: number;
        chunk_count: number;
        chunks: {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }[];
        text?: string | null | undefined;
        parent_id?: string | null | undefined;
        source_url?: string | null | undefined;
    } | {
        hash: string;
        created: number;
        text_size: number;
        chunk_count: number;
        token_count: number;
    } | {
        document_id: string;
    };
}>;
export type UpsertDocumentResponseType = z.infer<typeof UpsertDocumentResponseSchema>;
declare const PostParentsResponseSchema: z.ZodObject<{
    updated: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    updated: boolean;
}, {
    updated: boolean;
}>;
export type PostParentsResponseType = z.infer<typeof PostParentsResponseSchema>;
declare const GetDocumentsResponseSchema: z.ZodObject<{
    documents: z.ZodArray<z.ZodObject<{
        data_source_id: z.ZodString;
        created: z.ZodNumber;
        document_id: z.ZodString;
        timestamp: z.ZodNumber;
        parent_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        tags: z.ZodArray<z.ZodString, "many">;
        source_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        hash: z.ZodString;
        text_size: z.ZodNumber;
        chunk_count: z.ZodNumber;
        chunks: z.ZodArray<z.ZodObject<{
            text: z.ZodString;
            hash: z.ZodString;
            offset: z.ZodNumber;
            vector: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>>;
            score: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }, {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }>, "many">;
        text: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        hash: string;
        data_source_id: string;
        created: number;
        document_id: string;
        timestamp: number;
        tags: string[];
        text_size: number;
        chunk_count: number;
        chunks: {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }[];
        text?: string | null | undefined;
        parent_id?: string | null | undefined;
        source_url?: string | null | undefined;
    }, {
        hash: string;
        data_source_id: string;
        created: number;
        document_id: string;
        timestamp: number;
        tags: string[];
        text_size: number;
        chunk_count: number;
        chunks: {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }[];
        text?: string | null | undefined;
        parent_id?: string | null | undefined;
        source_url?: string | null | undefined;
    }>, "many">;
    total: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    documents: {
        hash: string;
        data_source_id: string;
        created: number;
        document_id: string;
        timestamp: number;
        tags: string[];
        text_size: number;
        chunk_count: number;
        chunks: {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }[];
        text?: string | null | undefined;
        parent_id?: string | null | undefined;
        source_url?: string | null | undefined;
    }[];
    total: number;
}, {
    documents: {
        hash: string;
        data_source_id: string;
        created: number;
        document_id: string;
        timestamp: number;
        tags: string[];
        text_size: number;
        chunk_count: number;
        chunks: {
            text: string;
            hash: string;
            offset: number;
            vector?: number[] | null | undefined;
            score?: number | null | undefined;
        }[];
        text?: string | null | undefined;
        parent_id?: string | null | undefined;
        source_url?: string | null | undefined;
    }[];
    total: number;
}>;
export type GetDocumentsResponseType = z.infer<typeof GetDocumentsResponseSchema>;
declare const GetTableRowsResponseSchema: z.ZodObject<{
    row: z.ZodObject<{
        row_id: z.ZodString;
        value: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodNumber, z.ZodString, z.ZodBoolean, z.ZodObject<{
            type: z.ZodLiteral<"datetime">;
            epoch: z.ZodNumber;
            string_value: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "datetime";
            epoch: number;
            string_value?: string | undefined;
        }, {
            type: "datetime";
            epoch: number;
            string_value?: string | undefined;
        }>, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        value: Record<string, string | number | boolean | {
            type: "datetime";
            epoch: number;
            string_value?: string | undefined;
        } | null>;
        row_id: string;
    }, {
        value: Record<string, string | number | boolean | {
            type: "datetime";
            epoch: number;
            string_value?: string | undefined;
        } | null>;
        row_id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    row: {
        value: Record<string, string | number | boolean | {
            type: "datetime";
            epoch: number;
            string_value?: string | undefined;
        } | null>;
        row_id: string;
    };
}, {
    row: {
        value: Record<string, string | number | boolean | {
            type: "datetime";
            epoch: number;
            string_value?: string | undefined;
        } | null>;
        row_id: string;
    };
}>;
export type GetTableRowsResponseType = z.infer<typeof GetTableRowsResponseSchema>;
export declare const UpsertTableRowsRequestSchema: z.ZodObject<{
    rows: z.ZodArray<z.ZodObject<{
        row_id: z.ZodString;
        value: z.ZodRecord<z.ZodString, z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodObject<{
            type: z.ZodLiteral<"datetime">;
            epoch: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "datetime";
            epoch: number;
        }, {
            type: "datetime";
            epoch: number;
        }>]>>>;
    }, "strip", z.ZodTypeAny, {
        value: Record<string, string | number | boolean | {
            type: "datetime";
            epoch: number;
        } | null>;
        row_id: string;
    }, {
        value: Record<string, string | number | boolean | {
            type: "datetime";
            epoch: number;
        } | null>;
        row_id: string;
    }>, "many">;
    truncate: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    rows: {
        value: Record<string, string | number | boolean | {
            type: "datetime";
            epoch: number;
        } | null>;
        row_id: string;
    }[];
    truncate?: boolean | undefined;
}, {
    rows: {
        value: Record<string, string | number | boolean | {
            type: "datetime";
            epoch: number;
        } | null>;
        row_id: string;
    }[];
    truncate?: boolean | undefined;
}>;
export type CellValueType = z.infer<typeof UpsertTableRowsRequestSchema>["rows"][number]["value"][string];
declare const UpsertTableRowsResponseSchema: z.ZodObject<{
    table: z.ZodObject<{
        name: z.ZodString;
        table_id: z.ZodString;
        description: z.ZodString;
        schema: z.ZodNullable<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            value_type: z.ZodEnum<["int", "float", "text", "bool", "datetime"]>;
            possible_values: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }, {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        schema: {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }[] | null;
        name: string;
        description: string;
        table_id: string;
    }, {
        schema: {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }[] | null;
        name: string;
        description: string;
        table_id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    table: {
        schema: {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }[] | null;
        name: string;
        description: string;
        table_id: string;
    };
}, {
    table: {
        schema: {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }[] | null;
        name: string;
        description: string;
        table_id: string;
    };
}>;
export type UpsertTableRowsResponseType = z.infer<typeof UpsertTableRowsResponseSchema>;
declare const ListTableRowsResponseSchema: z.ZodObject<{
    rows: z.ZodArray<z.ZodObject<{
        row_id: z.ZodString;
        value: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodNumber, z.ZodString, z.ZodBoolean, z.ZodObject<{
            type: z.ZodLiteral<"datetime">;
            epoch: z.ZodNumber;
            string_value: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "datetime";
            epoch: number;
            string_value?: string | undefined;
        }, {
            type: "datetime";
            epoch: number;
            string_value?: string | undefined;
        }>, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        value: Record<string, string | number | boolean | {
            type: "datetime";
            epoch: number;
            string_value?: string | undefined;
        } | null>;
        row_id: string;
    }, {
        value: Record<string, string | number | boolean | {
            type: "datetime";
            epoch: number;
            string_value?: string | undefined;
        } | null>;
        row_id: string;
    }>, "many">;
    offset: z.ZodNumber;
    limit: z.ZodNumber;
    total: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    offset: number;
    total: number;
    rows: {
        value: Record<string, string | number | boolean | {
            type: "datetime";
            epoch: number;
            string_value?: string | undefined;
        } | null>;
        row_id: string;
    }[];
    limit: number;
}, {
    offset: number;
    total: number;
    rows: {
        value: Record<string, string | number | boolean | {
            type: "datetime";
            epoch: number;
            string_value?: string | undefined;
        } | null>;
        row_id: string;
    }[];
    limit: number;
}>;
export type ListTableRowsResponseType = z.infer<typeof ListTableRowsResponseSchema>;
declare const GetTableResponseSchema: z.ZodObject<{
    table: z.ZodObject<{
        table_id: z.ZodString;
        name: z.ZodString;
        description: z.ZodString;
        schema: z.ZodNullable<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            value_type: z.ZodEnum<["int", "float", "text", "bool", "datetime"]>;
            possible_values: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }, {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }>, "many">>;
        timestamp: z.ZodNumber;
        tags: z.ZodArray<z.ZodString, "many">;
        parents: z.ZodArray<z.ZodString, "many">;
        parent_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        mime_type: z.ZodOptional<z.ZodString>;
        title: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        schema: {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }[] | null;
        name: string;
        description: string;
        timestamp: number;
        tags: string[];
        table_id: string;
        parents: string[];
        parent_id?: string | null | undefined;
        mime_type?: string | undefined;
        title?: string | undefined;
    }, {
        schema: {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }[] | null;
        name: string;
        description: string;
        timestamp: number;
        tags: string[];
        table_id: string;
        parents: string[];
        parent_id?: string | null | undefined;
        mime_type?: string | undefined;
        title?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    table: {
        schema: {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }[] | null;
        name: string;
        description: string;
        timestamp: number;
        tags: string[];
        table_id: string;
        parents: string[];
        parent_id?: string | null | undefined;
        mime_type?: string | undefined;
        title?: string | undefined;
    };
}, {
    table: {
        schema: {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }[] | null;
        name: string;
        description: string;
        timestamp: number;
        tags: string[];
        table_id: string;
        parents: string[];
        parent_id?: string | null | undefined;
        mime_type?: string | undefined;
        title?: string | undefined;
    };
}>;
export type GetTableResponseType = z.infer<typeof GetTableResponseSchema>;
export declare const PostTableParentsRequestSchema: z.ZodObject<{
    parent_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    parents: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    parents: string[];
    parent_id?: string | null | undefined;
}, {
    parents: string[];
    parent_id?: string | null | undefined;
}>;
declare const PostTableParentsResponseSchema: z.ZodObject<{
    updated: z.ZodLiteral<true>;
}, "strip", z.ZodTypeAny, {
    updated: true;
}, {
    updated: true;
}>;
export type PostTableParentsResponseType = z.infer<typeof PostTableParentsResponseSchema>;
export declare const UpsertTableFromCsvRequestSchema: z.ZodObject<{
    name: z.ZodString;
    description: z.ZodString;
    timestamp: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    parentId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    parents: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    truncate: z.ZodBoolean;
    async: z.ZodOptional<z.ZodBoolean>;
    title: z.ZodString;
    mimeType: z.ZodString;
    sourceUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    tableId: z.ZodString;
    fileId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    description: string;
    title: string;
    fileId: string;
    truncate: boolean;
    mimeType: string;
    tableId: string;
    async?: boolean | undefined;
    timestamp?: number | null | undefined;
    tags?: string[] | null | undefined;
    parents?: string[] | null | undefined;
    sourceUrl?: string | null | undefined;
    parentId?: string | null | undefined;
}, {
    name: string;
    description: string;
    title: string;
    fileId: string;
    truncate: boolean;
    mimeType: string;
    tableId: string;
    async?: boolean | undefined;
    timestamp?: number | null | undefined;
    tags?: string[] | null | undefined;
    parents?: string[] | null | undefined;
    sourceUrl?: string | null | undefined;
    parentId?: string | null | undefined;
}>;
export type UpsertTableFromCsvRequestType = z.infer<typeof UpsertTableFromCsvRequestSchema>;
declare const PostTableCSVAsyncResponseSchema: z.ZodObject<{
    table: z.ZodObject<{
        table_id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        table_id: string;
    }, {
        table_id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    table: {
        table_id: string;
    };
}, {
    table: {
        table_id: string;
    };
}>;
export type PostTableCSVAsyncResponseType = z.infer<typeof PostTableCSVAsyncResponseSchema>;
declare const PostTableCSVResponseSchema: z.ZodObject<{
    table: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        value_type: z.ZodEnum<["int", "float", "text", "bool", "datetime"]>;
        possible_values: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        value_type: "text" | "float" | "datetime" | "int" | "bool";
        possible_values?: string[] | null | undefined;
    }, {
        name: string;
        value_type: "text" | "float" | "datetime" | "int" | "bool";
        possible_values?: string[] | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    table: {
        name: string;
        value_type: "text" | "float" | "datetime" | "int" | "bool";
        possible_values?: string[] | null | undefined;
    }[];
}, {
    table: {
        name: string;
        value_type: "text" | "float" | "datetime" | "int" | "bool";
        possible_values?: string[] | null | undefined;
    }[];
}>;
export type PostTableCSVResponseType = z.infer<typeof PostTableCSVResponseSchema>;
declare const ListTablesResponseSchema: z.ZodObject<{
    tables: z.ZodArray<z.ZodObject<{
        table_id: z.ZodString;
        name: z.ZodString;
        description: z.ZodString;
        schema: z.ZodNullable<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            value_type: z.ZodEnum<["int", "float", "text", "bool", "datetime"]>;
            possible_values: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }, {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }>, "many">>;
        timestamp: z.ZodNumber;
        tags: z.ZodArray<z.ZodString, "many">;
        parents: z.ZodArray<z.ZodString, "many">;
        parent_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        mime_type: z.ZodOptional<z.ZodString>;
        title: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        schema: {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }[] | null;
        name: string;
        description: string;
        timestamp: number;
        tags: string[];
        table_id: string;
        parents: string[];
        parent_id?: string | null | undefined;
        mime_type?: string | undefined;
        title?: string | undefined;
    }, {
        schema: {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }[] | null;
        name: string;
        description: string;
        timestamp: number;
        tags: string[];
        table_id: string;
        parents: string[];
        parent_id?: string | null | undefined;
        mime_type?: string | undefined;
        title?: string | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    tables: {
        schema: {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }[] | null;
        name: string;
        description: string;
        timestamp: number;
        tags: string[];
        table_id: string;
        parents: string[];
        parent_id?: string | null | undefined;
        mime_type?: string | undefined;
        title?: string | undefined;
    }[];
}, {
    tables: {
        schema: {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }[] | null;
        name: string;
        description: string;
        timestamp: number;
        tags: string[];
        table_id: string;
        parents: string[];
        parent_id?: string | null | undefined;
        mime_type?: string | undefined;
        title?: string | undefined;
    }[];
}>;
export type ListTablesResponseType = z.infer<typeof ListTablesResponseSchema>;
export declare const UpsertDatabaseTableRequestSchema: z.ZodObject<{
    table_id: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    description: z.ZodString;
    timestamp: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    parent_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    parents: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    remote_database_table_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    remote_database_secret_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    title: z.ZodString;
    mime_type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    source_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    description: string;
    title: string;
    timestamp?: number | null | undefined;
    parent_id?: string | null | undefined;
    tags?: string[] | null | undefined;
    source_url?: string | null | undefined;
    table_id?: string | undefined;
    parents?: string[] | null | undefined;
    mime_type?: string | null | undefined;
    remote_database_table_id?: string | null | undefined;
    remote_database_secret_id?: string | null | undefined;
}, {
    name: string;
    description: string;
    title: string;
    timestamp?: number | null | undefined;
    parent_id?: string | null | undefined;
    tags?: string[] | null | undefined;
    source_url?: string | null | undefined;
    table_id?: string | undefined;
    parents?: string[] | null | undefined;
    mime_type?: string | null | undefined;
    remote_database_table_id?: string | null | undefined;
    remote_database_secret_id?: string | null | undefined;
}>;
export type UpsertDatabaseTableRequestType = z.infer<typeof UpsertDatabaseTableRequestSchema>;
declare const UpsertTableResponseSchema: z.ZodObject<{
    table: z.ZodObject<{
        table_id: z.ZodString;
        name: z.ZodString;
        description: z.ZodString;
        schema: z.ZodNullable<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            value_type: z.ZodEnum<["int", "float", "text", "bool", "datetime"]>;
            possible_values: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }, {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }>, "many">>;
        timestamp: z.ZodNumber;
        tags: z.ZodArray<z.ZodString, "many">;
        parents: z.ZodArray<z.ZodString, "many">;
        parent_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        mime_type: z.ZodOptional<z.ZodString>;
        title: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        schema: {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }[] | null;
        name: string;
        description: string;
        timestamp: number;
        tags: string[];
        table_id: string;
        parents: string[];
        parent_id?: string | null | undefined;
        mime_type?: string | undefined;
        title?: string | undefined;
    }, {
        schema: {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }[] | null;
        name: string;
        description: string;
        timestamp: number;
        tags: string[];
        table_id: string;
        parents: string[];
        parent_id?: string | null | undefined;
        mime_type?: string | undefined;
        title?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    table: {
        schema: {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }[] | null;
        name: string;
        description: string;
        timestamp: number;
        tags: string[];
        table_id: string;
        parents: string[];
        parent_id?: string | null | undefined;
        mime_type?: string | undefined;
        title?: string | undefined;
    };
}, {
    table: {
        schema: {
            name: string;
            value_type: "text" | "float" | "datetime" | "int" | "bool";
            possible_values?: string[] | null | undefined;
        }[] | null;
        name: string;
        description: string;
        timestamp: number;
        tags: string[];
        table_id: string;
        parents: string[];
        parent_id?: string | null | undefined;
        mime_type?: string | undefined;
        title?: string | undefined;
    };
}>;
export type UpsertTableResponseType = z.infer<typeof UpsertTableResponseSchema>;
declare const SupportedUsageTablesSchema: z.ZodType<"all" | "users" | "feedbacks" | "assistant_messages" | "builders" | "assistants", z.ZodTypeDef, "all" | "users" | "feedbacks" | "assistant_messages" | "builders" | "assistants">;
export type UsageTableType = z.infer<typeof SupportedUsageTablesSchema>;
export declare const GetFoldersResponseSchema: z.ZodObject<{
    folders: z.ZodArray<z.ZodObject<{
        data_source_id: z.ZodString;
        folder_id: z.ZodString;
        title: z.ZodString;
        parents: z.ZodArray<z.ZodString, "many">;
        timestamp: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        data_source_id: string;
        timestamp: number;
        parents: string[];
        title: string;
        folder_id: string;
    }, {
        data_source_id: string;
        timestamp: number;
        parents: string[];
        title: string;
        folder_id: string;
    }>, "many">;
    total: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    total: number;
    folders: {
        data_source_id: string;
        timestamp: number;
        parents: string[];
        title: string;
        folder_id: string;
    }[];
}, {
    total: number;
    folders: {
        data_source_id: string;
        timestamp: number;
        parents: string[];
        title: string;
        folder_id: string;
    }[];
}>;
export type GetFoldersResponseType = z.infer<typeof GetFoldersResponseSchema>;
export declare const GetFolderResponseSchema: z.ZodObject<{
    folder: z.ZodObject<{
        data_source_id: z.ZodString;
        folder_id: z.ZodString;
        title: z.ZodString;
        parents: z.ZodArray<z.ZodString, "many">;
        timestamp: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        data_source_id: string;
        timestamp: number;
        parents: string[];
        title: string;
        folder_id: string;
    }, {
        data_source_id: string;
        timestamp: number;
        parents: string[];
        title: string;
        folder_id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    folder: {
        data_source_id: string;
        timestamp: number;
        parents: string[];
        title: string;
        folder_id: string;
    };
}, {
    folder: {
        data_source_id: string;
        timestamp: number;
        parents: string[];
        title: string;
        folder_id: string;
    };
}>;
export type GetFolderResponseType = z.infer<typeof GetFolderResponseSchema>;
export declare const DeleteFolderResponseSchema: z.ZodObject<{
    folder: z.ZodObject<{
        folder_id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        folder_id: string;
    }, {
        folder_id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    folder: {
        folder_id: string;
    };
}, {
    folder: {
        folder_id: string;
    };
}>;
export type DeleteFolderResponseType = z.infer<typeof DeleteFolderResponseSchema>;
export declare const UpsertFolderResponseSchema: z.ZodObject<{
    folder: z.ZodObject<{
        data_source_id: z.ZodString;
        folder_id: z.ZodString;
        title: z.ZodString;
        parents: z.ZodArray<z.ZodString, "many">;
        timestamp: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        data_source_id: string;
        timestamp: number;
        parents: string[];
        title: string;
        folder_id: string;
    }, {
        data_source_id: string;
        timestamp: number;
        parents: string[];
        title: string;
        folder_id: string;
    }>;
    data_source: z.ZodObject<{
        id: z.ZodNumber;
        sId: z.ZodString;
        createdAt: z.ZodNumber;
        name: z.ZodString;
        description: z.ZodNullable<z.ZodString>;
        assistantDefaultSelected: z.ZodBoolean;
        dustAPIProjectId: z.ZodString;
        dustAPIDataSourceId: z.ZodString;
        connectorId: z.ZodNullable<z.ZodString>;
        connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
        editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            editedAt: z.ZodNullable<z.ZodNumber>;
            fullName: z.ZodNullable<z.ZodString>;
            imageUrl: z.ZodNullable<z.ZodString>;
            email: z.ZodNullable<z.ZodString>;
            userId: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        }, {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        sId: string;
        createdAt: number;
        name: string;
        description: string | null;
        assistantDefaultSelected: boolean;
        dustAPIProjectId: string;
        dustAPIDataSourceId: string;
        connectorId: string | null;
        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }, {
        id: number;
        sId: string;
        createdAt: number;
        name: string;
        description: string | null;
        assistantDefaultSelected: boolean;
        dustAPIProjectId: string;
        dustAPIDataSourceId: string;
        connectorId: string | null;
        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    folder: {
        data_source_id: string;
        timestamp: number;
        parents: string[];
        title: string;
        folder_id: string;
    };
    data_source: {
        id: number;
        sId: string;
        createdAt: number;
        name: string;
        description: string | null;
        assistantDefaultSelected: boolean;
        dustAPIProjectId: string;
        dustAPIDataSourceId: string;
        connectorId: string | null;
        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    };
}, {
    folder: {
        data_source_id: string;
        timestamp: number;
        parents: string[];
        title: string;
        folder_id: string;
    };
    data_source: {
        id: number;
        sId: string;
        createdAt: number;
        name: string;
        description: string | null;
        assistantDefaultSelected: boolean;
        dustAPIProjectId: string;
        dustAPIDataSourceId: string;
        connectorId: string | null;
        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    };
}>;
export type UpsertFolderResponseType = z.infer<typeof UpsertFolderResponseSchema>;
export declare const UpsertDataSourceFolderRequestSchema: z.ZodObject<{
    timestamp: z.ZodNumber;
    parents: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    parent_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    title: z.ZodString;
    mime_type: z.ZodString;
    source_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    provider_visibility: z.ZodOptional<z.ZodNullable<z.ZodType<"private" | "public", z.ZodTypeDef, "private" | "public">>>;
}, "strip", z.ZodTypeAny, {
    timestamp: number;
    mime_type: string;
    title: string;
    parent_id?: string | null | undefined;
    source_url?: string | null | undefined;
    parents?: string[] | null | undefined;
    provider_visibility?: "private" | "public" | null | undefined;
}, {
    timestamp: number;
    mime_type: string;
    title: string;
    parent_id?: string | null | undefined;
    source_url?: string | null | undefined;
    parents?: string[] | null | undefined;
    provider_visibility?: "private" | "public" | null | undefined;
}>;
export type UpsertDataSourceFolderRequestType = z.infer<typeof UpsertDataSourceFolderRequestSchema>;
export declare const GetWorkspaceUsageRequestSchema: z.ZodUnion<[z.ZodObject<{
    start: z.ZodEffects<z.ZodString, string, string>;
    end: z.ZodUndefined;
    mode: z.ZodLiteral<"month">;
    table: z.ZodType<"all" | "users" | "feedbacks" | "assistant_messages" | "builders" | "assistants", z.ZodTypeDef, "all" | "users" | "feedbacks" | "assistant_messages" | "builders" | "assistants">;
    format: z.ZodDefault<z.ZodOptional<z.ZodEnum<["csv", "json"]>>>;
}, "strip", z.ZodTypeAny, {
    table: "all" | "users" | "feedbacks" | "assistant_messages" | "builders" | "assistants";
    start: string;
    mode: "month";
    format: "json" | "csv";
    end?: undefined;
}, {
    table: "all" | "users" | "feedbacks" | "assistant_messages" | "builders" | "assistants";
    start: string;
    mode: "month";
    end?: undefined;
    format?: "json" | "csv" | undefined;
}>, z.ZodObject<{
    start: z.ZodEffects<z.ZodString, string, string>;
    end: z.ZodEffects<z.ZodString, string, string>;
    mode: z.ZodLiteral<"range">;
    table: z.ZodType<"all" | "users" | "feedbacks" | "assistant_messages" | "builders" | "assistants", z.ZodTypeDef, "all" | "users" | "feedbacks" | "assistant_messages" | "builders" | "assistants">;
    format: z.ZodDefault<z.ZodOptional<z.ZodEnum<["csv", "json"]>>>;
}, "strip", z.ZodTypeAny, {
    table: "all" | "users" | "feedbacks" | "assistant_messages" | "builders" | "assistants";
    end: string;
    start: string;
    mode: "range";
    format: "json" | "csv";
}, {
    table: "all" | "users" | "feedbacks" | "assistant_messages" | "builders" | "assistants";
    end: string;
    start: string;
    mode: "range";
    format?: "json" | "csv" | undefined;
}>]>;
export type GetWorkspaceUsageRequestType = z.infer<typeof GetWorkspaceUsageRequestSchema>;
export declare const FileUploadUrlRequestSchema: z.ZodObject<{
    contentType: z.ZodType<"application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp", z.ZodTypeDef, "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp">;
    fileName: z.ZodString;
    fileSize: z.ZodNumber;
    useCase: z.ZodUnion<[z.ZodLiteral<"conversation">, z.ZodLiteral<"upsert_table">]>;
    useCaseMetadata: z.ZodOptional<z.ZodObject<{
        conversationId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        conversationId: string;
    }, {
        conversationId: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    contentType: "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp";
    fileName: string;
    fileSize: number;
    useCase: "conversation" | "upsert_table";
    useCaseMetadata?: {
        conversationId: string;
    } | undefined;
}, {
    contentType: "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/vnd.google-apps.document" | "application/vnd.google-apps.presentation" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "application/vnd.google-apps.spreadsheet" | "application/vnd.ms-excel" | "application/pdf" | "application/vnd.dust.section.json" | "text/comma-separated-values" | "text/csv" | "text/markdown" | "text/plain" | "text/tab-separated-values" | "text/tsv" | "text/vnd.dust.attachment.slack.thread" | "text/html" | "text/xml" | "text/calendar" | "text/css" | "text/javascript" | "text/typescript" | "application/json" | "application/xml" | "application/x-sh" | "text/x-sh" | "text/x-python" | "text/x-python-script" | "application/x-yaml" | "text/yaml" | "text/vnd.yaml" | "text/x-c" | "text/x-csharp" | "text/x-java-source" | "text/x-php" | "text/x-ruby" | "text/x-sql" | "text/x-swift" | "text/x-rust" | "text/x-go" | "text/x-kotlin" | "text/x-scala" | "text/x-groovy" | "text/x-perl" | "text/x-perl-script" | "image/jpeg" | "image/png" | "image/gif" | "image/webp";
    fileName: string;
    fileSize: number;
    useCase: "conversation" | "upsert_table";
    useCaseMetadata?: {
        conversationId: string;
    } | undefined;
}>;
export type FileUploadUrlRequestType = z.infer<typeof FileUploadUrlRequestSchema>;
export declare const FileTypeSchema: z.ZodObject<{
    id: z.ZodString;
    sId: z.ZodString;
    contentType: z.ZodString;
    downloadUrl: z.ZodOptional<z.ZodString>;
    fileName: z.ZodString;
    fileSize: z.ZodNumber;
    status: z.ZodType<"created" | "failed" | "ready", z.ZodTypeDef, "created" | "failed" | "ready">;
    uploadUrl: z.ZodOptional<z.ZodString>;
    publicUrl: z.ZodOptional<z.ZodString>;
    useCase: z.ZodType<"conversation" | "tool_output" | "upsert_table" | "avatar" | "upsert_document" | "folders_document", z.ZodTypeDef, "conversation" | "tool_output" | "upsert_table" | "avatar" | "upsert_document" | "folders_document">;
}, "strip", z.ZodTypeAny, {
    status: "created" | "failed" | "ready";
    id: string;
    sId: string;
    contentType: string;
    fileName: string;
    fileSize: number;
    useCase: "conversation" | "tool_output" | "upsert_table" | "avatar" | "upsert_document" | "folders_document";
    downloadUrl?: string | undefined;
    uploadUrl?: string | undefined;
    publicUrl?: string | undefined;
}, {
    status: "created" | "failed" | "ready";
    id: string;
    sId: string;
    contentType: string;
    fileName: string;
    fileSize: number;
    useCase: "conversation" | "tool_output" | "upsert_table" | "avatar" | "upsert_document" | "folders_document";
    downloadUrl?: string | undefined;
    uploadUrl?: string | undefined;
    publicUrl?: string | undefined;
}>;
export type FileType = z.infer<typeof FileTypeSchema>;
export declare const FileTypeWithUploadUrlSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    sId: z.ZodString;
    contentType: z.ZodString;
    downloadUrl: z.ZodOptional<z.ZodString>;
    fileName: z.ZodString;
    fileSize: z.ZodNumber;
    status: z.ZodType<"created" | "failed" | "ready", z.ZodTypeDef, "created" | "failed" | "ready">;
    uploadUrl: z.ZodOptional<z.ZodString>;
    publicUrl: z.ZodOptional<z.ZodString>;
    useCase: z.ZodType<"conversation" | "tool_output" | "upsert_table" | "avatar" | "upsert_document" | "folders_document", z.ZodTypeDef, "conversation" | "tool_output" | "upsert_table" | "avatar" | "upsert_document" | "folders_document">;
}, {
    uploadUrl: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    status: "created" | "failed" | "ready";
    id: string;
    sId: string;
    contentType: string;
    fileName: string;
    fileSize: number;
    useCase: "conversation" | "tool_output" | "upsert_table" | "avatar" | "upsert_document" | "folders_document";
    uploadUrl: string;
    downloadUrl?: string | undefined;
    publicUrl?: string | undefined;
}, {
    status: "created" | "failed" | "ready";
    id: string;
    sId: string;
    contentType: string;
    fileName: string;
    fileSize: number;
    useCase: "conversation" | "tool_output" | "upsert_table" | "avatar" | "upsert_document" | "folders_document";
    uploadUrl: string;
    downloadUrl?: string | undefined;
    publicUrl?: string | undefined;
}>;
export declare const FileUploadRequestResponseSchema: z.ZodObject<{
    file: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        sId: z.ZodString;
        contentType: z.ZodString;
        downloadUrl: z.ZodOptional<z.ZodString>;
        fileName: z.ZodString;
        fileSize: z.ZodNumber;
        status: z.ZodType<"created" | "failed" | "ready", z.ZodTypeDef, "created" | "failed" | "ready">;
        uploadUrl: z.ZodOptional<z.ZodString>;
        publicUrl: z.ZodOptional<z.ZodString>;
        useCase: z.ZodType<"conversation" | "tool_output" | "upsert_table" | "avatar" | "upsert_document" | "folders_document", z.ZodTypeDef, "conversation" | "tool_output" | "upsert_table" | "avatar" | "upsert_document" | "folders_document">;
    }, {
        uploadUrl: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        status: "created" | "failed" | "ready";
        id: string;
        sId: string;
        contentType: string;
        fileName: string;
        fileSize: number;
        useCase: "conversation" | "tool_output" | "upsert_table" | "avatar" | "upsert_document" | "folders_document";
        uploadUrl: string;
        downloadUrl?: string | undefined;
        publicUrl?: string | undefined;
    }, {
        status: "created" | "failed" | "ready";
        id: string;
        sId: string;
        contentType: string;
        fileName: string;
        fileSize: number;
        useCase: "conversation" | "tool_output" | "upsert_table" | "avatar" | "upsert_document" | "folders_document";
        uploadUrl: string;
        downloadUrl?: string | undefined;
        publicUrl?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    file: {
        status: "created" | "failed" | "ready";
        id: string;
        sId: string;
        contentType: string;
        fileName: string;
        fileSize: number;
        useCase: "conversation" | "tool_output" | "upsert_table" | "avatar" | "upsert_document" | "folders_document";
        uploadUrl: string;
        downloadUrl?: string | undefined;
        publicUrl?: string | undefined;
    };
}, {
    file: {
        status: "created" | "failed" | "ready";
        id: string;
        sId: string;
        contentType: string;
        fileName: string;
        fileSize: number;
        useCase: "conversation" | "tool_output" | "upsert_table" | "avatar" | "upsert_document" | "folders_document";
        uploadUrl: string;
        downloadUrl?: string | undefined;
        publicUrl?: string | undefined;
    };
}>;
export type FileUploadRequestResponseType = z.infer<typeof FileUploadRequestResponseSchema>;
export declare const FileUploadedRequestResponseSchema: z.ZodObject<{
    file: z.ZodObject<{
        id: z.ZodString;
        sId: z.ZodString;
        contentType: z.ZodString;
        downloadUrl: z.ZodOptional<z.ZodString>;
        fileName: z.ZodString;
        fileSize: z.ZodNumber;
        status: z.ZodType<"created" | "failed" | "ready", z.ZodTypeDef, "created" | "failed" | "ready">;
        uploadUrl: z.ZodOptional<z.ZodString>;
        publicUrl: z.ZodOptional<z.ZodString>;
        useCase: z.ZodType<"conversation" | "tool_output" | "upsert_table" | "avatar" | "upsert_document" | "folders_document", z.ZodTypeDef, "conversation" | "tool_output" | "upsert_table" | "avatar" | "upsert_document" | "folders_document">;
    }, "strip", z.ZodTypeAny, {
        status: "created" | "failed" | "ready";
        id: string;
        sId: string;
        contentType: string;
        fileName: string;
        fileSize: number;
        useCase: "conversation" | "tool_output" | "upsert_table" | "avatar" | "upsert_document" | "folders_document";
        downloadUrl?: string | undefined;
        uploadUrl?: string | undefined;
        publicUrl?: string | undefined;
    }, {
        status: "created" | "failed" | "ready";
        id: string;
        sId: string;
        contentType: string;
        fileName: string;
        fileSize: number;
        useCase: "conversation" | "tool_output" | "upsert_table" | "avatar" | "upsert_document" | "folders_document";
        downloadUrl?: string | undefined;
        uploadUrl?: string | undefined;
        publicUrl?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    file: {
        status: "created" | "failed" | "ready";
        id: string;
        sId: string;
        contentType: string;
        fileName: string;
        fileSize: number;
        useCase: "conversation" | "tool_output" | "upsert_table" | "avatar" | "upsert_document" | "folders_document";
        downloadUrl?: string | undefined;
        uploadUrl?: string | undefined;
        publicUrl?: string | undefined;
    };
}, {
    file: {
        status: "created" | "failed" | "ready";
        id: string;
        sId: string;
        contentType: string;
        fileName: string;
        fileSize: number;
        useCase: "conversation" | "tool_output" | "upsert_table" | "avatar" | "upsert_document" | "folders_document";
        downloadUrl?: string | undefined;
        uploadUrl?: string | undefined;
        publicUrl?: string | undefined;
    };
}>;
export type FileUploadedRequestResponseType = z.infer<typeof FileUploadedRequestResponseSchema>;
export declare const MeResponseSchema: z.ZodObject<{
    user: z.ZodIntersection<z.ZodObject<{
        sId: z.ZodString;
        id: z.ZodNumber;
        createdAt: z.ZodNumber;
        provider: z.ZodNullable<z.ZodType<"github" | "google" | "auth0" | "okta" | "samlp" | "waad", z.ZodTypeDef, "github" | "google" | "auth0" | "okta" | "samlp" | "waad">>;
        username: z.ZodString;
        email: z.ZodString;
        firstName: z.ZodString;
        lastName: z.ZodNullable<z.ZodString>;
        fullName: z.ZodString;
        image: z.ZodNullable<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
        email: string;
        fullName: string;
        id: number;
        sId: string;
        createdAt: number;
        username: string;
        firstName: string;
        lastName: string | null;
        image: string | null;
    }, {
        provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
        email: string;
        fullName: string;
        id: number;
        sId: string;
        createdAt: number;
        username: string;
        firstName: string;
        lastName: string | null;
        image: string | null;
    }>, z.ZodObject<{
        workspaces: z.ZodUnion<[z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            sId: z.ZodString;
            name: z.ZodString;
            role: z.ZodEnum<["admin", "builder", "user", "none"]>;
            segmentation: z.ZodNullable<z.ZodType<"interesting", z.ZodTypeDef, "interesting">>;
            whiteListedProviders: z.ZodNullable<z.ZodArray<z.ZodType<"openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks", z.ZodTypeDef, "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks">, "many">>;
            defaultEmbeddingProvider: z.ZodNullable<z.ZodType<"openai" | "mistral", z.ZodTypeDef, "openai" | "mistral">>;
        }, {
            ssoEnforced: z.ZodOptional<z.ZodBoolean>;
        }>, "strip", z.ZodTypeAny, {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        }, {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        }>, "many">, z.ZodArray<z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            sId: z.ZodString;
            name: z.ZodString;
            role: z.ZodEnum<["admin", "builder", "user", "none"]>;
            segmentation: z.ZodNullable<z.ZodType<"interesting", z.ZodTypeDef, "interesting">>;
            whiteListedProviders: z.ZodNullable<z.ZodArray<z.ZodType<"openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks", z.ZodTypeDef, "openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks">, "many">>;
            defaultEmbeddingProvider: z.ZodNullable<z.ZodType<"openai" | "mistral", z.ZodTypeDef, "openai" | "mistral">>;
        }, {
            ssoEnforced: z.ZodOptional<z.ZodBoolean>;
        }>, {
            blacklistedDomains: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
        }>, "strip", z.ZodTypeAny, {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            blacklistedDomains: string[] | null;
            ssoEnforced?: boolean | undefined;
        }, {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            blacklistedDomains: string[] | null;
            ssoEnforced?: boolean | undefined;
        }>, "many">]>;
    }, "strip", z.ZodTypeAny, {
        workspaces: {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        }[] | {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            blacklistedDomains: string[] | null;
            ssoEnforced?: boolean | undefined;
        }[];
    }, {
        workspaces: {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        }[] | {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            blacklistedDomains: string[] | null;
            ssoEnforced?: boolean | undefined;
        }[];
    }>>;
}, "strip", z.ZodTypeAny, {
    user: {
        provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
        email: string;
        fullName: string;
        id: number;
        sId: string;
        createdAt: number;
        username: string;
        firstName: string;
        lastName: string | null;
        image: string | null;
    } & {
        workspaces: {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        }[] | {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            blacklistedDomains: string[] | null;
            ssoEnforced?: boolean | undefined;
        }[];
    };
}, {
    user: {
        provider: "github" | "google" | "auth0" | "okta" | "samlp" | "waad" | null;
        email: string;
        fullName: string;
        id: number;
        sId: string;
        createdAt: number;
        username: string;
        firstName: string;
        lastName: string | null;
        image: string | null;
    } & {
        workspaces: {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            ssoEnforced?: boolean | undefined;
        }[] | {
            id: number;
            sId: string;
            name: string;
            role: "admin" | "builder" | "user" | "none";
            segmentation: "interesting" | null;
            whiteListedProviders: ("openai" | "anthropic" | "mistral" | "google_ai_studio" | "togetherai" | "deepseek" | "fireworks")[] | null;
            defaultEmbeddingProvider: "openai" | "mistral" | null;
            blacklistedDomains: string[] | null;
            ssoEnforced?: boolean | undefined;
        }[];
    };
}>;
export type MeResponseType = z.infer<typeof MeResponseSchema>;
export declare const CancelMessageGenerationResponseSchema: z.ZodObject<{
    success: z.ZodLiteral<true>;
}, "strip", z.ZodTypeAny, {
    success: true;
}, {
    success: true;
}>;
export type CancelMessageGenerationResponseType = z.infer<typeof CancelMessageGenerationResponseSchema>;
export declare const CancelMessageGenerationRequestSchema: z.ZodObject<{
    messageIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    messageIds: string[];
}, {
    messageIds: string[];
}>;
export type CancelMessageGenerationRequestType = z.infer<typeof CancelMessageGenerationRequestSchema>;
export declare function isRetrievalActionType(action: AgentActionPublicType): action is RetrievalActionPublicType;
export declare function isWebsearchActionType(action: AgentActionPublicType): action is WebsearchActionPublicType;
export declare function isTablesQueryActionType(action: AgentActionPublicType): action is TablesQueryActionPublicType;
export declare function isDustAppRunActionType(action: AgentActionPublicType): action is DustAppRunActionPublicType;
export declare function isProcessActionType(action: AgentActionPublicType): action is ProcessActionPublicType;
export declare function BrowseActionPublicType(action: AgentActionPublicType): action is BrowseActionPublicType;
export declare function isReasoningActionType(action: AgentActionPublicType): action is ReasoningActionPublicType;
export declare function isSearchLabelsActionType(action: AgentActionPublicType): action is SearchLabelsActionPublicType;
export declare function isAgentMention(arg: AgentMentionType): arg is AgentMentionType;
export declare function assertNever(x: never): never;
export declare function removeNulls<T>(arr: (T | null | undefined)[]): T[];
type ConnectorProviderDocumentType = Exclude<ConnectorProvider, "webcrawler"> | "document";
export declare function getProviderFromRetrievedDocument(document: RetrievalDocumentPublicType): ConnectorProviderDocumentType;
export declare function getTitleFromRetrievedDocument(document: RetrievalDocumentPublicType): string;
export declare const AppsCheckRequestSchema: z.ZodObject<{
    apps: z.ZodArray<z.ZodObject<{
        appId: z.ZodString;
        appHash: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        appId: string;
        appHash: string;
    }, {
        appId: string;
        appHash: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    apps: {
        appId: string;
        appHash: string;
    }[];
}, {
    apps: {
        appId: string;
        appHash: string;
    }[];
}>;
export type AppsCheckRequestType = z.infer<typeof AppsCheckRequestSchema>;
export declare const AppsCheckResponseSchema: z.ZodObject<{
    apps: z.ZodArray<z.ZodObject<{
        appId: z.ZodString;
        appHash: z.ZodString;
        deployed: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        appId: string;
        appHash: string;
        deployed: boolean;
    }, {
        appId: string;
        appHash: string;
        deployed: boolean;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    apps: {
        appId: string;
        appHash: string;
        deployed: boolean;
    }[];
}, {
    apps: {
        appId: string;
        appHash: string;
        deployed: boolean;
    }[];
}>;
export type AppsCheckResponseType = z.infer<typeof AppsCheckResponseSchema>;
export declare const GetSpacesResponseSchema: z.ZodObject<{
    spaces: z.ZodArray<z.ZodObject<{
        createdAt: z.ZodNumber;
        groupIds: z.ZodArray<z.ZodString, "many">;
        isRestricted: z.ZodBoolean;
        kind: z.ZodType<"global" | "regular" | "system" | "public" | "conversations", z.ZodTypeDef, "global" | "regular" | "system" | "public" | "conversations">;
        name: z.ZodString;
        sId: z.ZodString;
        updatedAt: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        sId: string;
        createdAt: number;
        name: string;
        kind: "global" | "regular" | "system" | "public" | "conversations";
        updatedAt: number;
        groupIds: string[];
        isRestricted: boolean;
    }, {
        sId: string;
        createdAt: number;
        name: string;
        kind: "global" | "regular" | "system" | "public" | "conversations";
        updatedAt: number;
        groupIds: string[];
        isRestricted: boolean;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    spaces: {
        sId: string;
        createdAt: number;
        name: string;
        kind: "global" | "regular" | "system" | "public" | "conversations";
        updatedAt: number;
        groupIds: string[];
        isRestricted: boolean;
    }[];
}, {
    spaces: {
        sId: string;
        createdAt: number;
        name: string;
        kind: "global" | "regular" | "system" | "public" | "conversations";
        updatedAt: number;
        groupIds: string[];
        isRestricted: boolean;
    }[];
}>;
export type GetSpacesResponseType = z.infer<typeof GetSpacesResponseSchema>;
export declare const BaseSearchBodySchema: z.ZodObject<{
    viewType: z.ZodUnion<[z.ZodLiteral<"table">, z.ZodLiteral<"document">, z.ZodLiteral<"all">]>;
    spaceIds: z.ZodArray<z.ZodString, "many">;
    includeDataSources: z.ZodBoolean;
    limit: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    limit: number;
    viewType: "table" | "all" | "document";
    spaceIds: string[];
    includeDataSources: boolean;
}, {
    limit: number;
    viewType: "table" | "all" | "document";
    spaceIds: string[];
    includeDataSources: boolean;
}>;
export declare const SearchRequestBodySchema: z.ZodUnion<[z.ZodIntersection<z.ZodObject<{
    viewType: z.ZodUnion<[z.ZodLiteral<"table">, z.ZodLiteral<"document">, z.ZodLiteral<"all">]>;
    spaceIds: z.ZodArray<z.ZodString, "many">;
    includeDataSources: z.ZodBoolean;
    limit: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    limit: number;
    viewType: "table" | "all" | "document";
    spaceIds: string[];
    includeDataSources: boolean;
}, {
    limit: number;
    viewType: "table" | "all" | "document";
    spaceIds: string[];
    includeDataSources: boolean;
}>, z.ZodObject<{
    query: z.ZodString;
    nodeIds: z.ZodOptional<z.ZodUndefined>;
}, "strip", z.ZodTypeAny, {
    query: string;
    nodeIds?: undefined;
}, {
    query: string;
    nodeIds?: undefined;
}>>, z.ZodIntersection<z.ZodObject<{
    viewType: z.ZodUnion<[z.ZodLiteral<"table">, z.ZodLiteral<"document">, z.ZodLiteral<"all">]>;
    spaceIds: z.ZodArray<z.ZodString, "many">;
    includeDataSources: z.ZodBoolean;
    limit: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    limit: number;
    viewType: "table" | "all" | "document";
    spaceIds: string[];
    includeDataSources: boolean;
}, {
    limit: number;
    viewType: "table" | "all" | "document";
    spaceIds: string[];
    includeDataSources: boolean;
}>, z.ZodObject<{
    nodeIds: z.ZodArray<z.ZodString, "many">;
    query: z.ZodOptional<z.ZodUndefined>;
}, "strip", z.ZodTypeAny, {
    nodeIds: string[];
    query?: undefined;
}, {
    nodeIds: string[];
    query?: undefined;
}>>]>;
export type SearchRequestBodyType = z.infer<typeof SearchRequestBodySchema>;
export declare const ContentNodeSchema: z.ZodObject<{
    expandable: z.ZodBoolean;
    internalId: z.ZodString;
    lastUpdatedAt: z.ZodNullable<z.ZodNumber>;
    mimeType: z.ZodString;
    parentInternalId: z.ZodNullable<z.ZodString>;
    preventSelection: z.ZodOptional<z.ZodBoolean>;
    providerVisibility: z.ZodOptional<z.ZodNullable<z.ZodType<"private" | "public", z.ZodTypeDef, "private" | "public">>>;
    sourceUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    title: z.ZodString;
    type: z.ZodUnion<[z.ZodLiteral<"document">, z.ZodLiteral<"table">, z.ZodLiteral<"folder">]>;
}, "strip", z.ZodTypeAny, {
    type: "folder" | "table" | "document";
    title: string;
    mimeType: string;
    expandable: boolean;
    internalId: string;
    lastUpdatedAt: number | null;
    parentInternalId: string | null;
    sourceUrl?: string | null | undefined;
    preventSelection?: boolean | undefined;
    providerVisibility?: "private" | "public" | null | undefined;
}, {
    type: "folder" | "table" | "document";
    title: string;
    mimeType: string;
    expandable: boolean;
    internalId: string;
    lastUpdatedAt: number | null;
    parentInternalId: string | null;
    sourceUrl?: string | null | undefined;
    preventSelection?: boolean | undefined;
    providerVisibility?: "private" | "public" | null | undefined;
}>;
export type ContentNodeType = z.infer<typeof ContentNodeSchema>;
export declare const ContentNodeWithParentSchema: z.ZodIntersection<z.ZodObject<{
    expandable: z.ZodBoolean;
    internalId: z.ZodString;
    lastUpdatedAt: z.ZodNullable<z.ZodNumber>;
    mimeType: z.ZodString;
    parentInternalId: z.ZodNullable<z.ZodString>;
    preventSelection: z.ZodOptional<z.ZodBoolean>;
    providerVisibility: z.ZodOptional<z.ZodNullable<z.ZodType<"private" | "public", z.ZodTypeDef, "private" | "public">>>;
    sourceUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    title: z.ZodString;
    type: z.ZodUnion<[z.ZodLiteral<"document">, z.ZodLiteral<"table">, z.ZodLiteral<"folder">]>;
}, "strip", z.ZodTypeAny, {
    type: "folder" | "table" | "document";
    title: string;
    mimeType: string;
    expandable: boolean;
    internalId: string;
    lastUpdatedAt: number | null;
    parentInternalId: string | null;
    sourceUrl?: string | null | undefined;
    preventSelection?: boolean | undefined;
    providerVisibility?: "private" | "public" | null | undefined;
}, {
    type: "folder" | "table" | "document";
    title: string;
    mimeType: string;
    expandable: boolean;
    internalId: string;
    lastUpdatedAt: number | null;
    parentInternalId: string | null;
    sourceUrl?: string | null | undefined;
    preventSelection?: boolean | undefined;
    providerVisibility?: "private" | "public" | null | undefined;
}>, z.ZodObject<{
    parentsInternalIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    parentTitle: z.ZodNullable<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    parentsInternalIds?: string[] | undefined;
    parentTitle?: string | null | undefined;
}, {
    parentsInternalIds?: string[] | undefined;
    parentTitle?: string | null | undefined;
}>>;
export declare const DataSourceContentNodeSchema: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
    expandable: z.ZodBoolean;
    internalId: z.ZodString;
    lastUpdatedAt: z.ZodNullable<z.ZodNumber>;
    mimeType: z.ZodString;
    parentInternalId: z.ZodNullable<z.ZodString>;
    preventSelection: z.ZodOptional<z.ZodBoolean>;
    providerVisibility: z.ZodOptional<z.ZodNullable<z.ZodType<"private" | "public", z.ZodTypeDef, "private" | "public">>>;
    sourceUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    title: z.ZodString;
    type: z.ZodUnion<[z.ZodLiteral<"document">, z.ZodLiteral<"table">, z.ZodLiteral<"folder">]>;
}, "strip", z.ZodTypeAny, {
    type: "folder" | "table" | "document";
    title: string;
    mimeType: string;
    expandable: boolean;
    internalId: string;
    lastUpdatedAt: number | null;
    parentInternalId: string | null;
    sourceUrl?: string | null | undefined;
    preventSelection?: boolean | undefined;
    providerVisibility?: "private" | "public" | null | undefined;
}, {
    type: "folder" | "table" | "document";
    title: string;
    mimeType: string;
    expandable: boolean;
    internalId: string;
    lastUpdatedAt: number | null;
    parentInternalId: string | null;
    sourceUrl?: string | null | undefined;
    preventSelection?: boolean | undefined;
    providerVisibility?: "private" | "public" | null | undefined;
}>, z.ZodObject<{
    parentsInternalIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    parentTitle: z.ZodNullable<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    parentsInternalIds?: string[] | undefined;
    parentTitle?: string | null | undefined;
}, {
    parentsInternalIds?: string[] | undefined;
    parentTitle?: string | null | undefined;
}>>, z.ZodObject<{
    dataSource: z.ZodObject<{
        id: z.ZodNumber;
        sId: z.ZodString;
        createdAt: z.ZodNumber;
        name: z.ZodString;
        description: z.ZodNullable<z.ZodString>;
        assistantDefaultSelected: z.ZodBoolean;
        dustAPIProjectId: z.ZodString;
        dustAPIDataSourceId: z.ZodString;
        connectorId: z.ZodNullable<z.ZodString>;
        connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
        editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            editedAt: z.ZodNullable<z.ZodNumber>;
            fullName: z.ZodNullable<z.ZodString>;
            imageUrl: z.ZodNullable<z.ZodString>;
            email: z.ZodNullable<z.ZodString>;
            userId: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        }, {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        sId: string;
        createdAt: number;
        name: string;
        description: string | null;
        assistantDefaultSelected: boolean;
        dustAPIProjectId: string;
        dustAPIDataSourceId: string;
        connectorId: string | null;
        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }, {
        id: number;
        sId: string;
        createdAt: number;
        name: string;
        description: string | null;
        assistantDefaultSelected: boolean;
        dustAPIProjectId: string;
        dustAPIDataSourceId: string;
        connectorId: string | null;
        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }>;
    dataSourceViews: z.ZodArray<z.ZodObject<{
        category: z.ZodType<"folder" | "managed" | "website" | "apps" | "actions", z.ZodTypeDef, "folder" | "managed" | "website" | "apps" | "actions">;
        createdAt: z.ZodNumber;
        dataSource: z.ZodObject<{
            id: z.ZodNumber;
            sId: z.ZodString;
            createdAt: z.ZodNumber;
            name: z.ZodString;
            description: z.ZodNullable<z.ZodString>;
            assistantDefaultSelected: z.ZodBoolean;
            dustAPIProjectId: z.ZodString;
            dustAPIDataSourceId: z.ZodString;
            connectorId: z.ZodNullable<z.ZodString>;
            connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
            editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                editedAt: z.ZodNullable<z.ZodNumber>;
                fullName: z.ZodNullable<z.ZodString>;
                imageUrl: z.ZodNullable<z.ZodString>;
                email: z.ZodNullable<z.ZodString>;
                userId: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            }, {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }, {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }>;
        editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            editedAt: z.ZodNullable<z.ZodNumber>;
            fullName: z.ZodNullable<z.ZodString>;
            imageUrl: z.ZodNullable<z.ZodString>;
            email: z.ZodNullable<z.ZodString>;
            userId: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        }, {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        }>>>;
        id: z.ZodNumber;
        kind: z.ZodType<"custom" | "default", z.ZodTypeDef, "custom" | "default">;
        parentsIn: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
        sId: z.ZodString;
        updatedAt: z.ZodNumber;
        spaceId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }, {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    dataSource: {
        id: number;
        sId: string;
        createdAt: number;
        name: string;
        description: string | null;
        assistantDefaultSelected: boolean;
        dustAPIProjectId: string;
        dustAPIDataSourceId: string;
        connectorId: string | null;
        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    };
    dataSourceViews: {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }[];
}, {
    dataSource: {
        id: number;
        sId: string;
        createdAt: number;
        name: string;
        description: string | null;
        assistantDefaultSelected: boolean;
        dustAPIProjectId: string;
        dustAPIDataSourceId: string;
        connectorId: string | null;
        connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    };
    dataSourceViews: {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }[];
}>>;
export type DataSourceContentNodeType = z.infer<typeof DataSourceContentNodeSchema>;
export declare const DataSourceViewContentNodeSchema: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
    expandable: z.ZodBoolean;
    internalId: z.ZodString;
    lastUpdatedAt: z.ZodNullable<z.ZodNumber>;
    mimeType: z.ZodString;
    parentInternalId: z.ZodNullable<z.ZodString>;
    preventSelection: z.ZodOptional<z.ZodBoolean>;
    providerVisibility: z.ZodOptional<z.ZodNullable<z.ZodType<"private" | "public", z.ZodTypeDef, "private" | "public">>>;
    sourceUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    title: z.ZodString;
    type: z.ZodUnion<[z.ZodLiteral<"document">, z.ZodLiteral<"table">, z.ZodLiteral<"folder">]>;
}, "strip", z.ZodTypeAny, {
    type: "folder" | "table" | "document";
    title: string;
    mimeType: string;
    expandable: boolean;
    internalId: string;
    lastUpdatedAt: number | null;
    parentInternalId: string | null;
    sourceUrl?: string | null | undefined;
    preventSelection?: boolean | undefined;
    providerVisibility?: "private" | "public" | null | undefined;
}, {
    type: "folder" | "table" | "document";
    title: string;
    mimeType: string;
    expandable: boolean;
    internalId: string;
    lastUpdatedAt: number | null;
    parentInternalId: string | null;
    sourceUrl?: string | null | undefined;
    preventSelection?: boolean | undefined;
    providerVisibility?: "private" | "public" | null | undefined;
}>, z.ZodObject<{
    parentsInternalIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    parentTitle: z.ZodNullable<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    parentsInternalIds?: string[] | undefined;
    parentTitle?: string | null | undefined;
}, {
    parentsInternalIds?: string[] | undefined;
    parentTitle?: string | null | undefined;
}>>, z.ZodObject<{
    dataSourceView: z.ZodObject<{
        category: z.ZodType<"folder" | "managed" | "website" | "apps" | "actions", z.ZodTypeDef, "folder" | "managed" | "website" | "apps" | "actions">;
        createdAt: z.ZodNumber;
        dataSource: z.ZodObject<{
            id: z.ZodNumber;
            sId: z.ZodString;
            createdAt: z.ZodNumber;
            name: z.ZodString;
            description: z.ZodNullable<z.ZodString>;
            assistantDefaultSelected: z.ZodBoolean;
            dustAPIProjectId: z.ZodString;
            dustAPIDataSourceId: z.ZodString;
            connectorId: z.ZodNullable<z.ZodString>;
            connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
            editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                editedAt: z.ZodNullable<z.ZodNumber>;
                fullName: z.ZodNullable<z.ZodString>;
                imageUrl: z.ZodNullable<z.ZodString>;
                email: z.ZodNullable<z.ZodString>;
                userId: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            }, {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }, {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }>;
        editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            editedAt: z.ZodNullable<z.ZodNumber>;
            fullName: z.ZodNullable<z.ZodString>;
            imageUrl: z.ZodNullable<z.ZodString>;
            email: z.ZodNullable<z.ZodString>;
            userId: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        }, {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        }>>>;
        id: z.ZodNumber;
        kind: z.ZodType<"custom" | "default", z.ZodTypeDef, "custom" | "default">;
        parentsIn: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
        sId: z.ZodString;
        updatedAt: z.ZodNumber;
        spaceId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }, {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    dataSourceView: {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    };
}, {
    dataSourceView: {
        category: "folder" | "managed" | "website" | "apps" | "actions";
        id: number;
        sId: string;
        createdAt: number;
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        kind: "custom" | "default";
        parentsIn: string[] | null;
        updatedAt: number;
        spaceId: string;
        editedByUser?: {
            email: string | null;
            editedAt: number | null;
            fullName: string | null;
            imageUrl: string | null;
            userId: string | null;
        } | null | undefined;
    };
}>>;
export type DataSourceViewContentNodeType = z.infer<typeof DataSourceViewContentNodeSchema>;
export declare const SearchWarningCodeSchema: z.ZodLiteral<"truncated-query-clauses">;
export type SearchWarningCode = z.infer<typeof SearchWarningCodeSchema>;
export declare const PostWorkspaceSearchResponseBodySchema: z.ZodObject<{
    nodes: z.ZodArray<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
        expandable: z.ZodBoolean;
        internalId: z.ZodString;
        lastUpdatedAt: z.ZodNullable<z.ZodNumber>;
        mimeType: z.ZodString;
        parentInternalId: z.ZodNullable<z.ZodString>;
        preventSelection: z.ZodOptional<z.ZodBoolean>;
        providerVisibility: z.ZodOptional<z.ZodNullable<z.ZodType<"private" | "public", z.ZodTypeDef, "private" | "public">>>;
        sourceUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        title: z.ZodString;
        type: z.ZodUnion<[z.ZodLiteral<"document">, z.ZodLiteral<"table">, z.ZodLiteral<"folder">]>;
    }, "strip", z.ZodTypeAny, {
        type: "folder" | "table" | "document";
        title: string;
        mimeType: string;
        expandable: boolean;
        internalId: string;
        lastUpdatedAt: number | null;
        parentInternalId: string | null;
        sourceUrl?: string | null | undefined;
        preventSelection?: boolean | undefined;
        providerVisibility?: "private" | "public" | null | undefined;
    }, {
        type: "folder" | "table" | "document";
        title: string;
        mimeType: string;
        expandable: boolean;
        internalId: string;
        lastUpdatedAt: number | null;
        parentInternalId: string | null;
        sourceUrl?: string | null | undefined;
        preventSelection?: boolean | undefined;
        providerVisibility?: "private" | "public" | null | undefined;
    }>, z.ZodObject<{
        parentsInternalIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        parentTitle: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        parentsInternalIds?: string[] | undefined;
        parentTitle?: string | null | undefined;
    }, {
        parentsInternalIds?: string[] | undefined;
        parentTitle?: string | null | undefined;
    }>>, z.ZodObject<{
        dataSource: z.ZodObject<{
            id: z.ZodNumber;
            sId: z.ZodString;
            createdAt: z.ZodNumber;
            name: z.ZodString;
            description: z.ZodNullable<z.ZodString>;
            assistantDefaultSelected: z.ZodBoolean;
            dustAPIProjectId: z.ZodString;
            dustAPIDataSourceId: z.ZodString;
            connectorId: z.ZodNullable<z.ZodString>;
            connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
            editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                editedAt: z.ZodNullable<z.ZodNumber>;
                fullName: z.ZodNullable<z.ZodString>;
                imageUrl: z.ZodNullable<z.ZodString>;
                email: z.ZodNullable<z.ZodString>;
                userId: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            }, {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }, {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }>;
        dataSourceViews: z.ZodArray<z.ZodObject<{
            category: z.ZodType<"folder" | "managed" | "website" | "apps" | "actions", z.ZodTypeDef, "folder" | "managed" | "website" | "apps" | "actions">;
            createdAt: z.ZodNumber;
            dataSource: z.ZodObject<{
                id: z.ZodNumber;
                sId: z.ZodString;
                createdAt: z.ZodNumber;
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                assistantDefaultSelected: z.ZodBoolean;
                dustAPIProjectId: z.ZodString;
                dustAPIDataSourceId: z.ZodString;
                connectorId: z.ZodNullable<z.ZodString>;
                connectorProvider: z.ZodNullable<z.ZodType<"confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong", z.ZodTypeDef, "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong">>;
                editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    editedAt: z.ZodNullable<z.ZodNumber>;
                    fullName: z.ZodNullable<z.ZodString>;
                    imageUrl: z.ZodNullable<z.ZodString>;
                    email: z.ZodNullable<z.ZodString>;
                    userId: z.ZodNullable<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                }, {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            }, {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            }>;
            editedByUser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                editedAt: z.ZodNullable<z.ZodNumber>;
                fullName: z.ZodNullable<z.ZodString>;
                imageUrl: z.ZodNullable<z.ZodString>;
                email: z.ZodNullable<z.ZodString>;
                userId: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            }, {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            }>>>;
            id: z.ZodNumber;
            kind: z.ZodType<"custom" | "default", z.ZodTypeDef, "custom" | "default">;
            parentsIn: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
            sId: z.ZodString;
            updatedAt: z.ZodNumber;
            spaceId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            category: "folder" | "managed" | "website" | "apps" | "actions";
            id: number;
            sId: string;
            createdAt: number;
            dataSource: {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            };
            kind: "custom" | "default";
            parentsIn: string[] | null;
            updatedAt: number;
            spaceId: string;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }, {
            category: "folder" | "managed" | "website" | "apps" | "actions";
            id: number;
            sId: string;
            createdAt: number;
            dataSource: {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            };
            kind: "custom" | "default";
            parentsIn: string[] | null;
            updatedAt: number;
            spaceId: string;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        dataSourceViews: {
            category: "folder" | "managed" | "website" | "apps" | "actions";
            id: number;
            sId: string;
            createdAt: number;
            dataSource: {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            };
            kind: "custom" | "default";
            parentsIn: string[] | null;
            updatedAt: number;
            spaceId: string;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }[];
    }, {
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        dataSourceViews: {
            category: "folder" | "managed" | "website" | "apps" | "actions";
            id: number;
            sId: string;
            createdAt: number;
            dataSource: {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            };
            kind: "custom" | "default";
            parentsIn: string[] | null;
            updatedAt: number;
            spaceId: string;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }[];
    }>>, "many">;
    warningCode: z.ZodNullable<z.ZodOptional<z.ZodLiteral<"truncated-query-clauses">>>;
}, "strip", z.ZodTypeAny, {
    nodes: ({
        type: "folder" | "table" | "document";
        title: string;
        mimeType: string;
        expandable: boolean;
        internalId: string;
        lastUpdatedAt: number | null;
        parentInternalId: string | null;
        sourceUrl?: string | null | undefined;
        preventSelection?: boolean | undefined;
        providerVisibility?: "private" | "public" | null | undefined;
    } & {
        parentsInternalIds?: string[] | undefined;
        parentTitle?: string | null | undefined;
    } & {
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        dataSourceViews: {
            category: "folder" | "managed" | "website" | "apps" | "actions";
            id: number;
            sId: string;
            createdAt: number;
            dataSource: {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            };
            kind: "custom" | "default";
            parentsIn: string[] | null;
            updatedAt: number;
            spaceId: string;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }[];
    })[];
    warningCode?: "truncated-query-clauses" | null | undefined;
}, {
    nodes: ({
        type: "folder" | "table" | "document";
        title: string;
        mimeType: string;
        expandable: boolean;
        internalId: string;
        lastUpdatedAt: number | null;
        parentInternalId: string | null;
        sourceUrl?: string | null | undefined;
        preventSelection?: boolean | undefined;
        providerVisibility?: "private" | "public" | null | undefined;
    } & {
        parentsInternalIds?: string[] | undefined;
        parentTitle?: string | null | undefined;
    } & {
        dataSource: {
            id: number;
            sId: string;
            createdAt: number;
            name: string;
            description: string | null;
            assistantDefaultSelected: boolean;
            dustAPIProjectId: string;
            dustAPIDataSourceId: string;
            connectorId: string | null;
            connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        };
        dataSourceViews: {
            category: "folder" | "managed" | "website" | "apps" | "actions";
            id: number;
            sId: string;
            createdAt: number;
            dataSource: {
                id: number;
                sId: string;
                createdAt: number;
                name: string;
                description: string | null;
                assistantDefaultSelected: boolean;
                dustAPIProjectId: string;
                dustAPIDataSourceId: string;
                connectorId: string | null;
                connectorProvider: "confluence" | "github" | "google_drive" | "intercom" | "notion" | "slack" | "microsoft" | "webcrawler" | "snowflake" | "zendesk" | "bigquery" | "salesforce" | "gong" | null;
                editedByUser?: {
                    email: string | null;
                    editedAt: number | null;
                    fullName: string | null;
                    imageUrl: string | null;
                    userId: string | null;
                } | null | undefined;
            };
            kind: "custom" | "default";
            parentsIn: string[] | null;
            updatedAt: number;
            spaceId: string;
            editedByUser?: {
                email: string | null;
                editedAt: number | null;
                fullName: string | null;
                imageUrl: string | null;
                userId: string | null;
            } | null | undefined;
        }[];
    })[];
    warningCode?: "truncated-query-clauses" | null | undefined;
}>;
export type PostWorkspaceSearchResponseBodyType = z.infer<typeof PostWorkspaceSearchResponseBodySchema>;
export declare const ACTION_RUNNING_LABELS: Record<AgentActionPublicType["type"], string>;
export declare const ValidateActionResponseSchema: z.ZodObject<{
    success: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    success: boolean;
}, {
    success: boolean;
}>;
export type ValidateActionResponseType = z.infer<typeof ValidateActionResponseSchema>;
export declare const ValidateActionRequestBodySchema: z.ZodObject<{
    actionId: z.ZodNumber;
    approved: z.ZodEnum<["approved", "rejected", "always_approved"]>;
}, "strip", z.ZodTypeAny, {
    actionId: number;
    approved: "approved" | "rejected" | "always_approved";
}, {
    actionId: number;
    approved: "approved" | "rejected" | "always_approved";
}>;
export type ValidateActionRequestBodyType = z.infer<typeof ValidateActionRequestBodySchema>;
export declare const RegisterMCPResponseSchema: z.ZodObject<{
    success: z.ZodBoolean;
    expiresAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    success: boolean;
    expiresAt: string;
}, {
    success: boolean;
    expiresAt: string;
}>;
export type RegisterMCPResponseType = z.infer<typeof RegisterMCPResponseSchema>;
export declare const HeartbeatMCPResponseSchema: z.ZodObject<{
    success: z.ZodBoolean;
    expiresAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    success: boolean;
    expiresAt: string;
}, {
    success: boolean;
    expiresAt: string;
}>;
export type HeartbeatMCPResponseType = z.infer<typeof HeartbeatMCPResponseSchema>;
export declare const PublicPostMCPResultsRequestBodySchema: z.ZodObject<{
    requestId: z.ZodString;
    result: z.ZodUnknown;
}, "strip", z.ZodTypeAny, {
    requestId: string;
    result?: unknown;
}, {
    requestId: string;
    result?: unknown;
}>;
export type PublicPostMCPResultsRequestBody = z.infer<typeof PublicPostMCPResultsRequestBodySchema>;
export declare const PostMCPResultsResponseSchema: z.ZodObject<{
    success: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    success: boolean;
}, {
    success: boolean;
}>;
export type PostMCPResultsResponseType = z.infer<typeof PostMCPResultsResponseSchema>;
declare const MCP_TOOL_STAKE_LEVELS: readonly ["high", "low"];
export type MCPToolStakeLevelPublicType = (typeof MCP_TOOL_STAKE_LEVELS)[number];
declare const MCP_VALIDATION_OUTPUTS: readonly ["approved", "rejected", "always_approved"];
export type MCPValidationOutputPublicType = (typeof MCP_VALIDATION_OUTPUTS)[number];
export {};
//# sourceMappingURL=types.d.ts.map