{"version":3,"file":"types.cjs.development.js","sources":["../src/shared/result.ts","../src/shared/utils/iots_utils.ts","../src/connectors/admin/cli.ts","../src/connectors/api.ts","../src/connectors/slack.ts","../src/connectors/webcrawler.ts","../src/connectors/api_handlers/connector_configuration.ts","../src/connectors/api_handlers/create_connector.ts","../src/connectors/api_handlers/update_connector.ts","../src/connectors/configuration.ts","../src/connectors/confluence.ts","../src/connectors/content_nodes.ts","../src/connectors/google_drive.ts","../src/connectors/intercom.ts","../src/connectors/microsoft.ts","../src/connectors/notion.ts","../src/connectors/snowflake.ts","../src/connectors/zendesk.ts","../src/core/data_source.ts","../src/front/assistant/actions/retrieval.ts","../src/front/lib/assistant.ts","../src/front/api_handlers/internal/agent_configuration.ts","../src/shared/utils/general.ts","../src/front/files.ts","../src/front/api_handlers/internal/assistant.ts","../src/front/api_handlers/internal/spaces.ts","../src/front/api_handlers/public/data_sources.ts","../src/front/api_handlers/public/spaces.ts","../src/front/app.ts","../src/front/assistant/actions/browse.ts","../src/front/assistant/actions/dust_app_run.ts","../src/front/assistant/actions/index.ts","../src/front/assistant/actions/guards.ts","../src/front/assistant/actions/process.ts","../src/front/assistant/actions/tables_query.ts","../src/front/assistant/actions/websearch.ts","../src/front/assistant/agent.ts","../src/front/assistant/avatar.ts","../src/front/assistant/builder.ts","../src/front/assistant/conversation.ts","../src/front/assistant/generation.ts","../src/front/assistant/templates.ts","../src/front/assistant/visualization.ts","../src/front/content_fragment.ts","../src/front/data_source.ts","../src/front/data_source_view.ts","../src/front/groups.ts","../src/front/lib/actions/types.ts","../src/front/lib/api/credentials.ts","../src/front/lib/connectors_api.ts","../src/front/lib/core_api.ts","../src/front/lib/error.ts","../src/front/lib/labs.ts","../src/front/lib/poke/plugins.ts","../src/shared/utils/assert_never.ts","../src/front/user.ts","../src/front/membership_invitation.ts","../src/front/memberships.ts","../src/front/plan.ts","../src/front/resource_permissions.ts","../src/front/sheets.ts","../src/front/space.ts","../src/front/tracker.ts","../src/front/website.ts","../src/front/workspace.ts","../src/oauth/oauth_api.ts","../src/oauth/client/access_token.ts","../src/oauth/client/credentials.ts","../src/oauth/lib.ts","../src/oauth/client/setup.ts","../src/shared/statsd.ts","../src/shared/redis_client.ts","../src/shared/cache.ts","../src/shared/deployment.ts","../src/shared/env.ts","../src/shared/feature_flags.ts","../src/shared/internal_mime_types.ts","../src/shared/rate_limiter.ts","../src/shared/retries.ts","../src/shared/utils/streams.ts","../src/shared/text_extraction/transform.ts","../src/shared/text_extraction/transformToCSV.ts","../src/shared/text_extraction/index.ts","../src/shared/user_operation.ts","../src/shared/utils/async_utils.ts","../src/shared/utils/config.ts","../src/shared/utils/date_utils.ts","../src/shared/utils/error_utils.ts","../src/shared/utils/global_error_handler.ts","../src/shared/utils/hashing.ts","../src/shared/utils/string_utils.ts","../src/shared/utils/structured_data.ts"],"sourcesContent":["/**\n * A Result is a type that can be either Ok or Err.\n * The main motivation behind this utils is to overcome the fact that Javascript does not\n * let you check the type of an object at runtime, so you cannot know if a function returned an error type\n * or a success type.\n *\n * Usage:\n * import {Result, Ok, Err} from \"@app/lib/result\"\n * function divide(numerator: number, denominator: number) : Result<number, Error> {\n *     if (denominator === 0) {\n *        return new Err(new Error(\"Cannot divide by zero\"));\n *      }\n *     return new Ok(numerator / denominator);\n * }\n */\n\nexport class Ok<T> {\n  constructor(public value: T) {}\n\n  isOk(): this is Ok<T> {\n    return true;\n  }\n\n  isErr(): this is Err<never> {\n    return false;\n  }\n}\n\nexport class Err<E> {\n  constructor(public error: E) {}\n\n  isOk(): this is Ok<never> {\n    return false;\n  }\n\n  isErr(): this is Err<E> {\n    return true;\n  }\n}\n\nexport type Result<T, E> = Ok<T> | Err<E>;\n","import { isLeft } from \"fp-ts/lib/Either\";\nimport * as t from \"io-ts\";\nimport * as reporter from \"io-ts-reporters\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { Err, Ok, Result } from \"../../shared/result\";\n\nexport function ioTsEnum<EnumType>(\n  enumValues: readonly string[],\n  enumName?: string\n) {\n  const isEnumValue = (input: unknown): input is EnumType =>\n    enumValues.includes(input as string);\n\n  return new t.Type<EnumType>(\n    enumName || uuidv4(),\n    isEnumValue,\n    (input, context) =>\n      isEnumValue(input) ? t.success(input) : t.failure(input, context),\n    t.identity\n  );\n}\n\nexport interface BrandedRange {\n  readonly Range: unique symbol;\n}\n\n// Defines a function to generate a branded codec for validating numbers within a specific range.\nexport function createRangeCodec(min: number, max: number) {\n  return t.brand(\n    t.number,\n    (n): n is t.Branded<number, BrandedRange> => n >= min && n <= max,\n    \"Range\"\n  );\n}\n\ninterface SlugifiedStringBrand {\n  readonly SlugifiedString: unique symbol;\n}\n\nexport const SlugifiedString = t.brand(\n  t.string,\n  (s): s is t.Branded<string, SlugifiedStringBrand> => /^[a-z0-9_]+$/.test(s),\n  \"SlugifiedString\"\n);\n\nexport function ioTsParsePayload<T>(\n  payload: unknown,\n  codec: t.Type<T>\n): Result<T, string[]> {\n  const bodyValidation = codec.decode(payload);\n  if (isLeft(bodyValidation)) {\n    const pathError = reporter.formatValidationErrors(bodyValidation.left);\n    return new Err(pathError);\n  }\n\n  return new Ok(bodyValidation.right);\n}\n\n// Parses numbers as strings. Must not be used in union types with number.\nexport const NumberAsStringCodec = new t.Type<string, string, unknown>(\n  \"NumberAsString\",\n  (u): u is string => typeof u === \"number\",\n  (u, c) => {\n    if (typeof u === \"number\") {\n      return t.success(u.toString());\n    }\n    return t.failure(u, c, \"Value must be a number\");\n  },\n  t.identity\n);\n","import * as t from \"io-ts\";\n\nimport { NumberAsStringCodec } from \"../../shared/utils/iots_utils\";\n\nexport const ConnectorsCommandSchema = t.type({\n  majorCommand: t.literal(\"connectors\"),\n  command: t.union([\n    t.literal(\"stop\"),\n    t.literal(\"delete\"),\n    t.literal(\"pause\"),\n    t.literal(\"unpause\"),\n    t.literal(\"resume\"),\n    t.literal(\"full-resync\"),\n    t.literal(\"set-error\"),\n    t.literal(\"clear-error\"),\n    t.literal(\"restart\"),\n    t.literal(\"get-parents\"),\n    t.literal(\"set-permission\"),\n    t.literal(\"garbage-collect\"),\n  ]),\n  args: t.record(\n    t.string,\n    t.union([t.string, NumberAsStringCodec, t.undefined])\n  ),\n});\n\nexport type ConnectorsCommandType = t.TypeOf<typeof ConnectorsCommandSchema>;\n\n/**\n * <Confluence>\n */\nexport const ConfluenceCommandSchema = t.type({\n  majorCommand: t.literal(\"confluence\"),\n  command: t.union([\n    t.literal(\"me\"),\n    t.literal(\"upsert-page\"),\n    t.literal(\"upsert-pages\"),\n    t.literal(\"update-parents\"),\n  ]),\n  args: t.type({\n    connectorId: t.union([t.number, t.undefined]),\n    pageId: t.union([t.number, t.undefined]),\n    spaceId: t.union([t.number, t.undefined]),\n    file: t.union([t.string, t.undefined]),\n    keyInFile: t.union([t.string, t.undefined]),\n  }),\n});\nexport type ConfluenceCommandType = t.TypeOf<typeof ConfluenceCommandSchema>;\n\nexport const ConfluenceMeResponseSchema = t.type({\n  me: t.UnknownRecord,\n});\nexport type ConfluenceMeResponseType = t.TypeOf<\n  typeof ConfluenceMeResponseSchema\n>;\n\nexport const ConfluenceUpsertPageResponseSchema = t.type({\n  workflowId: t.string,\n  workflowUrl: t.union([t.string, t.undefined]),\n});\nexport type ConfluenceUpsertPageResponseType = t.TypeOf<\n  typeof ConfluenceUpsertPageResponseSchema\n>;\n/**\n * </Confluence>\n */\n\nexport const GithubCommandSchema = t.type({\n  majorCommand: t.literal(\"github\"),\n  command: t.union([\n    t.literal(\"resync-repo\"),\n    t.literal(\"code-sync\"),\n    t.literal(\"sync-issue\"),\n    t.literal(\"force-daily-code-sync\"),\n    t.literal(\"skip-issue\"),\n  ]),\n  args: t.record(\n    t.string,\n    t.union([t.string, NumberAsStringCodec, t.undefined])\n  ),\n});\n\nexport type GithubCommandType = t.TypeOf<typeof GithubCommandSchema>;\n\nexport const NotionCommandSchema = t.type({\n  majorCommand: t.literal(\"notion\"),\n  command: t.union([\n    t.literal(\"skip-page\"),\n    t.literal(\"skip-database\"),\n    t.literal(\"upsert-page\"),\n    t.literal(\"upsert-database\"),\n    t.literal(\"search-pages\"),\n    t.literal(\"update-core-parents\"),\n    t.literal(\"check-url\"),\n    t.literal(\"find-url\"),\n    t.literal(\"delete-url\"),\n    t.literal(\"me\"),\n    t.literal(\"stop-all-garbage-collectors\"),\n    t.literal(\"update-parents-fields\"),\n    t.literal(\"clear-parents-last-updated-at\"),\n  ]),\n  args: t.record(\n    t.string,\n    t.union([t.string, NumberAsStringCodec, t.undefined])\n  ),\n});\n\nexport type NotionCommandType = t.TypeOf<typeof NotionCommandSchema>;\n\nexport const GoogleDriveCommandSchema = t.type({\n  majorCommand: t.literal(\"google_drive\"),\n  command: t.union([\n    t.literal(\"garbage-collect-all\"),\n    t.literal(\"get-file\"),\n    t.literal(\"check-file\"),\n    t.literal(\"get-google-parents\"),\n    t.literal(\"clean-invalid-parents\"),\n    t.literal(\"upsert-file\"),\n    t.literal(\"update-core-parents\"),\n    t.literal(\"restart-google-webhooks\"),\n    t.literal(\"start-incremental-sync\"),\n    t.literal(\"restart-all-incremental-sync-workflows\"),\n    t.literal(\"skip-file\"),\n    t.literal(\"register-webhook\"),\n    t.literal(\"register-all-webhooks\"),\n    t.literal(\"list-labels\"),\n  ]),\n  args: t.record(\n    t.string,\n    t.union([t.string, NumberAsStringCodec, t.undefined])\n  ),\n});\n\nexport type GoogleDriveCommandType = t.TypeOf<typeof GoogleDriveCommandSchema>;\n\nexport const SlackCommandSchema = t.type({\n  majorCommand: t.literal(\"slack\"),\n  command: t.union([\n    t.literal(\"enable-bot\"),\n    t.literal(\"sync-channel\"),\n    t.literal(\"sync-thread\"),\n    t.literal(\"uninstall-for-unknown-team-ids\"),\n    t.literal(\"whitelist-domains\"),\n    t.literal(\"whitelist-bot\"),\n    t.literal(\"sync-channel-metadata\"),\n  ]),\n  args: t.record(\n    t.string,\n    t.union([t.string, NumberAsStringCodec, t.undefined])\n  ),\n});\n\nexport type SlackCommandType = t.TypeOf<typeof SlackCommandSchema>;\n\nexport const BatchCommandSchema = t.type({\n  majorCommand: t.literal(\"batch\"),\n  command: t.union([\n    t.literal(\"full-resync\"),\n    t.literal(\"restart-all\"),\n    t.literal(\"stop-all\"),\n    t.literal(\"resume-all\"),\n  ]),\n  args: t.record(\n    t.string,\n    t.union([t.string, NumberAsStringCodec, t.undefined])\n  ),\n});\n\nexport type BatchCommandType = t.TypeOf<typeof BatchCommandSchema>;\n\nexport const WebcrawlerCommandSchema = t.type({\n  majorCommand: t.literal(\"webcrawler\"),\n  command: t.literal(\"start-scheduler\"),\n});\n\nexport const BatchAllResponseSchema = t.type({\n  succeeded: t.number,\n  failed: t.number,\n});\nexport type BatchAllResponseType = t.TypeOf<typeof BatchAllResponseSchema>;\n\nexport type WebcrawlerCommandType = t.TypeOf<typeof WebcrawlerCommandSchema>;\n\nexport const TemporalCommandSchema = t.type({\n  majorCommand: t.literal(\"temporal\"),\n  command: t.union([\n    t.literal(\"find-unprocessed-workflows\"),\n    t.literal(\"check-queue\"),\n  ]),\n  args: t.record(\n    t.string,\n    t.union([t.string, NumberAsStringCodec, t.undefined])\n  ),\n});\n\nexport type TemporalCommandType = t.TypeOf<typeof TemporalCommandSchema>;\n\n/**\n * <Intercom>\n */\nexport const IntercomCommandSchema = t.type({\n  majorCommand: t.literal(\"intercom\"),\n  command: t.union([\n    t.literal(\"force-resync-articles\"),\n    t.literal(\"check-conversation\"),\n    t.literal(\"fetch-conversation\"),\n    t.literal(\"fetch-articles\"),\n    t.literal(\"check-missing-conversations\"),\n    t.literal(\"check-teams\"),\n  ]),\n  args: t.type({\n    force: t.union([t.literal(\"true\"), t.undefined]),\n    connectorId: t.union([t.number, t.undefined]),\n    conversationId: t.union([t.number, t.undefined]),\n    day: t.union([t.string, t.undefined]),\n    helpCenterId: t.union([t.number, t.undefined]),\n  }),\n});\n\nexport type IntercomCommandType = t.TypeOf<typeof IntercomCommandSchema>;\nexport const IntercomCheckConversationResponseSchema = t.type({\n  isConversationOnIntercom: t.boolean,\n  isConversationOnDB: t.boolean,\n  conversationTeamIdOnIntercom: t.union([t.string, t.undefined]),\n  conversationTeamIdOnDB: t.union([t.string, t.undefined, t.null]),\n});\nexport type IntercomCheckConversationResponseType = t.TypeOf<\n  typeof IntercomCheckConversationResponseSchema\n>;\nexport const IntercomFetchConversationResponseSchema = t.type({\n  conversation: t.union([t.UnknownRecord, t.null]), // intercom type, can't be iots'd\n});\nexport type IntercomFetchConversationResponseType = t.TypeOf<\n  typeof IntercomFetchConversationResponseSchema\n>;\nexport const IntercomFetchArticlesResponseSchema = t.type({\n  articles: t.array(t.union([t.UnknownRecord, t.null])), // intercom type, can't be iots'd\n});\nexport type IntercomFetchArticlesResponseType = t.TypeOf<\n  typeof IntercomFetchArticlesResponseSchema\n>;\nexport const IntercomCheckTeamsResponseSchema = t.type({\n  teams: t.array(\n    t.type({\n      teamId: t.string,\n      name: t.string,\n      isTeamOnDB: t.boolean,\n    })\n  ),\n});\nexport type IntercomCheckTeamsResponseType = t.TypeOf<\n  typeof IntercomCheckTeamsResponseSchema\n>;\nexport const IntercomCheckMissingConversationsResponseSchema = t.type({\n  missingConversations: t.array(\n    t.type({\n      conversationId: t.string,\n      teamId: t.union([t.number, t.null]),\n      open: t.boolean,\n      createdAt: t.number,\n    })\n  ),\n});\nexport type IntercomCheckMissingConversationsResponseType = t.TypeOf<\n  typeof IntercomCheckMissingConversationsResponseSchema\n>;\nexport const IntercomForceResyncArticlesResponseSchema = t.type({\n  affectedCount: t.number,\n});\nexport type IntercomForceResyncArticlesResponseType = t.TypeOf<\n  typeof IntercomForceResyncArticlesResponseSchema\n>;\n/**\n * </ Intercom>\n */\n\n/**\n * <Zendesk>\n */\nexport const ZendeskCommandSchema = t.type({\n  majorCommand: t.literal(\"zendesk\"),\n  command: t.union([\n    t.literal(\"check-is-admin\"),\n    t.literal(\"count-tickets\"),\n    t.literal(\"resync-tickets\"),\n    t.literal(\"fetch-ticket\"),\n    t.literal(\"fetch-brand\"),\n    t.literal(\"resync-help-centers\"),\n    t.literal(\"resync-brand-metadata\"),\n  ]),\n  args: t.type({\n    wId: t.union([t.string, t.undefined]),\n    dsId: t.union([t.string, t.undefined]),\n    connectorId: t.union([t.number, t.undefined]),\n    brandId: t.union([t.number, t.undefined]),\n    query: t.union([t.string, t.undefined]),\n    forceResync: t.union([t.literal(\"true\"), t.undefined]),\n    ticketId: t.union([t.number, t.undefined]),\n    ticketUrl: t.union([t.string, t.undefined]),\n  }),\n});\nexport type ZendeskCommandType = t.TypeOf<typeof ZendeskCommandSchema>;\n\nexport const ZendeskCheckIsAdminResponseSchema = t.type({\n  userRole: t.string,\n  userActive: t.boolean,\n  userIsAdmin: t.boolean,\n});\nexport type ZendeskCheckIsAdminResponseType = t.TypeOf<\n  typeof ZendeskCheckIsAdminResponseSchema\n>;\n\nexport const ZendeskCountTicketsResponseSchema = t.type({\n  ticketCount: t.number,\n});\nexport type ZendeskCountTicketsResponseType = t.TypeOf<\n  typeof ZendeskCountTicketsResponseSchema\n>;\n\nexport const ZendeskFetchTicketResponseSchema = t.type({\n  ticket: t.union([t.UnknownRecord, t.null]), // Zendesk type, can't be iots'd,\n  isTicketOnDb: t.boolean,\n});\nexport type ZendeskFetchTicketResponseType = t.TypeOf<\n  typeof ZendeskFetchTicketResponseSchema\n>;\n\nexport const ZendeskFetchBrandResponseSchema = t.type({\n  brand: t.union([t.UnknownRecord, t.null]), // Zendesk type, can't be iots'd,\n  brandOnDb: t.union([t.UnknownRecord, t.null]),\n});\nexport type ZendeskFetchBrandResponseType = t.TypeOf<\n  typeof ZendeskFetchBrandResponseSchema\n>;\n/**\n * </Zendesk>\n */\n\nexport const MicrosoftCommandSchema = t.type({\n  majorCommand: t.literal(\"microsoft\"),\n  command: t.union([\n    t.literal(\"garbage-collect-all\"),\n    t.literal(\"check-file\"),\n    t.literal(\"start-incremental-sync\"),\n    t.literal(\"restart-all-incremental-sync-workflows\"),\n    t.literal(\"skip-file\"),\n    t.literal(\"sync-node\"),\n    t.literal(\"get-parents\"),\n  ]),\n  args: t.record(\n    t.string,\n    t.union([t.string, NumberAsStringCodec, t.undefined])\n  ),\n});\n\nexport type MicrosoftCommandType = t.TypeOf<typeof MicrosoftCommandSchema>;\n\nexport const AdminCommandSchema = t.union([\n  BatchCommandSchema,\n  ConnectorsCommandSchema,\n  ConfluenceCommandSchema,\n  GithubCommandSchema,\n  GoogleDriveCommandSchema,\n  IntercomCommandSchema,\n  MicrosoftCommandSchema,\n  NotionCommandSchema,\n  SlackCommandSchema,\n  TemporalCommandSchema,\n  WebcrawlerCommandSchema,\n  ZendeskCommandSchema,\n]);\n\nexport type AdminCommandType = t.TypeOf<typeof AdminCommandSchema>;\n\nexport const AdminSuccessResponseSchema = t.type({\n  success: t.literal(true),\n});\n\nexport type AdminSuccessResponseType = t.TypeOf<\n  typeof AdminSuccessResponseSchema\n>;\n\nexport const CheckFileGenericResponseSchema = t.type({\n  status: t.number,\n  // all literals from js `typeof`\n  type: t.union([\n    t.literal(\"undefined\"),\n    t.literal(\"object\"),\n    t.literal(\"boolean\"),\n    t.literal(\"number\"),\n    t.literal(\"string\"),\n    t.literal(\"function\"),\n    t.literal(\"symbol\"),\n    t.literal(\"bigint\"),\n  ]),\n  content: t.unknown, // google drive type, can't be iots'd\n});\n\nexport type CheckFileGenericResponseType = t.TypeOf<\n  typeof CheckFileGenericResponseSchema\n>;\n\nexport const GetParentsResponseSchema = t.type({\n  parents: t.array(t.string),\n});\n\nexport type GetParentsResponseType = t.TypeOf<typeof GetParentsResponseSchema>;\n\nexport const NotionUpsertResponseSchema = t.type({\n  workflowId: t.string,\n  workflowUrl: t.union([t.string, t.undefined]),\n});\n\nexport type NotionUpsertResponseType = t.TypeOf<\n  typeof NotionUpsertResponseSchema\n>;\n\nexport const NotionSearchPagesResponseSchema = t.type({\n  pages: t.array(\n    t.type({\n      id: t.string,\n      title: t.union([t.string, t.undefined]),\n      type: t.union([t.literal(\"page\"), t.literal(\"database\")]),\n      isSkipped: t.boolean,\n      isFull: t.boolean,\n    })\n  ),\n});\n\nexport type NotionSearchPagesResponseType = t.TypeOf<\n  typeof NotionSearchPagesResponseSchema\n>;\n\nexport const NotionCheckUrlResponseSchema = t.type({\n  page: t.union([t.UnknownRecord, t.null]), // notion type, can't be iots'd\n  db: t.union([t.UnknownRecord, t.null]), // notion type, can't be iots'd\n});\n\nexport type NotionCheckUrlResponseType = t.TypeOf<\n  typeof NotionCheckUrlResponseSchema\n>;\n\nexport const NotionDeleteUrlResponseSchema = t.type({\n  deletedPage: t.boolean,\n  deletedDb: t.boolean,\n});\n\nexport type NotionDeleteUrlResponseType = t.TypeOf<\n  typeof NotionDeleteUrlResponseSchema\n>;\n\nexport const NotionFindUrlResponseSchema = t.type({\n  page: t.union([t.UnknownRecord, t.null]), // notion type, can't be iots'd\n  db: t.union([t.UnknownRecord, t.null]), // notion type, can't be iots'd\n});\n\nexport type NotionFindUrlResponseType = t.TypeOf<\n  typeof NotionFindUrlResponseSchema\n>;\n\nexport const NotionMeResponseSchema = t.type({\n  me: t.UnknownRecord, // notion type, can't be iots'd\n  botOwner: t.UnknownRecord, // notion type, can't be iots'd\n});\n\nexport type NotionMeResponseType = t.TypeOf<typeof NotionMeResponseSchema>;\n\nexport const TemporalCheckQueueResponseSchema = t.type({\n  taskQueue: t.UnknownRecord, // temporal type, can't be iots'd\n});\n\nexport type TemporalCheckQueueResponseType = t.TypeOf<\n  typeof TemporalCheckQueueResponseSchema\n>;\n\nexport const TemporalUnprocessedWorkflowsResponseSchema = t.type({\n  queuesAndPollers: t.array(t.type({ queue: t.string, pollers: t.number })),\n  unprocessedQueues: t.array(t.string),\n});\n\nexport type TemporalUnprocessedWorkflowsResponseType = t.TypeOf<\n  typeof TemporalUnprocessedWorkflowsResponseSchema\n>;\n\nexport const AdminResponseSchema = t.union([\n  AdminSuccessResponseSchema,\n  BatchAllResponseSchema,\n  CheckFileGenericResponseSchema,\n  ConfluenceMeResponseSchema,\n  ConfluenceUpsertPageResponseSchema,\n  GetParentsResponseSchema,\n  IntercomCheckConversationResponseSchema,\n  IntercomCheckMissingConversationsResponseSchema,\n  IntercomCheckTeamsResponseSchema,\n  IntercomFetchConversationResponseSchema,\n  IntercomFetchArticlesResponseSchema,\n  NotionCheckUrlResponseSchema,\n  NotionDeleteUrlResponseSchema,\n  NotionMeResponseSchema,\n  NotionSearchPagesResponseSchema,\n  NotionUpsertResponseSchema,\n  TemporalCheckQueueResponseSchema,\n  TemporalUnprocessedWorkflowsResponseSchema,\n  IntercomForceResyncArticlesResponseSchema,\n  ZendeskCheckIsAdminResponseSchema,\n  ZendeskCountTicketsResponseSchema,\n  ZendeskFetchTicketResponseSchema,\n  ZendeskFetchBrandResponseSchema,\n]);\n\nexport type AdminResponseType = t.TypeOf<typeof AdminResponseSchema>;\n","const CONNECTORS_API_ERROR_TYPES = [\n  \"authorization_error\",\n  \"not_found\",\n  \"internal_server_error\",\n  \"unexpected_error_format\",\n  \"unexpected_response_format\",\n  \"unexpected_network_error\",\n  \"unknown_connector_provider\",\n  \"invalid_request_error\",\n  \"connector_not_found\",\n  \"connector_configuration_not_found\",\n  \"connector_update_error\",\n  \"connector_update_unauthorized\",\n  \"connector_oauth_target_mismatch\",\n  \"connector_oauth_user_missing_rights\",\n  \"connector_oauth_error\",\n  \"connector_authorization_error\",\n  \"slack_channel_not_found\",\n  \"connector_rate_limit_error\",\n  \"slack_configuration_not_found\",\n  \"google_drive_webhook_not_found\",\n] as const;\nexport type ConnectorsAPIErrorType =\n  (typeof CONNECTORS_API_ERROR_TYPES)[number];\n\nexport type ConnectorsAPIError = {\n  type: ConnectorsAPIErrorType;\n  message: string;\n};\n\nexport type ConnectorsAPIErrorResponse = {\n  error: ConnectorsAPIError;\n};\n\nexport type ConnectorsAPIErrorWithStatusCode = {\n  api_error: ConnectorsAPIError;\n  status_code: number;\n};\n\nexport type WithConnectorsAPIErrorReponse<T> = T | ConnectorsAPIErrorResponse;\n\nexport function isConnectorsAPIError(obj: unknown): obj is ConnectorsAPIError {\n  return (\n    typeof obj === \"object\" &&\n    obj !== null &&\n    \"message\" in obj &&\n    typeof obj.message === \"string\" &&\n    \"type\" in obj &&\n    typeof obj.type === \"string\" &&\n    CONNECTORS_API_ERROR_TYPES.includes(obj.type as ConnectorsAPIErrorType)\n  );\n}\n","import * as t from \"io-ts\";\n\n// Auto-read patterns.\n\nconst SlackAutoReadPatternSchema = t.type({\n  pattern: t.string,\n  spaceId: t.string,\n});\nconst SlackAutoReadPatternsSchema = t.array(SlackAutoReadPatternSchema);\n\nexport type SlackAutoReadPattern = t.TypeOf<typeof SlackAutoReadPatternSchema>;\n\nexport function isSlackAutoReadPatterns(\n  v: unknown[]\n): v is SlackAutoReadPattern[] {\n  return SlackAutoReadPatternsSchema.is(v);\n}\n\n// Configuration.\n\nexport const SlackConfigurationTypeSchema = t.type({\n  botEnabled: t.boolean,\n  whitelistedDomains: t.union([t.array(t.string), t.undefined]),\n  autoReadChannelPatterns: SlackAutoReadPatternsSchema,\n});\n\nexport type SlackConfigurationType = t.TypeOf<\n  typeof SlackConfigurationTypeSchema\n>;\n\n// Whitelist.\n\nexport type SlackbotWhitelistType = \"summon_agent\" | \"index_messages\";\n\nexport function isSlackbotWhitelistType(\n  value: unknown\n): value is SlackbotWhitelistType {\n  return value === \"summon_agent\" || value === \"index_messages\";\n}\n","import * as t from \"io-ts\";\n\nexport const WEBCRAWLER_MAX_DEPTH = 5;\nexport const WEBCRAWLER_MAX_PAGES = 512;\n\nexport const CrawlingModes = [\"child\", \"website\"] as const;\nexport type CrawlingMode = (typeof CrawlingModes)[number];\n\nexport const CrawlingFrequencies = [\n  \"never\",\n  \"daily\",\n  \"weekly\",\n  \"monthly\",\n] as const;\nexport type CrawlingFrequency = (typeof CrawlingFrequencies)[number];\n\nexport const DepthOptions = [0, 1, 2, 3, 4, 5] as const;\nexport type DepthOption = (typeof DepthOptions)[number];\nexport type WebCrawlerConfigurationType = t.TypeOf<\n  typeof WebCrawlerConfigurationTypeSchema\n>;\n\nexport function isDepthOption(value: unknown): value is DepthOption {\n  return DepthOptions.includes(value as DepthOption);\n}\n\nexport const WebCrawlerConfigurationTypeSchema = t.type({\n  url: t.string,\n  depth: t.union([\n    t.literal(0),\n    t.literal(1),\n    t.literal(2),\n    t.literal(3),\n    t.literal(4),\n    t.literal(5),\n  ]),\n  maxPageToCrawl: t.number,\n  crawlMode: t.union([t.literal(\"child\"), t.literal(\"website\")]),\n  crawlFrequency: t.union([\n    t.literal(\"never\"),\n    t.literal(\"daily\"),\n    t.literal(\"weekly\"),\n    t.literal(\"monthly\"),\n  ]),\n  headers: t.record(t.string, t.string),\n});\n\nexport type WebCrawlerConfiguration = t.TypeOf<\n  typeof WebCrawlerConfigurationTypeSchema\n>;\n\nexport const WebCrawlerHeaderRedactedValue = \"<REDACTED>\";\n\nexport const WEBCRAWLER_DEFAULT_CONFIGURATION: WebCrawlerConfigurationType = {\n  url: \"\",\n  depth: 2,\n  maxPageToCrawl: 50,\n  crawlMode: \"website\",\n  crawlFrequency: \"monthly\",\n  headers: {},\n};\n","import * as t from \"io-ts\";\n\nimport { SlackConfigurationTypeSchema } from \"../../connectors/slack\";\nimport { WebCrawlerConfigurationTypeSchema } from \"../../connectors/webcrawler\";\n\nexport const ConnectorConfigurationTypeSchema = t.union([\n  WebCrawlerConfigurationTypeSchema,\n  SlackConfigurationTypeSchema,\n  t.null,\n]);\n\nexport const UpdateConnectorConfigurationTypeSchema = t.type({\n  configuration: ConnectorConfigurationTypeSchema,\n});\n\nexport type UpdateConnectorConfigurationType = t.TypeOf<\n  typeof UpdateConnectorConfigurationTypeSchema\n>;\n","import * as t from \"io-ts\";\n\nimport { ConnectorConfigurationTypeSchema } from \"./connector_configuration\";\n\nexport const ConnectorCreateRequestBodySchema = t.type({\n  workspaceAPIKey: t.string,\n  dataSourceId: t.string,\n  workspaceId: t.string,\n  connectionId: t.string,\n  configuration: ConnectorConfigurationTypeSchema,\n});\n\nexport type ConnectorCreateRequestBody = t.TypeOf<\n  typeof ConnectorCreateRequestBodySchema\n>;\n","import * as t from \"io-ts\";\n\nexport const UpdateConnectorRequestBodySchema = t.type({\n  connectionId: t.string,\n});\n\nexport type UpdateConnectorRequestBody = t.TypeOf<\n  typeof UpdateConnectorRequestBodySchema\n>;\n","import { SlackConfigurationType } from \"../connectors/slack\";\nimport { WebCrawlerConfigurationType } from \"../connectors/webcrawler\";\n\nexport type ConnectorConfiguration =\n  | WebCrawlerConfigurationType\n  | SlackConfigurationType\n  | null;\n\nexport function isWebCrawlerConfiguration(\n  config: ConnectorConfiguration | null\n): config is WebCrawlerConfigurationType {\n  const maybeWebCrawlerConfig = config as WebCrawlerConfigurationType;\n\n  return (\n    maybeWebCrawlerConfig?.url !== undefined &&\n    maybeWebCrawlerConfig?.depth !== undefined &&\n    maybeWebCrawlerConfig?.maxPageToCrawl !== undefined &&\n    maybeWebCrawlerConfig?.crawlMode !== undefined &&\n    maybeWebCrawlerConfig?.crawlFrequency !== undefined &&\n    maybeWebCrawlerConfig?.headers !== undefined\n  );\n}\n\nexport type ConnectorConfigurations = {\n  webcrawler: WebCrawlerConfigurationType;\n  notion: null;\n  slack: SlackConfigurationType;\n  google_drive: null;\n  github: null;\n  confluence: null;\n  microsoft: null;\n  intercom: null;\n};\n","import { ModelId } from \"../shared/model_id\";\n\nexport function makeConfluenceSyncWorkflowId(connectorId: ModelId) {\n  return `confluence-sync-${connectorId}`;\n}\n\nexport class ConfluenceClientError extends Error {\n  readonly type: \"validation_error\" | \"http_response_error\";\n  readonly status?: number;\n  readonly data?: object;\n  constructor(\n    message: string,\n    error_data: (\n      | { type: \"http_response_error\"; status: number }\n      | { type: \"validation_error\" }\n    ) & { data?: object }\n  ) {\n    super(message);\n    this.type = error_data.type;\n    this.status =\n      error_data.type === \"http_response_error\" ? error_data.status : undefined;\n    this.data = error_data.data;\n  }\n}\n\nexport function isConfluenceNotFoundError(\n  err: unknown\n): err is ConfluenceClientError {\n  return err instanceof ConfluenceClientError && err.status === 404;\n}\n","import * as t from \"io-ts\";\n\n// When viewing ContentNodes, we have 3 view types: \"tables\", \"documents\" and \"all\".\n// - The \"table\" view allows picking tables in the Extract and TableQuery tools,\n// which applies to Notion, Google Drive, Microsoft, Snowflake and BigQuery connectors.\n// - The \"document\" view allows picking documents in the Search tool,\n// which is useful for all connectors except Snowflake and BigQuery.\n// - The \"all\" view shows all nodes, which is used in the Knowledge tab for displaying content node trees.\n// More precisely, the \"table\" (resp. \"document\") view hides leaves that are document (resp. table).\n\n// Define a codec for ContentNodesViewType using io-ts.\n// WARNING: when changing this codec, search and map for comments on ContentNodesViewTypeCodec\n// because parts of the codebase could not use this type directly (and as such commented)\nexport const ContentNodesViewTypeCodec = t.union([\n  t.literal(\"table\"),\n  t.literal(\"document\"),\n  t.literal(\"all\"),\n]);\n\nexport type ContentNodesViewType = t.TypeOf<typeof ContentNodesViewTypeCodec>;\n\nexport function isValidContentNodesViewType(\n  value: unknown\n): value is ContentNodesViewType {\n  return value === \"document\" || value === \"table\" || value === \"all\";\n}\n","// Get the Table ID for a sheet within a Google Spreadsheet from the\n\nimport { ModelId } from \"../shared/model_id\";\n\n// Google-provided file ID and the ID of the sheet within the spreadsheet.\nexport function getGoogleSheetTableId(\n  googleFileId: string,\n  googleSheetId: number\n): string {\n  return `google-spreadsheet-${googleFileId}-sheet-${googleSheetId}`;\n}\n\n// Get the Content Node ID for a sheet within a Google Spreadsheet from the\n// Google-provided file ID and the ID of the sheet within the spreadsheet.\nexport function getGoogleSheetContentNodeInternalId(\n  googleFileId: string,\n  googleSheetId: number\n): string {\n  return getGoogleSheetTableId(googleFileId, googleSheetId);\n}\n\n// Recover the Google-provided file ID and the ID of the sheet within the\n// spreadsheet from the Content Node ID of a sheet.\nexport function getGoogleIdsFromSheetContentNodeInternalId(\n  internalId: string\n): {\n  googleFileId: string;\n  googleSheetId: string;\n} {\n  const parts = internalId.split(\"-sheet-\");\n  const googleFileId = parts[0].replace(\"google-spreadsheet-\", \"\");\n  const googleSheetId = parts[1];\n  return { googleFileId, googleSheetId };\n}\n\n// Check if a Content Node ID is a valid Content Node ID for a sheet within a\n// Google Spreadsheet.\nexport function isGoogleSheetContentNodeInternalId(\n  internalId: string\n): boolean {\n  return (\n    internalId.startsWith(\"google-spreadsheet-\") &&\n    internalId.includes(\"-sheet-\")\n  );\n}\n\nexport function googleDriveIncrementalSyncWorkflowId(connectorId: ModelId) {\n  return `googleDrive-IncrementalSync-${connectorId}`;\n}\n","import { ModelId } from \"../shared/model_id\";\n\nexport function getIntercomSyncWorkflowId(connectorId: ModelId) {\n  return `intercom-sync-${connectorId}`;\n}\n","import { ModelId } from \"../shared/model_id\";\n\nexport function microsoftIncrementalSyncWorkflowId(connectorId: ModelId) {\n  return `microsoft-incrementalSync-${connectorId}`;\n}\n\nexport function microsoftGarbageCollectionWorkflowId(connectorId: ModelId) {\n  return `microsoft-garbageCollection-${connectorId}`;\n}\n","import type {\n  BlockObjectResponse,\n  PageObjectResponse,\n} from \"@notionhq/client/build/src/api-endpoints\";\nimport * as t from \"io-ts\";\n\nimport { ModelId } from \"../shared/model_id\";\n\n// notion SDK types\nexport type PageObjectProperties = PageObjectResponse[\"properties\"];\nexport type PropertyKeys = keyof PageObjectProperties;\nexport type PropertyTypes = PageObjectProperties[PropertyKeys][\"type\"];\n\nexport function getNotionWorkflowId(\n  connectorId: ModelId,\n  isGarbageCollectionRun: boolean\n) {\n  let wfName = `workflow-notion-${connectorId}`;\n  if (isGarbageCollectionRun) {\n    wfName += \"-garbage-collector\";\n  }\n  return wfName;\n}\n\n// Extractor types\nexport type ParsedNotionPage = {\n  id: string;\n  url: string;\n  title?: string;\n  properties: ParsedNotionPageProperty[];\n  blocks: ParsedNotionBlock[];\n  rendered: string;\n  createdTime: number;\n  updatedTime: number;\n  author: string;\n  lastEditor: string;\n  hasBody: boolean;\n  parentType: \"database\" | \"page\" | \"block\" | \"workspace\";\n  parentId: string;\n};\n\nexport type ParsedNotionPageProperty = {\n  key: string;\n  id: string;\n  type: PropertyTypes;\n  text: string | null;\n};\n\nexport type NotionBlockType = BlockObjectResponse[\"type\"];\n\nexport type ParsedNotionBlock = {\n  id: string;\n  type: NotionBlockType;\n  text: string | null;\n  hasChildren: boolean;\n  childDatabaseTitle: string | null;\n};\n\nexport const ParsedNotionDatabaseSchema = t.type({\n  id: t.string,\n  url: t.string,\n  title: t.union([t.string, t.undefined]),\n  parentType: t.union([\n    t.literal(\"database\"),\n    t.literal(\"page\"),\n    t.literal(\"block\"),\n    t.literal(\"workspace\"),\n  ]),\n  parentId: t.string,\n  archived: t.boolean,\n});\n\nexport type ParsedNotionDatabase = t.TypeOf<typeof ParsedNotionDatabaseSchema>;\n\n// Returns the Table ID for a Notion database from the Notion-provided database ID.\nexport function getNotionDatabaseTableId(notionDatabaseId: string): string {\n  return `notion-${notionDatabaseId}`;\n}\n\n// Returns the Table ID for a Notion database from the Content Node ID.\nexport function getNotionDatabaseTableIdFromContentNodeInternalId(\n  internalId: string\n): string {\n  // The internalId is also the notion-provided database ID\n  // so we can just use the same function.\n  return getNotionDatabaseTableId(internalId);\n}\n","/**\n * Some databases and schemas are not useful to show in the content tree.\n * We exclude them here.\n */\nexport const EXCLUDE_DATABASES = [\"SNOWFLAKE\", \"SNOWFLAKE_SAMPLE_DATA\"];\nexport const EXCLUDE_SCHEMAS = [\"INFORMATION_SCHEMA\"];\n","import { ModelId } from \"../shared/model_id\";\n\nexport function getZendeskSyncWorkflowId(connectorId: ModelId): string {\n  return `zendesk-sync-${connectorId}`;\n}\n\nexport function getZendeskGarbageCollectionWorkflowId(\n  connectorId: ModelId\n): string {\n  return `zendesk-gc-${connectorId}`;\n}\n","import { ProviderVisibility } from \"../front/lib/connectors_api\";\nimport { CoreAPIRow } from \"../front/lib/core_api\";\n\nexport type QdrantCluster = \"cluster-0\";\nexport const DEFAULT_QDRANT_CLUSTER: QdrantCluster = \"cluster-0\";\n\nexport interface EmbedderType {\n  provider_id: string;\n  model_id: string;\n  splitter_id: string;\n  max_chunk_size: number;\n}\n\ninterface EmbedderConfigType {\n  embedder: EmbedderType;\n}\n\nexport type CoreAPIDataSourceConfig = {\n  embedder_config: EmbedderConfigType;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  qdrant_config: {\n    cluster: QdrantCluster;\n    shadow_write_cluster: QdrantCluster | null;\n  } | null;\n};\n\nexport type CoreAPIDataSource = {\n  config: CoreAPIDataSourceConfig;\n  created: number;\n  data_source_id: string;\n  data_source_internal_id: string;\n  name: string;\n};\n\nexport type CoreAPIDataSourceDocumentSection = {\n  prefix: string | null;\n  content: string | null;\n  sections: CoreAPIDataSourceDocumentSection[];\n};\n\nexport function sectionFullText(\n  section: CoreAPIDataSourceDocumentSection\n): string {\n  return (\n    `${section.prefix || \"\"}${section.content || \"\"}` +\n    section.sections.map(sectionFullText).join(\"\")\n  );\n}\n\nexport type CoreAPIDocument = {\n  data_source_id: string;\n  created: number;\n  document_id: string;\n  parents: string[];\n  parent_id: string | null;\n  timestamp: number;\n  tags: string[];\n  source_url?: string | null;\n  hash: string;\n  text_size: number;\n  chunk_count: number;\n  chunks: {\n    text: string;\n    hash: string;\n    offset: number;\n    vector?: number[] | null;\n    score?: number | null;\n  }[];\n  title: string | null;\n  mime_type: string | null;\n  text?: string | null;\n};\n\nexport type CoreAPIDocumentBlob = {\n  document_id: string;\n  timestamp: number;\n  tags: string[];\n  parent_id: string | null;\n  parents: string[];\n  source_url: string | null;\n  section: CoreAPIDataSourceDocumentSection;\n  title: string;\n  mime_type: string;\n  provider_visibility: ProviderVisibility | null;\n};\n\nexport type CoreAPITableBlob = {\n  table_id: string;\n  name: string;\n  description: string;\n  timestamp: number;\n  tags: string[];\n  parent_id?: string;\n  parents: string[];\n  source_url?: string;\n\n  // Remote DB specifics.\n  remote_database_table_id?: string;\n  remote_database_secret_id?: string;\n\n  // Node meta.\n  title: string;\n  mime_type: string;\n  provider_visibility?: ProviderVisibility;\n\n  // Rows.\n  rows: CoreAPIRow[];\n};\n\nexport type CoreAPILightDocument = {\n  hash: string;\n  text_size: number;\n  chunk_count: number;\n  token_count: number;\n  created: number;\n};\n\nexport type CoreAPIFolder = {\n  data_source_id: string;\n  folder_id: string;\n  timestamp: number;\n  title: string;\n  parent_id: string | null;\n  parents: string[];\n};\n\nexport type CoreAPIDocumentVersionStatus = \"latest\" | \"superseded\" | \"deleted\";\n\nexport type CoreAPIDocumentVersion = {\n  hash: string;\n  created: number;\n  status: CoreAPIDocumentVersionStatus;\n};\n","/**\n * Data Source configuration\n */\n\nimport { BaseAction } from \"../../../front/assistant/actions/index\";\nimport { ConnectorProvider } from \"../../../front/data_source\";\nimport {\n  DataSourceViewType,\n  TagsFilter,\n} from \"../../../front/data_source_view\";\nimport { ModelId } from \"../../../shared/model_id\";\nimport { ioTsEnum } from \"../../../shared/utils/iots_utils\";\n\nexport const TIME_FRAME_UNITS = [\n  \"hour\",\n  \"day\",\n  \"week\",\n  \"month\",\n  \"year\",\n] as const;\nexport type TimeframeUnit = (typeof TIME_FRAME_UNITS)[number];\nexport const TimeframeUnitCodec = ioTsEnum<TimeframeUnit>(TIME_FRAME_UNITS);\n\nexport type TimeFrame = {\n  duration: number;\n  unit: TimeframeUnit;\n};\nexport function isTimeFrame(arg: RetrievalTimeframe): arg is TimeFrame {\n  return (\n    (arg as TimeFrame).duration !== undefined &&\n    (arg as TimeFrame).unit !== undefined\n  );\n}\n\nexport type DataSourceFilter = {\n  parents: { in: string[]; not: string[] } | null;\n  tags?: TagsFilter;\n};\n\nexport type DataSourceConfiguration = {\n  workspaceId: string;\n  dataSourceViewId: string;\n  filter: DataSourceFilter;\n};\n\n/**\n * Retrieval configuration\n */\n\n// Retrieval specifies a list of data sources (with possible parent filtering, possible \"all\" data\n// sources), a query (\"auto\" generated by the model \"none\", no query, `TemplatedQuery`, fixed\n// query), a relative time frame (\"auto\" generated by the model, \"none\" no time filtering\n// `TimeFrame`) which applies to all data sources, and a top_k parameter.\n//\n// `query` and `relativeTimeFrame` will be used to generate the inputs specification for the model\n// in charge of generating the action inputs. The results will be used along with `topK` and\n// `dataSources` to query the data.\nexport type RetrievalQuery = \"auto\" | \"none\";\nexport type RetrievalTimeframe = \"auto\" | \"none\" | TimeFrame;\nexport type RetrievalConfigurationType = {\n  id: ModelId;\n  sId: string;\n\n  type: \"retrieval_configuration\";\n\n  dataSources: DataSourceConfiguration[];\n  query: RetrievalQuery;\n  relativeTimeFrame: RetrievalTimeframe;\n  topK: number | \"auto\";\n\n  name: string;\n  description: string | null;\n};\n\n/**\n * Retrieval action\n */\n\nexport interface RetrievalDocumentChunkType {\n  offset: number;\n  score: number | null;\n  text: string;\n}\n\nexport interface RetrievalDocumentType {\n  chunks: RetrievalDocumentChunkType[];\n  documentId: string;\n  dataSourceView: DataSourceViewType | null;\n  id: ModelId;\n  reference: string; // Short random string so that the model can refer to the document.\n  score: number | null;\n  sourceUrl: string | null;\n  tags: string[];\n  timestamp: number;\n}\n\ntype ConnectorProviderDocumentType =\n  | Exclude<ConnectorProvider, \"webcrawler\">\n  | \"document\";\n\nexport function getProviderFromRetrievedDocument(\n  document: RetrievalDocumentType\n): ConnectorProviderDocumentType {\n  if (document.dataSourceView) {\n    if (document.dataSourceView.dataSource.connectorProvider === \"webcrawler\") {\n      return \"document\";\n    }\n    return document.dataSourceView.dataSource.connectorProvider || \"document\";\n  }\n  return \"document\";\n}\n\nexport function getTitleFromRetrievedDocument(\n  document: RetrievalDocumentType\n): string {\n  const provider = getProviderFromRetrievedDocument(document);\n\n  if (provider === \"slack\") {\n    for (const t of document.tags) {\n      if (t.startsWith(\"channelName:\")) {\n        return `#${t.substring(12)}`;\n      }\n    }\n  }\n\n  for (const t of document.tags) {\n    if (t.startsWith(\"title:\")) {\n      return t.substring(6);\n    }\n  }\n\n  return document.documentId;\n}\n\nexport interface RetrievalActionType extends BaseAction {\n  id: ModelId; // AgentRetrievalAction\n  agentMessageId: ModelId; // AgentMessage\n\n  params: {\n    relativeTimeFrame: TimeFrame | null;\n    query: string | null;\n    topK: number;\n    tagsIn: string[] | null;\n    tagsNot: string[] | null;\n  };\n  functionCallId: string | null;\n  functionCallName: string | null;\n  documents: RetrievalDocumentType[] | null;\n  step: number;\n  type: \"retrieval_action\";\n}\n\n/**\n * Retrieval Action Events\n */\n\n// Event sent during retrieval with the finalized query used to retrieve documents.\nexport type RetrievalParamsEvent = {\n  type: \"retrieval_params\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  dataSources: DataSourceConfiguration[];\n  action: RetrievalActionType;\n};\n\nexport type RetrievalErrorEvent = {\n  type: \"retrieval_error\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  error: {\n    code: string;\n    message: string;\n  };\n};\n\nexport type RetrievalSuccessEvent = {\n  type: \"retrieval_success\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  action: RetrievalActionType;\n};\n","import {\n  AgentReasoningEffort,\n  LightAgentConfigurationType,\n} from \"../../front/assistant/agent\";\nimport { GenerationTokensEvent } from \"../../front/assistant/generation\";\nimport { WorkspaceType } from \"../../front/user\";\nimport { WhitelistableFeature } from \"../../shared/feature_flags\";\nimport { ExtractSpecificKeys } from \"../../shared/typescipt_utils\";\nimport { ioTsEnum } from \"../../shared/utils/iots_utils\";\n\n/**\n * PROVIDER IDS\n */\n\nexport const MODEL_PROVIDER_IDS = [\n  \"openai\",\n  \"anthropic\",\n  \"mistral\",\n  \"google_ai_studio\",\n  \"togetherai\",\n  \"deepseek\",\n  \"fireworks\",\n] as const;\nexport type ModelProviderIdType = (typeof MODEL_PROVIDER_IDS)[number];\n\nexport const REASONING_EFFORT_IDS = [\"low\", \"medium\", \"high\"] as const;\nexport type ReasoningEffortIdType = (typeof REASONING_EFFORT_IDS)[number];\n\nexport const DEFAULT_EMBEDDING_PROVIDER_ID = \"openai\";\nexport const EMBEDDING_PROVIDER_IDS = [\n  DEFAULT_EMBEDDING_PROVIDER_ID,\n  \"mistral\",\n] as const;\nexport type EmbeddingProviderIdType = (typeof EMBEDDING_PROVIDER_IDS)[number];\n\nexport const isModelProviderId = (\n  providerId: string\n): providerId is ModelProviderIdType =>\n  MODEL_PROVIDER_IDS.includes(providerId as ModelProviderIdType);\n\nexport const ModelProviderIdCodec =\n  ioTsEnum<(typeof MODEL_PROVIDER_IDS)[number]>(MODEL_PROVIDER_IDS);\n\nexport const ReasoningEffortCodec =\n  ioTsEnum<(typeof REASONING_EFFORT_IDS)[number]>(REASONING_EFFORT_IDS);\n\nexport const EmbeddingProviderCodec = ioTsEnum<\n  (typeof EMBEDDING_PROVIDER_IDS)[number]\n>(EMBEDDING_PROVIDER_IDS);\n\nexport function isProviderWhitelisted(\n  owner: WorkspaceType,\n  providerId: ModelProviderIdType\n) {\n  const whiteListedProviders = owner.whiteListedProviders ?? MODEL_PROVIDER_IDS;\n  return whiteListedProviders.includes(providerId);\n}\n\nexport function getSmallWhitelistedModel(\n  owner: WorkspaceType\n): ModelConfigurationType | null {\n  if (isProviderWhitelisted(owner, \"openai\")) {\n    return GPT_4O_MINI_MODEL_CONFIG;\n  }\n  if (isProviderWhitelisted(owner, \"anthropic\")) {\n    return CLAUDE_3_5_HAIKU_DEFAULT_MODEL_CONFIG;\n  }\n  if (isProviderWhitelisted(owner, \"google_ai_studio\")) {\n    return GEMINI_FLASH_DEFAULT_MODEL_CONFIG;\n  }\n  if (isProviderWhitelisted(owner, \"mistral\")) {\n    return MISTRAL_SMALL_MODEL_CONFIG;\n  }\n  return null;\n}\n\nexport function getLargeWhitelistedModel(\n  owner: WorkspaceType\n): ModelConfigurationType | null {\n  if (isProviderWhitelisted(owner, \"anthropic\")) {\n    return CLAUDE_3_5_SONNET_DEFAULT_MODEL_CONFIG;\n  }\n  if (isProviderWhitelisted(owner, \"openai\")) {\n    return GPT_4O_MODEL_CONFIG;\n  }\n  if (isProviderWhitelisted(owner, \"google_ai_studio\")) {\n    return GEMINI_PRO_DEFAULT_MODEL_CONFIG;\n  }\n  if (isProviderWhitelisted(owner, \"mistral\")) {\n    return MISTRAL_LARGE_MODEL_CONFIG;\n  }\n  return null;\n}\n\n/**\n * MODEL IDS\n */\n\nexport const GPT_3_5_TURBO_MODEL_ID = \"gpt-3.5-turbo\" as const;\nexport const GPT_4_TURBO_MODEL_ID = \"gpt-4-turbo\" as const;\nexport const GPT_4O_MODEL_ID = \"gpt-4o\" as const;\nexport const GPT_4O_20240806_MODEL_ID = \"gpt-4o-2024-08-06\" as const;\nexport const GPT_4O_MINI_MODEL_ID = \"gpt-4o-mini\" as const;\nexport const O1_MODEL_ID = \"o1\" as const;\nexport const O1_MINI_MODEL_ID = \"o1-mini\" as const;\nexport const O3_MINI_MODEL_ID = \"o3-mini\" as const;\nexport const CLAUDE_3_OPUS_2024029_MODEL_ID = \"claude-3-opus-20240229\" as const;\nexport const CLAUDE_3_5_SONNET_20240620_MODEL_ID =\n  \"claude-3-5-sonnet-20240620\" as const;\nexport const CLAUDE_3_5_SONNET_20241022_MODEL_ID =\n  \"claude-3-5-sonnet-20241022\" as const;\nexport const CLAUDE_3_7_SONNET_20250219_MODEL_ID =\n  \"claude-3-7-sonnet-20250219\" as const;\nexport const CLAUDE_3_HAIKU_20240307_MODEL_ID =\n  \"claude-3-haiku-20240307\" as const;\nexport const CLAUDE_3_5_HAIKU_20241022_MODEL_ID =\n  \"claude-3-5-haiku-20241022\" as const;\nexport const CLAUDE_2_1_MODEL_ID = \"claude-2.1\" as const;\nexport const CLAUDE_INSTANT_1_2_MODEL_ID = \"claude-instant-1.2\" as const;\nexport const MISTRAL_LARGE_MODEL_ID = \"mistral-large-latest\" as const;\nexport const MISTRAL_MEDIUM_MODEL_ID = \"mistral-medium\" as const;\nexport const MISTRAL_SMALL_MODEL_ID = \"mistral-small-latest\" as const;\nexport const MISTRAL_CODESTRAL_MODEL_ID = \"codestral-latest\" as const;\nexport const GEMINI_1_5_PRO_LATEST_MODEL_ID = \"gemini-1.5-pro-latest\" as const;\nexport const GEMINI_1_5_FLASH_LATEST_MODEL_ID =\n  \"gemini-1.5-flash-latest\" as const;\nexport const GEMINI_2_FLASH_PREVIEW_MODEL_ID = \"gemini-2.0-flash-exp\" as const;\nexport const GEMINI_2_FLASH_THINKING_PREVIEW_MODEL_ID =\n  \"gemini-2.0-flash-thinking-exp-01-21\" as const;\nexport const GEMINI_2_FLASH_MODEL_ID = \"gemini-2.0-flash\" as const;\nexport const GEMINI_2_FLASH_LITE_PREVIEW_MODEL_ID =\n  \"gemini-2.0-flash-lite-preview-02-05\" as const;\nexport const GEMINI_2_PRO_PREVIEW_MODEL_ID =\n  \"gemini-2.0-pro-exp-02-05\" as const;\nexport const TOGETHERAI_LLAMA_3_3_70B_INSTRUCT_TURBO_MODEL_ID =\n  \"meta-llama/Llama-3.3-70B-Instruct-Turbo\" as const;\nexport const TOGETHERAI_QWEN_2_5_CODER_32B_INSTRUCT_MODEL_ID =\n  \"Qwen/Qwen2.5-Coder-32B-Instruct\" as const;\nexport const TOGETHERAI_QWEN_QWQ_32B_PREVIEW_MODEL_ID =\n  \"Qwen/QwQ-32B-Preview\" as const;\nexport const TOGETHERAI_QWEN_72B_INSTRUCT_MODEL_ID =\n  \"Qwen/Qwen2-72B-Instruct\" as const;\nexport const TOGETHERAI_DEEPSEEK_V3_MODEL_ID =\n  \"deepseek-ai/DeepSeek-V3\" as const;\nexport const TOGETHERAI_DEEPSEEK_R1_MODEL_ID =\n  \"deepseek-ai/DeepSeek-R1\" as const;\nexport const DEEPSEEK_CHAT_MODEL_ID = \"deepseek-chat\" as const;\nexport const DEEPSEEK_REASONER_MODEL_ID = \"deepseek-reasoner\" as const;\nexport const FIREWORKS_DEEPSEEK_R1_MODEL_ID =\n  \"accounts/fireworks/models/deepseek-r1\" as const;\n\nexport const MODEL_IDS = [\n  GPT_3_5_TURBO_MODEL_ID,\n  GPT_4_TURBO_MODEL_ID,\n  GPT_4O_MODEL_ID,\n  GPT_4O_20240806_MODEL_ID,\n  GPT_4O_MINI_MODEL_ID,\n  O1_MODEL_ID,\n  O1_MINI_MODEL_ID,\n  O3_MINI_MODEL_ID,\n  CLAUDE_3_OPUS_2024029_MODEL_ID,\n  CLAUDE_3_5_SONNET_20240620_MODEL_ID,\n  CLAUDE_3_5_SONNET_20241022_MODEL_ID,\n  CLAUDE_3_7_SONNET_20250219_MODEL_ID,\n  CLAUDE_3_HAIKU_20240307_MODEL_ID,\n  CLAUDE_3_5_HAIKU_20241022_MODEL_ID,\n  CLAUDE_2_1_MODEL_ID,\n  CLAUDE_INSTANT_1_2_MODEL_ID,\n  MISTRAL_LARGE_MODEL_ID,\n  MISTRAL_MEDIUM_MODEL_ID,\n  MISTRAL_SMALL_MODEL_ID,\n  MISTRAL_CODESTRAL_MODEL_ID,\n  GEMINI_1_5_PRO_LATEST_MODEL_ID,\n  GEMINI_1_5_FLASH_LATEST_MODEL_ID,\n  GEMINI_2_FLASH_PREVIEW_MODEL_ID,\n  GEMINI_2_FLASH_THINKING_PREVIEW_MODEL_ID,\n  GEMINI_2_FLASH_MODEL_ID,\n  GEMINI_2_FLASH_LITE_PREVIEW_MODEL_ID,\n  GEMINI_2_PRO_PREVIEW_MODEL_ID,\n  TOGETHERAI_LLAMA_3_3_70B_INSTRUCT_TURBO_MODEL_ID,\n  TOGETHERAI_QWEN_2_5_CODER_32B_INSTRUCT_MODEL_ID,\n  TOGETHERAI_QWEN_QWQ_32B_PREVIEW_MODEL_ID,\n  TOGETHERAI_QWEN_72B_INSTRUCT_MODEL_ID,\n  TOGETHERAI_DEEPSEEK_V3_MODEL_ID,\n  TOGETHERAI_DEEPSEEK_R1_MODEL_ID,\n  DEEPSEEK_CHAT_MODEL_ID,\n  DEEPSEEK_REASONER_MODEL_ID,\n  FIREWORKS_DEEPSEEK_R1_MODEL_ID,\n] as const;\nexport type ModelIdType = (typeof MODEL_IDS)[number];\n\nexport const isModelId = (modelId: string): modelId is ModelIdType =>\n  MODEL_IDS.includes(modelId as ModelIdType);\n\nexport const ModelIdCodec = ioTsEnum<(typeof MODEL_IDS)[number]>(MODEL_IDS);\n\n/**\n * MODEL CONFIGURATIONS\n */\n\nexport type ModelConfigurationType = {\n  providerId: ModelProviderIdType;\n  modelId: ModelIdType;\n  displayName: string;\n  contextSize: number;\n  recommendedTopK: number;\n  recommendedExhaustiveTopK: number;\n  largeModel: boolean;\n  description: string;\n  shortDescription: string;\n  isLegacy: boolean;\n\n  // Allows configuring parsing of special delimiters in the streamed model output.\n  delimitersConfiguration?: {\n    delimiters: Array<{\n      openingPattern: string;\n      closingPattern: string;\n      classification: Exclude<\n        GenerationTokensEvent[\"classification\"],\n        \"opening_delimiter\" | \"closing_delimiter\"\n      >;\n      swallow: boolean;\n    }>;\n    // If one of these patterns is found at the end of a model event, we'll wait for the\n    // the next event before emitting tokens.\n    incompleteDelimiterPatterns: RegExp[];\n  };\n\n  // This meta-prompt is injected into the agent's system instructions every time.\n  metaPrompt?: string;\n\n  // This meta-prompt is injected into the agent's system instructions if the agent is in a tool-use context.\n  toolUseMetaPrompt?: string;\n\n  // Adjust the token count estimation by a ratio. Only needed for anthropic models, where the token count is higher than our estimate\n  tokenCountAdjustment?: number;\n\n  // Controls how many output tokens the model can generate\n  generationTokensCount: number;\n\n  supportsVision: boolean;\n\n  // Only used for O-series OpenAI models.\n  reasoningEffort?: AgentReasoningEffort;\n\n  featureFlag?: WhitelistableFeature;\n  customAssistantFeatureFlag?: WhitelistableFeature;\n};\n\n// Should be used for all Open AI models older than gpt-4o-2024-08-06 to prevent issues\n// with invalid JSON.\nconst LEGACY_OPEN_AI_TOOL_USE_META_PROMPT =\n  \"When using tools, generate valid and properly escaped JSON arguments.\";\n\nexport const GPT_3_5_TURBO_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"openai\",\n  modelId: GPT_3_5_TURBO_MODEL_ID,\n  displayName: \"GPT 3.5 turbo\",\n  contextSize: 16_384,\n  recommendedTopK: 16,\n  recommendedExhaustiveTopK: 24, // 12_288\n  largeModel: false,\n  description:\n    \"OpenAI's GPT 3.5 Turbo model, cost-effective and high throughput (16k context).\",\n  shortDescription: \"OpenAI's fast model.\",\n  isLegacy: false,\n  toolUseMetaPrompt: LEGACY_OPEN_AI_TOOL_USE_META_PROMPT,\n  generationTokensCount: 2048,\n  supportsVision: false,\n};\n\nexport const GPT_4_TURBO_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"openai\",\n  modelId: GPT_4_TURBO_MODEL_ID,\n  displayName: \"GPT 4 turbo\",\n  contextSize: 128_000,\n  recommendedTopK: 32,\n  recommendedExhaustiveTopK: 128, // 65_536\n  largeModel: true,\n  description: \"OpenAI's GPT 4 Turbo model for complex tasks (128k context).\",\n  shortDescription: \"OpenAI's second best model.\",\n  isLegacy: false,\n  toolUseMetaPrompt: LEGACY_OPEN_AI_TOOL_USE_META_PROMPT,\n  generationTokensCount: 2048,\n  supportsVision: true,\n};\nexport const GPT_4O_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"openai\",\n  modelId: GPT_4O_MODEL_ID,\n  displayName: \"GPT 4o\",\n  contextSize: 128_000,\n  recommendedTopK: 32,\n  recommendedExhaustiveTopK: 128, // 65_536\n  largeModel: true,\n  description: \"OpenAI's GPT 4o model (128k context).\",\n  shortDescription: \"OpenAI's most advanced model.\",\n  isLegacy: false,\n  generationTokensCount: 2048,\n  supportsVision: true,\n};\nexport const GPT_4O_20240806_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"openai\",\n  modelId: GPT_4O_20240806_MODEL_ID,\n  displayName: \"GPT 4o\",\n  contextSize: 128_000,\n  recommendedTopK: 32,\n  recommendedExhaustiveTopK: 128, // 65_536\n  largeModel: true,\n  description: \"OpenAI's GPT 4o model (128k context).\",\n  shortDescription: \"OpenAI's most advanced model.\",\n  isLegacy: false,\n  generationTokensCount: 2048,\n  supportsVision: true,\n};\nexport const GPT_4O_MINI_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"openai\",\n  modelId: GPT_4O_MINI_MODEL_ID,\n  displayName: \"GPT 4o-mini\",\n  contextSize: 128_000,\n  recommendedTopK: 32,\n  recommendedExhaustiveTopK: 128, // 65_536\n  largeModel: true,\n  description: \"OpenAI's GPT 4o mini model (128k context).\",\n  shortDescription: \"OpenAI's fast model.\",\n  isLegacy: false,\n  toolUseMetaPrompt: LEGACY_OPEN_AI_TOOL_USE_META_PROMPT,\n  generationTokensCount: 2048,\n  supportsVision: true,\n};\nexport const O1_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"openai\",\n  modelId: O1_MODEL_ID,\n  displayName: \"o1\",\n  contextSize: 200_000,\n  recommendedTopK: 32,\n  recommendedExhaustiveTopK: 128, // 65_536\n  largeModel: true,\n  description:\n    \"OpenAI's reasoning model designed to solve hard problems across domains (Limited preview access).\",\n  shortDescription: \"OpenAI's reasoning model.\",\n  isLegacy: false,\n  generationTokensCount: 2048,\n  supportsVision: true,\n  featureFlag: \"openai_o1_feature\",\n  customAssistantFeatureFlag: \"openai_o1_custom_assistants_feature\",\n};\nexport const O1_HIGH_REASONING_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"openai\",\n  modelId: O1_MODEL_ID,\n  displayName: \"o1 (High Reasoning)\",\n  contextSize: 200_000,\n  recommendedTopK: 32,\n  recommendedExhaustiveTopK: 128, // 65_536\n  largeModel: true,\n  description:\n    \"OpenAI's reasoning model designed to solve hard problems across domains (Limited preview access). High reasoning effort.\",\n  shortDescription: \"OpenAI's reasoning model (high effort).\",\n  isLegacy: false,\n  generationTokensCount: 2048,\n  supportsVision: true,\n  reasoningEffort: \"high\",\n  featureFlag: \"openai_o1_high_reasoning_feature\",\n  customAssistantFeatureFlag:\n    \"openai_o1_high_reasoning_custom_assistants_feature\",\n};\nexport const O1_MINI_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"openai\",\n  modelId: O1_MINI_MODEL_ID,\n  displayName: \"o1-mini\",\n  contextSize: 128_000,\n  recommendedTopK: 32,\n  recommendedExhaustiveTopK: 128, // 65_536\n  largeModel: true,\n  description:\n    \"OpenAI's fast reasoning model particularly good at coding, math, and science.\",\n  shortDescription: \"OpenAI's fast reasoning model.\",\n  isLegacy: false,\n  generationTokensCount: 2048,\n  supportsVision: false,\n  featureFlag: \"openai_o1_mini_feature\",\n  customAssistantFeatureFlag: \"openai_o1_custom_assistants_feature\",\n};\nexport const O3_MINI_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"openai\",\n  modelId: O3_MINI_MODEL_ID,\n  displayName: \"o3-mini\",\n  contextSize: 200_000,\n  recommendedTopK: 32,\n  recommendedExhaustiveTopK: 128, // 65_536\n  largeModel: true,\n  description:\n    \"OpenAI's fast reasoning model particularly good at coding, math, and science.\",\n  shortDescription: \"OpenAI's fast reasoning model.\",\n  isLegacy: false,\n  generationTokensCount: 2048,\n  supportsVision: false,\n};\nexport const O3_MINI_HIGH_REASONING_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"openai\",\n  modelId: O3_MINI_MODEL_ID,\n  displayName: \"o3-mini (High Reasoning)\",\n  contextSize: 200_000,\n  recommendedTopK: 32,\n  recommendedExhaustiveTopK: 128, // 65_536\n  largeModel: true,\n  description:\n    \"OpenAI's fast reasoning model particularly good at coding, math, and science. High reasoning effort.\",\n  shortDescription: \"OpenAI's fast reasoning model.\",\n  isLegacy: false,\n  generationTokensCount: 2048,\n  supportsVision: false,\n  reasoningEffort: \"high\",\n};\n\nconst ANTHROPIC_DELIMITERS_CONFIGURATION = {\n  incompleteDelimiterPatterns: [/<\\/?[a-zA-Z_]*$/],\n  delimiters: [\n    {\n      openingPattern: \"<thinking>\",\n      closingPattern: \"</thinking>\",\n      classification: \"chain_of_thought\" as const,\n      swallow: false,\n    },\n    {\n      openingPattern: \"<search_quality_reflection>\",\n      closingPattern: \"</search_quality_reflection>\",\n      classification: \"chain_of_thought\" as const,\n      swallow: false,\n    },\n    {\n      openingPattern: \"<reflecting>\",\n      closingPattern: \"</reflecting>\",\n      classification: \"chain_of_thought\" as const,\n      swallow: false,\n    },\n    {\n      openingPattern: \"<search_quality_score>\",\n      closingPattern: \"</search_quality_score>\",\n      classification: \"chain_of_thought\" as const,\n      swallow: true,\n    },\n    {\n      openingPattern: \"<result>\",\n      closingPattern: \"</result>\",\n      classification: \"tokens\" as const,\n      swallow: false,\n    },\n    {\n      openingPattern: \"<response>\",\n      closingPattern: \"</response>\",\n      classification: \"tokens\" as const,\n      swallow: false,\n    },\n  ],\n};\n\nconst ANTHROPIC_TOOL_USE_META_PROMPT =\n  `Immediately before using a tool, think for one short bullet point in \\`<thinking>\\` tags about ` +\n  `how it evaluates against the criteria for a good and bad tool use. ` +\n  `After using a tool, think for one short bullet point in \\`<thinking>\\` tags to evaluate ` +\n  `whether the tools results are enough to answer the user's question. ` +\n  `The response to the user must be in \\`<response>\\` tags. ` +\n  `There must be a single \\`<response>\\` after the tools use (if any).`;\n\nexport const CLAUDE_3_OPUS_DEFAULT_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"anthropic\",\n  modelId: CLAUDE_3_OPUS_2024029_MODEL_ID,\n  displayName: \"Claude 3 Opus\",\n  contextSize: 180_000,\n  recommendedTopK: 32,\n  recommendedExhaustiveTopK: 128, // 65_536\n  largeModel: true,\n  description: \"Anthropic's Claude 3 Opus model (200k context).\",\n  shortDescription: \"Anthropic's largest model.\",\n  isLegacy: false,\n  delimitersConfiguration: ANTHROPIC_DELIMITERS_CONFIGURATION,\n  generationTokensCount: 4096,\n  supportsVision: true,\n  toolUseMetaPrompt: ANTHROPIC_TOOL_USE_META_PROMPT,\n  tokenCountAdjustment: 1.15,\n};\n\nexport const CLAUDE_3_5_SONNET_20240620_DEPRECATED_MODEL_CONFIG: ModelConfigurationType =\n  {\n    providerId: \"anthropic\",\n    modelId: CLAUDE_3_5_SONNET_20240620_MODEL_ID,\n    displayName: \"Claude 3.5 Sonnet\",\n    contextSize: 180_000,\n    recommendedTopK: 32,\n    recommendedExhaustiveTopK: 128, // 65_536\n    largeModel: true,\n    description: \"Anthropic's latest Claude 3.5 Sonnet model (200k context).\",\n    shortDescription: \"Anthropic's latest model.\",\n    isLegacy: false,\n    delimitersConfiguration: ANTHROPIC_DELIMITERS_CONFIGURATION,\n    generationTokensCount: 8192,\n    supportsVision: true,\n    toolUseMetaPrompt: ANTHROPIC_TOOL_USE_META_PROMPT,\n    tokenCountAdjustment: 1.15,\n  };\n\nexport const CLAUDE_3_5_SONNET_DEFAULT_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"anthropic\",\n  modelId: CLAUDE_3_5_SONNET_20241022_MODEL_ID,\n  displayName: \"Claude 3.5 Sonnet\",\n  contextSize: 180_000,\n  recommendedTopK: 32,\n  recommendedExhaustiveTopK: 128, // 65_536\n  largeModel: true,\n  description: \"Anthropic's latest Claude 3.5 Sonnet model (200k context).\",\n  shortDescription: \"Anthropic's latest model.\",\n  isLegacy: false,\n  delimitersConfiguration: ANTHROPIC_DELIMITERS_CONFIGURATION,\n  generationTokensCount: 8192,\n  supportsVision: true,\n  toolUseMetaPrompt: ANTHROPIC_TOOL_USE_META_PROMPT,\n  tokenCountAdjustment: 1.15,\n};\nexport const CLAUDE_3_7_SONNET_DEFAULT_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"anthropic\",\n  modelId: CLAUDE_3_7_SONNET_20250219_MODEL_ID,\n  displayName: \"Claude 3.7 Sonnet\",\n  contextSize: 200_000,\n  recommendedTopK: 16,\n  recommendedExhaustiveTopK: 128, // 65_536\n  largeModel: true,\n  description: \"Anthropic's latest Claude 3.7 Sonnet model (200k context).\",\n  shortDescription: \"Anthropic's best model.\",\n  isLegacy: false,\n  delimitersConfiguration: ANTHROPIC_DELIMITERS_CONFIGURATION,\n  generationTokensCount: 64_000,\n  supportsVision: true,\n  toolUseMetaPrompt: ANTHROPIC_TOOL_USE_META_PROMPT,\n  tokenCountAdjustment: 1.15,\n};\nexport const CLAUDE_3_5_HAIKU_DEFAULT_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"anthropic\",\n  modelId: CLAUDE_3_5_HAIKU_20241022_MODEL_ID,\n  displayName: \"Claude 3.5 Haiku\",\n  contextSize: 180_000,\n  recommendedTopK: 32,\n  recommendedExhaustiveTopK: 128, // 65_536\n  largeModel: false,\n  description:\n    \"Anthropic's Claude 3.5 Haiku model, cost effective and high throughput (200k context).\",\n  shortDescription: \"Anthropic's cost-effective model.\",\n  isLegacy: false,\n  generationTokensCount: 2048,\n  supportsVision: false,\n  tokenCountAdjustment: 1.15,\n};\nexport const CLAUDE_3_HAIKU_DEFAULT_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"anthropic\",\n  modelId: CLAUDE_3_HAIKU_20240307_MODEL_ID,\n  displayName: \"Claude 3 Haiku\",\n  contextSize: 180_000,\n  recommendedTopK: 32,\n  recommendedExhaustiveTopK: 128, // 65_536\n  largeModel: false,\n  description:\n    \"Anthropic's Claude 3 Haiku model, cost effective and high throughput (200k context).\",\n  shortDescription: \"Anthropic's cost-effective model.\",\n  isLegacy: false,\n  generationTokensCount: 2048,\n  supportsVision: true,\n  tokenCountAdjustment: 1.15,\n};\nexport const CLAUDE_2_DEFAULT_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"anthropic\",\n  modelId: CLAUDE_2_1_MODEL_ID,\n  displayName: \"Claude 2.1\",\n  contextSize: 180_000,\n  recommendedTopK: 32,\n  recommendedExhaustiveTopK: 128, // 65_536\n  largeModel: true,\n  description: \"Anthropic's Claude 2 model (200k context).\",\n  shortDescription: \"Anthropic's legacy model.\",\n  isLegacy: true,\n  generationTokensCount: 2048,\n  supportsVision: false,\n};\nexport const CLAUDE_INSTANT_DEFAULT_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"anthropic\",\n  modelId: CLAUDE_INSTANT_1_2_MODEL_ID,\n  displayName: \"Claude Instant 1.2\",\n  contextSize: 90_000,\n  recommendedTopK: 32,\n  recommendedExhaustiveTopK: 128, // 65_536\n  largeModel: false,\n  description:\n    \"Anthropic's low-latency and high throughput model (100k context)\",\n  shortDescription: \"Anthropic's legacy model.\",\n  isLegacy: true,\n  generationTokensCount: 2048,\n  supportsVision: false,\n};\n\nexport const MISTRAL_LARGE_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"mistral\",\n  modelId: MISTRAL_LARGE_MODEL_ID,\n  displayName: \"Mistral Large\",\n  contextSize: 128_000,\n  recommendedTopK: 16,\n  recommendedExhaustiveTopK: 56, // 28_672\n  largeModel: true,\n  description: \"Mistral's `large 2` model (128k context).\",\n  shortDescription: \"Mistral's large model.\",\n  isLegacy: false,\n  generationTokensCount: 2048,\n  supportsVision: false,\n};\nexport const MISTRAL_MEDIUM_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"mistral\",\n  modelId: MISTRAL_MEDIUM_MODEL_ID,\n  displayName: \"Mistral Medium\",\n  contextSize: 32_000,\n  recommendedTopK: 16,\n  recommendedExhaustiveTopK: 56, // 28_672\n  largeModel: true,\n  description: \"Mistral's `medium` model (32k context).\",\n  shortDescription: \"Mistral's legacy model.\",\n  isLegacy: true,\n  generationTokensCount: 2048,\n  supportsVision: false,\n};\nexport const MISTRAL_SMALL_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"mistral\",\n  modelId: MISTRAL_SMALL_MODEL_ID,\n  displayName: \"Mistral Small\",\n  contextSize: 32_000,\n  recommendedTopK: 16,\n  recommendedExhaustiveTopK: 56, // 28_672\n  largeModel: false,\n  description: \"Mistral's `small` model (8x7B Instruct, 32k context).\",\n  shortDescription: \"Mistral's cost-effective model.\",\n  isLegacy: false,\n  generationTokensCount: 2048,\n  supportsVision: false,\n};\n\nexport const MISTRAL_CODESTRAL_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"mistral\",\n  modelId: MISTRAL_CODESTRAL_MODEL_ID,\n  displayName: \"Mistral Codestral\",\n  contextSize: 32_000,\n  recommendedTopK: 16,\n  recommendedExhaustiveTopK: 56, // 28_672\n  largeModel: false,\n  description:\n    \"Mistral's `codestral` model, specifically designed and optimized for code generation tasks.\",\n  shortDescription: \"Mistral's code model.\",\n  isLegacy: false,\n  generationTokensCount: 2048,\n  supportsVision: false,\n};\n\nexport const GEMINI_PRO_DEFAULT_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"google_ai_studio\",\n  modelId: GEMINI_1_5_PRO_LATEST_MODEL_ID,\n  displayName: \"Gemini Pro 1.5\",\n  contextSize: 1_000_000,\n  recommendedTopK: 64,\n  recommendedExhaustiveTopK: 128, // 65_536\n  largeModel: true,\n  description:\n    \"Google's best model for scaling across a wide range of tasks (1m context).\",\n  shortDescription: \"Google's large model.\",\n  isLegacy: false,\n  generationTokensCount: 2048,\n  supportsVision: false,\n};\n\nexport const GEMINI_FLASH_DEFAULT_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"google_ai_studio\",\n  modelId: GEMINI_1_5_FLASH_LATEST_MODEL_ID,\n  displayName: \"Gemini Flash 1.5\",\n  contextSize: 1_000_000,\n  recommendedTopK: 64,\n  recommendedExhaustiveTopK: 128, // 65_536\n  largeModel: true,\n  description:\n    \"Google's lightweight, fast and cost-efficient model (1m context).\",\n  shortDescription: \"Google's cost-effective model.\",\n  isLegacy: false,\n  generationTokensCount: 2048,\n  supportsVision: false,\n};\n\nexport const GEMINI_2_FLASH_PREVIEW_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"google_ai_studio\",\n  modelId: GEMINI_2_FLASH_PREVIEW_MODEL_ID,\n  displayName: \"Gemini Flash 2.0\",\n  contextSize: 1_000_000,\n  recommendedTopK: 64,\n  recommendedExhaustiveTopK: 128,\n  largeModel: true,\n  description:\n    \"Google's lightweight, fast and cost-efficient model (1m context).\",\n  shortDescription: \"Google's cost-effective model (preview).\",\n  isLegacy: false,\n  generationTokensCount: 2048,\n  supportsVision: true,\n  featureFlag: \"google_ai_studio_experimental_models_feature\",\n};\n\nexport const GEMINI_2_FLASH_THINKING_PREVIEW_MODEL_CONFIG: ModelConfigurationType =\n  {\n    providerId: \"google_ai_studio\",\n    modelId: GEMINI_2_FLASH_THINKING_PREVIEW_MODEL_ID,\n    displayName: \"Gemini Flash 2.0 Thinking\",\n    contextSize: 32_000,\n    recommendedTopK: 64,\n    recommendedExhaustiveTopK: 128,\n    largeModel: true,\n    description:\n      \"Google's lightweight model optimized for reasoning (1m context).\",\n    shortDescription: \"Google's reasoning-focused model (preview).\",\n    isLegacy: false,\n    generationTokensCount: 2048,\n    supportsVision: true,\n    featureFlag: \"google_ai_studio_experimental_models_feature\",\n  };\n\nexport const GEMINI_2_FLASH_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"google_ai_studio\",\n  modelId: GEMINI_2_FLASH_MODEL_ID,\n  displayName: \"Gemini Flash 2.0\",\n  contextSize: 1_000_000,\n  recommendedTopK: 64,\n  recommendedExhaustiveTopK: 128,\n  largeModel: true,\n  description: \"Google's fast large context model (1m context).\",\n  shortDescription: \"Google's fast model.\",\n  isLegacy: false,\n  generationTokensCount: 2048,\n  supportsVision: true,\n};\n\nexport const GEMINI_2_FLASH_LITE_PREVIEW_MODEL_CONFIG: ModelConfigurationType =\n  {\n    providerId: \"google_ai_studio\",\n    modelId: GEMINI_2_FLASH_LITE_PREVIEW_MODEL_ID,\n    displayName: \"Gemini Flash 2.0 Lite Preview\",\n    contextSize: 1_000_000,\n    recommendedTopK: 64,\n    recommendedExhaustiveTopK: 128,\n    largeModel: true,\n    description: \"Google's lightweight large context model (1m context).\",\n    shortDescription: \"Google's lightweight model (preview).\",\n    isLegacy: false,\n    generationTokensCount: 2048,\n    supportsVision: true,\n    featureFlag: \"google_ai_studio_experimental_models_feature\",\n  };\n\nexport const GEMINI_2_PRO_PREVIEW_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"google_ai_studio\",\n  modelId: GEMINI_2_PRO_PREVIEW_MODEL_ID,\n  displayName: \"Gemini Flash 2.0 Pro Preview\",\n  contextSize: 1_000_000,\n  recommendedTopK: 64,\n  recommendedExhaustiveTopK: 128,\n  largeModel: true,\n  description: \"Google's powerful large context model (1m context).\",\n  shortDescription: \"Google's powerful model (preview).\",\n  isLegacy: false,\n  generationTokensCount: 2048,\n  supportsVision: true,\n  featureFlag: \"google_ai_studio_experimental_models_feature\",\n};\n\nexport const TOGETHERAI_LLAMA_3_3_70B_INSTRUCT_TURBO_MODEL_CONFIG: ModelConfigurationType =\n  {\n    providerId: \"togetherai\",\n    modelId: TOGETHERAI_LLAMA_3_3_70B_INSTRUCT_TURBO_MODEL_ID,\n    displayName: \"Llama 3.3 70B Instruct Turbo\",\n    contextSize: 128_000,\n    recommendedTopK: 32,\n    recommendedExhaustiveTopK: 128, // 65_536\n    largeModel: true,\n    description: \"Meta's fast, powerful and open source model (128k context).\",\n    shortDescription: \"Meta's open source model.\",\n    isLegacy: false,\n    generationTokensCount: 2048,\n    supportsVision: false,\n  };\n\nexport const TOGETHERAI_QWEN_2_5_CODER_32B_INSTRUCT_MODEL_CONFIG: ModelConfigurationType =\n  {\n    providerId: \"togetherai\",\n    modelId: TOGETHERAI_QWEN_2_5_CODER_32B_INSTRUCT_MODEL_ID,\n    displayName: \"Qwen 2.5 Coder 32B Instruct\",\n    contextSize: 32_000,\n    recommendedTopK: 16,\n    recommendedExhaustiveTopK: 56, // 28_672\n    largeModel: false,\n    description: \"Alibaba's fast model for coding (32k context).\",\n    shortDescription: \"Alibaba's fast coding model.\",\n    isLegacy: false,\n    generationTokensCount: 2048,\n    supportsVision: false,\n  };\n\nexport const TOGETHERAI_QWEN_QWQ_32B_PREVIEW_MODEL_CONFIG: ModelConfigurationType =\n  {\n    providerId: \"togetherai\",\n    modelId: TOGETHERAI_QWEN_QWQ_32B_PREVIEW_MODEL_ID,\n    displayName: \"Qwen QwQ 32B Preview\",\n    contextSize: 32_000,\n    recommendedTopK: 16,\n    recommendedExhaustiveTopK: 56, // 28_672\n    largeModel: false,\n    description: \"Alibaba's fast reasoning model (32k context).\",\n    shortDescription: \"Alibaba's fast reasoning model.\",\n    isLegacy: false,\n    generationTokensCount: 2048,\n    supportsVision: false,\n  };\n\nexport const TOGETHERAI_QWEN_72B_INSTRUCT_MODEL_CONFIG: ModelConfigurationType =\n  {\n    providerId: \"togetherai\",\n    modelId: TOGETHERAI_QWEN_72B_INSTRUCT_MODEL_ID,\n    displayName: \"Qwen 72B Instruct\",\n    contextSize: 32_000,\n    recommendedTopK: 16,\n    recommendedExhaustiveTopK: 56, // 28_672\n    largeModel: false,\n    description: \"Alibaba's powerful model (32k context).\",\n    shortDescription: \"Alibaba's powerful model.\",\n    isLegacy: false,\n    generationTokensCount: 2048,\n    supportsVision: false,\n  };\n\nexport const TOGETHERAI_DEEPSEEK_V3_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"togetherai\",\n  modelId: TOGETHERAI_DEEPSEEK_V3_MODEL_ID,\n  displayName: \"DeepSeek V3 (TogetherAI)\",\n  contextSize: 131_072,\n  recommendedTopK: 32,\n  recommendedExhaustiveTopK: 64,\n  largeModel: true,\n  description: \"DeepSeek's best model (v3, 64k context).\",\n  shortDescription: \"DeepSeek's best model.\",\n  isLegacy: false,\n  generationTokensCount: 2048,\n  supportsVision: false,\n};\n\nexport const TOGETHERAI_DEEPSEEK_R1_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"togetherai\",\n  modelId: TOGETHERAI_DEEPSEEK_R1_MODEL_ID,\n  displayName: \"DeepSeek R1 (TogetherAI)\",\n  contextSize: 163_840,\n  recommendedTopK: 32,\n  recommendedExhaustiveTopK: 64,\n  largeModel: true,\n  description: \"DeepSeek R1 (reasoning, 163k context, served via TogetherAI).\",\n  shortDescription: \"DeepSeek R1 (reasoning model).\",\n  isLegacy: false,\n  generationTokensCount: 2048,\n  supportsVision: false,\n};\n\nexport const DEEPSEEK_CHAT_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"deepseek\",\n  modelId: DEEPSEEK_CHAT_MODEL_ID,\n  displayName: \"DeepSeek\",\n  contextSize: 64_000,\n  recommendedTopK: 32,\n  recommendedExhaustiveTopK: 64,\n  largeModel: true,\n  description: \"DeepSeek's best model (v3, 64k context).\",\n  shortDescription: \"DeepSeek's best model.\",\n  isLegacy: false,\n  generationTokensCount: 2048,\n  supportsVision: false,\n  featureFlag: \"deepseek_feature\",\n};\n\nexport const DEEPSEEK_REASONER_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"deepseek\",\n  modelId: DEEPSEEK_REASONER_MODEL_ID,\n  displayName: \"DeepSeek R1\",\n  contextSize: 64_000,\n  recommendedTopK: 32,\n  recommendedExhaustiveTopK: 64,\n  largeModel: true,\n  description: \"DeepSeek's reasoning model (R1, 64k context).\",\n  shortDescription: \"DeepSeek's reasoning model.\",\n  isLegacy: false,\n  generationTokensCount: 2048,\n  supportsVision: false,\n  featureFlag: \"deepseek_feature\",\n};\n\nexport const FIREWORKS_DEEPSEEK_R1_MODEL_CONFIG: ModelConfigurationType = {\n  providerId: \"fireworks\",\n  modelId: FIREWORKS_DEEPSEEK_R1_MODEL_ID,\n  displayName: \"DeepSeek R1 (Fireworks)\",\n  contextSize: 164_000,\n  recommendedTopK: 32,\n  recommendedExhaustiveTopK: 128,\n  largeModel: true,\n  description:\n    \"DeepSeek's reasoning model (164k context, served via Fireworks).\",\n  shortDescription: \"DeepSeek R1 (reasoning model).\",\n  isLegacy: false,\n  generationTokensCount: 2048,\n  supportsVision: false,\n  delimitersConfiguration: {\n    incompleteDelimiterPatterns: [/<\\/?[a-zA-Z_]*$/],\n    delimiters: [\n      {\n        openingPattern: \"<think>\",\n        closingPattern: \"</think>\",\n        classification: \"chain_of_thought\" as const,\n        swallow: false,\n      },\n    ],\n  },\n};\n\nexport const SUPPORTED_MODEL_CONFIGS: ModelConfigurationType[] = [\n  GPT_3_5_TURBO_MODEL_CONFIG,\n  GPT_4_TURBO_MODEL_CONFIG,\n  GPT_4O_MODEL_CONFIG,\n  GPT_4O_20240806_MODEL_CONFIG,\n  GPT_4O_MINI_MODEL_CONFIG,\n  O1_MODEL_CONFIG,\n  O1_HIGH_REASONING_MODEL_CONFIG,\n  O1_MINI_MODEL_CONFIG,\n  O3_MINI_MODEL_CONFIG,\n  O3_MINI_HIGH_REASONING_MODEL_CONFIG,\n  CLAUDE_3_OPUS_DEFAULT_MODEL_CONFIG,\n  CLAUDE_3_5_SONNET_20240620_DEPRECATED_MODEL_CONFIG,\n  CLAUDE_3_5_SONNET_DEFAULT_MODEL_CONFIG,\n  CLAUDE_3_7_SONNET_DEFAULT_MODEL_CONFIG,\n  CLAUDE_3_HAIKU_DEFAULT_MODEL_CONFIG,\n  CLAUDE_3_5_HAIKU_DEFAULT_MODEL_CONFIG,\n  CLAUDE_2_DEFAULT_MODEL_CONFIG,\n  CLAUDE_INSTANT_DEFAULT_MODEL_CONFIG,\n  MISTRAL_LARGE_MODEL_CONFIG,\n  MISTRAL_MEDIUM_MODEL_CONFIG,\n  MISTRAL_SMALL_MODEL_CONFIG,\n  MISTRAL_CODESTRAL_MODEL_CONFIG,\n  GEMINI_PRO_DEFAULT_MODEL_CONFIG,\n  GEMINI_FLASH_DEFAULT_MODEL_CONFIG,\n  GEMINI_2_FLASH_PREVIEW_MODEL_CONFIG,\n  GEMINI_2_FLASH_THINKING_PREVIEW_MODEL_CONFIG,\n  GEMINI_2_FLASH_MODEL_CONFIG,\n  GEMINI_2_FLASH_LITE_PREVIEW_MODEL_CONFIG,\n  GEMINI_2_PRO_PREVIEW_MODEL_CONFIG,\n  TOGETHERAI_LLAMA_3_3_70B_INSTRUCT_TURBO_MODEL_CONFIG,\n  TOGETHERAI_QWEN_2_5_CODER_32B_INSTRUCT_MODEL_CONFIG,\n  TOGETHERAI_QWEN_QWQ_32B_PREVIEW_MODEL_CONFIG,\n  TOGETHERAI_QWEN_72B_INSTRUCT_MODEL_CONFIG,\n  TOGETHERAI_DEEPSEEK_V3_MODEL_CONFIG,\n  TOGETHERAI_DEEPSEEK_R1_MODEL_CONFIG,\n  DEEPSEEK_CHAT_MODEL_CONFIG,\n  DEEPSEEK_REASONER_MODEL_CONFIG,\n  FIREWORKS_DEEPSEEK_R1_MODEL_CONFIG,\n];\n\nexport type ModelConfig = (typeof SUPPORTED_MODEL_CONFIGS)[number];\n\n// this creates a union type of all the {providerId: string, modelId: string}\n// pairs that are in SUPPORTED_MODELS\nexport type SupportedModel = ExtractSpecificKeys<\n  (typeof SUPPORTED_MODEL_CONFIGS)[number],\n  \"providerId\" | \"modelId\" | \"reasoningEffort\"\n>;\n\nexport function isSupportedModel(model: unknown): model is SupportedModel {\n  const maybeSupportedModel = model as SupportedModel;\n  return SUPPORTED_MODEL_CONFIGS.some(\n    (m) =>\n      m.modelId === maybeSupportedModel.modelId &&\n      m.providerId === maybeSupportedModel.providerId\n  );\n}\n\n/**\n * Global agent list (stored here to be imported from client-side)\n */\n\nexport enum GLOBAL_AGENTS_SID {\n  HELPER = \"helper\",\n  DUST = \"dust\",\n  SLACK = \"slack\",\n  GOOGLE_DRIVE = \"google_drive\",\n  NOTION = \"notion\",\n  GITHUB = \"github\",\n  INTERCOM = \"intercom\",\n  GPT35_TURBO = \"gpt-3.5-turbo\",\n  GPT4 = \"gpt-4\",\n  O1 = \"o1\",\n  O1_MINI = \"o1-mini\",\n  O1_HIGH_REASONING = \"o1_high\",\n  O3_MINI = \"o3-mini\",\n  CLAUDE_3_OPUS = \"claude-3-opus\",\n  CLAUDE_3_SONNET = \"claude-3-sonnet\",\n  CLAUDE_3_HAIKU = \"claude-3-haiku\",\n  CLAUDE_3_7_SONNET = \"claude-3-7-sonnet\",\n  CLAUDE_2 = \"claude-2\",\n  CLAUDE_INSTANT = \"claude-instant-1\",\n  MISTRAL_LARGE = \"mistral-large\",\n  MISTRAL_MEDIUM = \"mistral-medium\",\n  //!\\ TEMPORARY WORKAROUND: Renaming 'mistral' to 'mistral-small' is not feasible since\n  // it interferes with the retrieval of ongoing conversations involving this agent.\n  // Needed to preserve ongoing chat integrity due to 'sId=mistral' references in legacy messages.\n  MISTRAL_SMALL = \"mistral\",\n  GEMINI_PRO = \"gemini-pro\",\n  DEEPSEEK_R1 = \"deepseek-r1\",\n}\n\nexport function getGlobalAgentAuthorName(agentId: string): string {\n  switch (agentId) {\n    case GLOBAL_AGENTS_SID.GPT4:\n    case GLOBAL_AGENTS_SID.O1:\n    case GLOBAL_AGENTS_SID.O1_MINI:\n    case GLOBAL_AGENTS_SID.O1_HIGH_REASONING:\n    case GLOBAL_AGENTS_SID.O3_MINI:\n      return \"OpenAI\";\n    case GLOBAL_AGENTS_SID.CLAUDE_INSTANT:\n    case GLOBAL_AGENTS_SID.CLAUDE_3_OPUS:\n    case GLOBAL_AGENTS_SID.CLAUDE_3_SONNET:\n    case GLOBAL_AGENTS_SID.CLAUDE_3_7_SONNET:\n    case GLOBAL_AGENTS_SID.CLAUDE_3_HAIKU:\n    case GLOBAL_AGENTS_SID.CLAUDE_2:\n      return \"Anthropic\";\n    case GLOBAL_AGENTS_SID.MISTRAL_LARGE:\n    case GLOBAL_AGENTS_SID.MISTRAL_MEDIUM:\n    case GLOBAL_AGENTS_SID.MISTRAL_SMALL:\n      return \"Mistral\";\n    case GLOBAL_AGENTS_SID.GEMINI_PRO:\n      return \"Google\";\n    case GLOBAL_AGENTS_SID.DEEPSEEK_R1:\n      return \"DeepSeek\";\n    default:\n      return \"Dust\";\n  }\n}\n\nconst CUSTOM_ORDER: string[] = [\n  GLOBAL_AGENTS_SID.DUST,\n  GLOBAL_AGENTS_SID.GPT4,\n  GLOBAL_AGENTS_SID.O3_MINI,\n  GLOBAL_AGENTS_SID.SLACK,\n  GLOBAL_AGENTS_SID.NOTION,\n  GLOBAL_AGENTS_SID.GOOGLE_DRIVE,\n  GLOBAL_AGENTS_SID.GITHUB,\n  GLOBAL_AGENTS_SID.INTERCOM,\n  GLOBAL_AGENTS_SID.CLAUDE_3_OPUS,\n  GLOBAL_AGENTS_SID.CLAUDE_3_SONNET,\n  GLOBAL_AGENTS_SID.CLAUDE_3_HAIKU,\n  GLOBAL_AGENTS_SID.CLAUDE_3_7_SONNET,\n  GLOBAL_AGENTS_SID.CLAUDE_2,\n  GLOBAL_AGENTS_SID.CLAUDE_INSTANT,\n  GLOBAL_AGENTS_SID.MISTRAL_LARGE,\n  GLOBAL_AGENTS_SID.MISTRAL_MEDIUM,\n  GLOBAL_AGENTS_SID.MISTRAL_SMALL,\n  GLOBAL_AGENTS_SID.GEMINI_PRO,\n  GLOBAL_AGENTS_SID.HELPER,\n];\n\n// This function implements our general strategy to sort agents to users (input bar, agent list,\n// agent suggestions...).\nexport function compareAgentsForSort(\n  a: LightAgentConfigurationType,\n  b: LightAgentConfigurationType\n) {\n  // Place favorites first\n  if (a.userFavorite && !b.userFavorite) {\n    return -1;\n  }\n  if (b.userFavorite && !a.userFavorite) {\n    return 1;\n  }\n  // Check for 'dust'\n  if (a.sId === GLOBAL_AGENTS_SID.DUST) {\n    return -1;\n  }\n  if (b.sId === GLOBAL_AGENTS_SID.DUST) {\n    return 1;\n  }\n\n  // Check for 'gpt4'\n  if (a.sId === GLOBAL_AGENTS_SID.GPT4) {\n    return -1;\n  }\n  if (b.sId === GLOBAL_AGENTS_SID.GPT4) {\n    return 1;\n  }\n\n  // Check for agents with non-global 'scope'\n  if (a.scope !== \"global\" && b.scope === \"global\") {\n    return -1;\n  }\n  if (b.scope !== \"global\" && a.scope === \"global\") {\n    return 1;\n  }\n\n  // Check for customOrder (slack, notion, googledrive, github, claude)\n  const aIndex = CUSTOM_ORDER.indexOf(a.sId);\n  const bIndex = CUSTOM_ORDER.indexOf(b.sId);\n\n  if (aIndex !== -1 && bIndex !== -1) {\n    return aIndex - bIndex; // Both are in customOrder, sort them accordingly\n  }\n\n  if (aIndex !== -1) {\n    return -1;\n  } // Only a is in customOrder, it comes first\n  if (bIndex !== -1) {\n    return 1;\n  } // Only b is in customOrder, it comes first\n\n  // default: sort alphabetically\n  return a.name.localeCompare(b.name, \"en\", { sensitivity: \"base\" });\n}\n","import * as t from \"io-ts\";\n\nimport { createRangeCodec } from \"../../../shared/utils/iots_utils\";\nimport { TimeframeUnitCodec } from \"../../assistant/actions/retrieval\";\nimport {\n  isSupportedModel,\n  ModelIdCodec,\n  ModelProviderIdCodec,\n  ReasoningEffortCodec,\n  SupportedModel,\n} from \"../../lib/assistant\";\n\nconst LimitCodec = createRangeCodec(0, 100);\n\n// Get schema for the url query parameters: a view parameter with all the types\n// of AgentGetViewType\nexport const GetAgentConfigurationsQuerySchema = t.type({\n  view: t.union([\n    t.literal(\"current_user\"),\n    t.literal(\"list\"),\n    t.literal(\"workspace\"),\n    t.literal(\"published\"),\n    t.literal(\"global\"),\n    t.literal(\"admin_internal\"),\n    t.literal(\"all\"),\n    t.undefined,\n  ]),\n  withUsage: t.union([t.literal(\"true\"), t.literal(\"false\"), t.undefined]),\n  withAuthors: t.union([t.literal(\"true\"), t.literal(\"false\"), t.undefined]),\n  withFeedbacks: t.union([t.literal(\"true\"), t.literal(\"false\"), t.undefined]),\n  limit: t.union([LimitCodec, t.undefined]),\n  sort: t.union([\n    t.literal(\"priority\"),\n    t.literal(\"alphabetical\"),\n    t.undefined,\n  ]),\n});\n\nexport const GetAgentConfigurationsHistoryQuerySchema = t.type({\n  limit: t.union([LimitCodec, t.undefined]),\n});\n\nexport const GetAgentConfigurationsLeaderboardQuerySchema = t.type({\n  view: t.union([\n    t.literal(\"list\"),\n    t.literal(\"workspace\"),\n    t.literal(\"published\"),\n    t.literal(\"global\"),\n    t.literal(\"admin_internal\"),\n    t.literal(\"manage-assistants-search\"),\n    t.literal(\"all\"),\n  ]),\n});\n\nconst DataSourceFilterParentsCodec = t.union([\n  t.type({\n    in: t.array(t.string),\n    not: t.array(t.string),\n  }),\n  t.null,\n]);\n\nconst OptionalDataSourceFilterTagsCodec = t.partial({\n  tags: t.union([\n    t.type({\n      in: t.array(t.string),\n      not: t.array(t.string),\n      mode: t.union([t.literal(\"custom\"), t.literal(\"auto\")]),\n    }),\n    t.null,\n  ]),\n});\n\nconst DataSourceFilterCodec = t.intersection([\n  t.type({ parents: DataSourceFilterParentsCodec }),\n  OptionalDataSourceFilterTagsCodec,\n]);\n\nconst RetrievalActionConfigurationSchema = t.type({\n  type: t.literal(\"retrieval_configuration\"),\n  query: t.union([t.literal(\"auto\"), t.literal(\"none\")]),\n  relativeTimeFrame: t.union([\n    t.literal(\"auto\"),\n    t.literal(\"none\"),\n    t.type({\n      duration: t.number,\n      unit: TimeframeUnitCodec,\n    }),\n  ]),\n  topK: t.union([t.number, t.literal(\"auto\")]),\n  dataSources: t.array(\n    t.type({\n      dataSourceViewId: t.string,\n      workspaceId: t.string,\n      filter: DataSourceFilterCodec,\n    })\n  ),\n});\n\nconst DustAppRunActionConfigurationSchema = t.type({\n  type: t.literal(\"dust_app_run_configuration\"),\n  appWorkspaceId: t.string,\n  appId: t.string,\n});\n\nconst TablesQueryActionConfigurationSchema = t.type({\n  type: t.literal(\"tables_query_configuration\"),\n  tables: t.array(\n    t.type({\n      dataSourceViewId: t.string,\n      tableId: t.string,\n      workspaceId: t.string,\n    })\n  ),\n});\n\nconst WebsearchActionConfigurationSchema = t.type({\n  type: t.literal(\"websearch_configuration\"),\n});\n\nconst BrowseActionConfigurationSchema = t.type({\n  type: t.literal(\"browse_configuration\"),\n});\n\nconst ReasoningActionConfigurationSchema = t.type({\n  type: t.literal(\"reasoning_configuration\"),\n  modelId: ModelIdCodec,\n  providerId: ModelProviderIdCodec,\n  temperature: t.union([t.number, t.null]),\n  reasoningEffort: t.union([ReasoningEffortCodec, t.null]),\n});\n\nconst ProcessActionConfigurationSchema = t.type({\n  type: t.literal(\"process_configuration\"),\n  dataSources: t.array(\n    t.type({\n      dataSourceViewId: t.string,\n      workspaceId: t.string,\n      filter: DataSourceFilterCodec,\n    })\n  ),\n  relativeTimeFrame: t.union([\n    t.literal(\"auto\"),\n    t.literal(\"none\"),\n    t.type({\n      duration: t.number,\n      unit: TimeframeUnitCodec,\n    }),\n  ]),\n  schema: t.array(\n    t.type({\n      name: t.string,\n      type: t.union([\n        t.literal(\"string\"),\n        t.literal(\"number\"),\n        t.literal(\"boolean\"),\n      ]),\n      description: t.string,\n    })\n  ),\n});\n\nconst multiActionsCommonFields = {\n  name: t.union([t.string, t.null]),\n  description: t.union([t.string, t.null]),\n};\n\nconst requiredMultiActionsCommonFields = t.type({\n  name: t.string,\n  description: t.union([t.string, t.null]),\n});\n\nconst ActionConfigurationSchema = t.intersection([\n  t.union([\n    RetrievalActionConfigurationSchema,\n    DustAppRunActionConfigurationSchema,\n    TablesQueryActionConfigurationSchema,\n    ProcessActionConfigurationSchema,\n    WebsearchActionConfigurationSchema,\n    BrowseActionConfigurationSchema,\n    ReasoningActionConfigurationSchema,\n  ]),\n  requiredMultiActionsCommonFields,\n]);\n\nconst ModelConfigurationSchema = t.intersection([\n  t.type({\n    modelId: ModelIdCodec,\n    providerId: ModelProviderIdCodec,\n    temperature: t.number,\n  }),\n  // TODO(2024-11-04 flav) Clean up this legacy type.\n  t.partial(multiActionsCommonFields),\n  t.partial({\n    reasoningEffort: ReasoningEffortCodec,\n  }),\n]);\nconst IsSupportedModelSchema = new t.Type<SupportedModel>(\n  \"SupportedModel\",\n  isSupportedModel,\n  (i, c) => (isSupportedModel(i) ? t.success(i) : t.failure(i, c)),\n  t.identity\n);\n\nexport const PostOrPatchAgentConfigurationRequestBodySchema = t.type({\n  assistant: t.type({\n    name: t.string,\n    description: t.string,\n    instructions: t.union([t.string, t.null]),\n    pictureUrl: t.string,\n    status: t.union([\n      t.literal(\"active\"),\n      t.literal(\"archived\"),\n      t.literal(\"draft\"),\n    ]),\n    scope: t.union([\n      t.literal(\"workspace\"),\n      t.literal(\"published\"),\n      t.literal(\"private\"),\n    ]),\n    model: t.intersection([ModelConfigurationSchema, IsSupportedModelSchema]),\n    actions: t.array(ActionConfigurationSchema),\n    templateId: t.union([t.string, t.null, t.undefined]),\n    maxStepsPerRun: t.union([t.number, t.undefined]),\n    visualizationEnabled: t.boolean,\n  }),\n});\n\nexport type PostOrPatchAgentConfigurationRequestBody = t.TypeOf<\n  typeof PostOrPatchAgentConfigurationRequestBodySchema\n>;\n","/**\n *  Filters out nulls & undefineds from an array by correclty narrowing the type\n */\nexport function removeNulls<T>(arr: (T | null | undefined)[]): T[] {\n  return arr.filter((v): v is T => v !== null && v !== undefined);\n}\n\nexport function isString(value: unknown): value is string {\n  return typeof value === \"string\";\n}\n\nexport function isEmptyString(str: string | null | undefined): boolean {\n  if (str === null || str === undefined) {\n    return true;\n  }\n  return str.trim() === \"\";\n}\n","// Types.\nimport { removeNulls } from \"../shared/utils/general\";\n\nconst uniq = <T>(arr: T[]): T[] => Array.from(new Set(arr));\n\nexport const TABLE_PREFIX = \"TABLE:\";\n\nexport type FileStatus = \"created\" | \"failed\" | \"ready\";\n\nexport type FileUseCase =\n  | \"conversation\"\n  | \"avatar\"\n  | \"tool_output\"\n  | \"upsert_document\"\n  | \"upsert_table\";\n\nexport type FileUseCaseMetadata = {\n  conversationId: string;\n  generatedTables?: string[];\n};\n\nexport interface FileType {\n  contentType: SupportedFileContentType;\n  downloadUrl?: string;\n  fileName: string;\n  fileSize: number;\n  sId: string;\n  // TODO(spolu): move this to being the ModelId\n  id: string;\n  status: FileStatus;\n  uploadUrl?: string;\n  publicUrl?: string;\n  useCase: FileUseCase;\n}\n\nexport type FileTypeWithUploadUrl = FileType & { uploadUrl: string };\n\nexport type FileFormatCategory = \"image\" | \"data\" | \"code\" | \"delimited\";\n\n// Define max sizes for each category.\nexport const MAX_FILE_SIZES: Record<FileFormatCategory, number> = {\n  data: 50 * 1024 * 1024, // 50MB.\n  code: 50 * 1024 * 1024, // 50MB.\n  delimited: 50 * 1024 * 1024, // 50MB.\n  image: 5 * 1024 * 1024, // 5 MB\n};\n\nexport function maxFileSizeToHumanReadable(size: number, decimals = 0) {\n  if (size < 1024) {\n    return `${size.toFixed(decimals)} B`;\n  }\n\n  if (size < 1024 * 1024) {\n    return `${(size / 1024).toFixed(decimals)} KB`;\n  }\n\n  if (size < 1024 * 1024 * 1024) {\n    return `${(size / (1024 * 1024)).toFixed(decimals)} MB`;\n  }\n\n  return `${(size / (1024 * 1024 * 1024)).toFixed(decimals)} GB`;\n}\n\nconst BIG_FILE_SIZE = 5_000_000;\n\nexport function isBigFileSize(size: number) {\n  return size > BIG_FILE_SIZE;\n}\n\n// Function to ensure file size is within max limit for given content type.\nexport function ensureFileSize(\n  contentType: SupportedFileContentType,\n  fileSize: number\n): boolean {\n  const format = getFileFormat(contentType);\n\n  if (format) {\n    return fileSize <= MAX_FILE_SIZES[format.cat];\n  }\n\n  return false;\n}\n\ntype FileFormat = {\n  cat: FileFormatCategory;\n  exts: string[];\n};\n\n// NOTE: if we add more content types, we need to update the public api package. (but the typechecker should catch it)\nconst FILE_FORMATS = {\n  // Images\n  \"image/jpeg\": { cat: \"image\", exts: [\".jpg\", \".jpeg\"] },\n  \"image/png\": { cat: \"image\", exts: [\".png\"] },\n  \"image/gif\": { cat: \"image\", exts: [\".gif\"] },\n  \"image/webp\": { cat: \"image\", exts: [\".webp\"] },\n\n  // Structured\n  \"text/csv\": { cat: \"delimited\", exts: [\".csv\"] },\n  \"text/comma-separated-values\": { cat: \"delimited\", exts: [\".csv\"] },\n  \"text/tsv\": { cat: \"delimited\", exts: [\".tsv\"] },\n  \"text/tab-separated-values\": { cat: \"delimited\", exts: [\".tsv\"] },\n  \"application/vnd.ms-excel\": { cat: \"delimited\", exts: [\".xls\"] },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\": {\n    cat: \"delimited\",\n    exts: [\".xlsx\"],\n  },\n\n  // Custom for section json files generated from tables query results.\n  \"application/vnd.dust.section.json\": {\n    cat: \"data\",\n    exts: [\".json\"],\n  },\n\n  // Data\n  \"text/plain\": { cat: \"data\", exts: [\".txt\", \".log\", \".cfg\", \".conf\"] },\n  \"text/markdown\": { cat: \"data\", exts: [\".md\", \".markdown\"] },\n  \"text/vnd.dust.attachment.slack.thread\": { cat: \"data\", exts: [\".txt\"] },\n  \"text/calendar\": { cat: \"data\", exts: [\".ics\"] },\n  \"application/json\": { cat: \"data\", exts: [\".json\"] },\n  \"application/msword\": { cat: \"data\", exts: [\".doc\", \".docx\"] },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\": {\n    cat: \"data\",\n    exts: [\".doc\", \".docx\"],\n  },\n  \"application/vnd.ms-powerpoint\": { cat: \"data\", exts: [\".ppt\", \".pptx\"] },\n  \"application/vnd.openxmlformats-officedocument.presentationml.presentation\": {\n    cat: \"data\",\n    exts: [\".ppt\", \".pptx\"],\n  },\n  \"application/pdf\": { cat: \"data\", exts: [\".pdf\"] },\n\n  // Code\n  \"text/xml\": { cat: \"data\", exts: [\".xml\"] },\n  \"application/xml\": { cat: \"data\", exts: [\".xml\"] },\n  \"text/html\": { cat: \"data\", exts: [\".html\", \".htm\", \".xhtml\", \".xhtml+xml\"] },\n  \"text/css\": { cat: \"code\", exts: [\".css\"] },\n  \"text/javascript\": { cat: \"code\", exts: [\".js\", \".mjs\", \"*.jsx\"] },\n  \"text/typescript\": { cat: \"code\", exts: [\".ts\", \".tsx\"] },\n  \"application/x-sh\": { cat: \"code\", exts: [\".sh\"] },\n  \"text/x-sh\": { cat: \"code\", exts: [\".sh\"] },\n  \"text/x-python\": { cat: \"code\", exts: [\".py\"] },\n  \"text/x-python-script\": { cat: \"code\", exts: [\".py\"] },\n  \"application/x-yaml\": { cat: \"code\", exts: [\".yaml\", \".yml\"] },\n  \"text/yaml\": { cat: \"code\", exts: [\".yaml\", \".yml\"] },\n  \"text/vnd.yaml\": { cat: \"code\", exts: [\".yaml\", \".yml\"] },\n  \"text/x-c\": {\n    cat: \"code\",\n    exts: [\".c\", \".cc\", \".cpp\", \".cxx\", \".dic\", \".h\", \".hh\"],\n  },\n  \"text/x-csharp\": { cat: \"code\", exts: [\".cs\"] },\n  \"text/x-java-source\": { cat: \"code\", exts: [\".java\"] },\n  \"text/x-php\": { cat: \"code\", exts: [\".php\"] },\n  \"text/x-ruby\": { cat: \"code\", exts: [\".rb\"] },\n  \"text/x-sql\": { cat: \"code\", exts: [\".sql\"] },\n  \"text/x-swift\": { cat: \"code\", exts: [\".swift\"] },\n  \"text/x-rust\": { cat: \"code\", exts: [\".rs\"] },\n  \"text/x-go\": { cat: \"code\", exts: [\".go\"] },\n  \"text/x-kotlin\": { cat: \"code\", exts: [\".kt\", \".kts\"] },\n  \"text/x-scala\": { cat: \"code\", exts: [\".scala\"] },\n  \"text/x-groovy\": { cat: \"code\", exts: [\".groovy\"] },\n  \"text/x-perl\": { cat: \"code\", exts: [\".pl\", \".pm\"] },\n  \"text/x-perl-script\": { cat: \"code\", exts: [\".pl\", \".pm\"] },\n  // declare type here using satisfies to allow flexible typing for keys, FileFormat type for values and yet infer the keys of FILE_FORMATS correctly below\n} as const satisfies Record<string, FileFormat>;\n\n// Define a type that is the list of all keys from FILE_FORMATS.\nexport type SupportedFileContentType = keyof typeof FILE_FORMATS;\n\nexport type SupportedImageContentType = {\n  [K in keyof typeof FILE_FORMATS]: (typeof FILE_FORMATS)[K] extends {\n    cat: \"image\";\n  }\n    ? K\n    : never;\n}[keyof typeof FILE_FORMATS];\n\nexport type SupportedDelimitedTextContentType = {\n  [K in keyof typeof FILE_FORMATS]: (typeof FILE_FORMATS)[K] extends {\n    cat: \"delimited\";\n  }\n    ? K\n    : never;\n}[keyof typeof FILE_FORMATS];\n\nexport type SupportedNonImageContentType = {\n  [K in keyof typeof FILE_FORMATS]: (typeof FILE_FORMATS)[K] extends {\n    cat: \"image\";\n  }\n    ? never\n    : K;\n}[keyof typeof FILE_FORMATS];\n\n// All the ones listed above\nexport const supportedUploadableContentType = Object.keys(FILE_FORMATS);\n\nexport function isSupportedFileContentType(\n  contentType: string\n): contentType is SupportedFileContentType {\n  return !!FILE_FORMATS[contentType as SupportedFileContentType];\n}\n\n// UseCases supported on the public API\nexport function isPublicySupportedUseCase(\n  useCase: string\n): useCase is FileUseCase {\n  return [\"conversation\"].includes(useCase);\n}\n\nexport function isSupportedImageContentType(\n  contentType: string\n): contentType is SupportedImageContentType {\n  const format = getFileFormat(contentType);\n\n  if (format) {\n    return format.cat === \"image\";\n  }\n\n  return false;\n}\n\nexport function isSupportedDelimitedTextContentType(\n  contentType: string\n): contentType is SupportedDelimitedTextContentType {\n  const format = getFileFormat(contentType);\n\n  if (format) {\n    return format.cat === \"delimited\";\n  }\n\n  return false;\n}\n\nexport function getFileFormatCategory(\n  contentType: string\n): FileFormatCategory | null {\n  const format = getFileFormat(contentType);\n\n  if (format) {\n    return format.cat;\n  }\n\n  return null;\n}\n\nfunction getFileFormat(contentType: string): FileFormat | null {\n  if (isSupportedFileContentType(contentType)) {\n    const format = FILE_FORMATS[contentType];\n\n    if (format) {\n      return format;\n    }\n  }\n\n  return null;\n}\n\nexport function extensionsForContentType(\n  contentType: SupportedFileContentType\n): string[] {\n  const format = getFileFormat(contentType);\n\n  if (format) {\n    return format.exts;\n  }\n\n  return [];\n}\n\nexport function contentTypeForExtension(\n  extension: string\n): SupportedFileContentType | null {\n  // Type assertion to handle the entries\n  const entries = Object.entries(FILE_FORMATS) as [\n    SupportedFileContentType,\n    FileFormat\n  ][];\n\n  return (\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    entries.find(([_, value]) => value.exts.includes(extension))?.[0] || null\n  );\n}\n\nexport function getSupportedFileExtensions(\n  cat: FileFormatCategory | undefined = undefined\n) {\n  return uniq(\n    removeNulls(\n      Object.values(FILE_FORMATS).flatMap((format) =>\n        !cat || format.cat === cat ? format.exts : []\n      )\n    )\n  );\n}\n\nexport function getSupportedNonImageFileExtensions() {\n  return uniq(\n    removeNulls(\n      Object.values(FILE_FORMATS).flatMap((format) =>\n        format.cat !== \"image\" ? format.exts : []\n      )\n    )\n  );\n}\n\nexport function getSupportedNonImageMimeTypes() {\n  return uniq(\n    removeNulls(\n      Object.entries(FILE_FORMATS).map(([key, value]) =>\n        value.cat !== \"image\" ? (key as SupportedNonImageContentType) : null\n      )\n    )\n  );\n}\n","import * as t from \"io-ts\";\n\nimport { getSupportedNonImageMimeTypes } from \"../../files\";\n\nexport const InternalPostMessagesRequestBodySchema = t.type({\n  content: t.string,\n  mentions: t.array(t.type({ configurationId: t.string })),\n  context: t.type({\n    timezone: t.string,\n    profilePictureUrl: t.union([t.string, t.null]),\n  }),\n});\n\nconst ContentFragmentBaseSchema = t.intersection([\n  t.type({\n    title: t.string,\n  }),\n  t.partial({\n    url: t.union([t.string, t.null]),\n    supersededContentFragmentId: t.union([t.string, t.null]),\n  }),\n]);\n\nexport const getSupportedInlinedContentType = () => {\n  const [first, second, ...rest] = getSupportedNonImageMimeTypes();\n  return t.union([\n    t.literal(first),\n    t.literal(second),\n    ...rest.map((value) => t.literal(value)),\n  ]);\n};\n\nconst ContentFragmentInputWithContentSchema = t.intersection([\n  ContentFragmentBaseSchema,\n  t.type({\n    content: t.string,\n    contentType: getSupportedInlinedContentType(),\n  }),\n]);\n\nexport type ContentFragmentInputWithContentType = t.TypeOf<\n  typeof ContentFragmentInputWithContentSchema\n>;\n\nconst ContentFragmentInputWithFileIdSchema = t.intersection([\n  ContentFragmentBaseSchema,\n  t.type({\n    fileId: t.string,\n  }),\n]);\n\nexport type ContentFragmentInputWithFileIdType = t.TypeOf<\n  typeof ContentFragmentInputWithFileIdSchema\n>;\n\ntype ContentFragmentInputType =\n  | ContentFragmentInputWithContentType\n  | ContentFragmentInputWithFileIdType;\n\nexport function isContentFragmentInputWithContentType(\n  fragment: ContentFragmentInputType\n): fragment is ContentFragmentInputWithContentType {\n  return \"contentType\" in fragment;\n}\n\nexport const InternalPostContentFragmentRequestBodySchema = t.intersection([\n  t.type({\n    context: t.type({\n      profilePictureUrl: t.union([t.string, t.null]),\n    }),\n  }),\n  ContentFragmentInputWithFileIdSchema,\n]);\n\nexport const InternalPostConversationsRequestBodySchema = t.type({\n  title: t.union([t.string, t.null]),\n  visibility: t.union([\n    t.literal(\"unlisted\"),\n    t.literal(\"workspace\"),\n    t.literal(\"deleted\"),\n    t.literal(\"test\"),\n  ]),\n  message: t.union([InternalPostMessagesRequestBodySchema, t.null]),\n  contentFragments: t.array(InternalPostContentFragmentRequestBodySchema),\n});\n\nexport const InternalPostBuilderSuggestionsRequestBodySchema = t.union([\n  t.type({\n    type: t.literal(\"name\"),\n    inputs: t.type({ instructions: t.string, description: t.string }),\n  }),\n  t.type({\n    type: t.literal(\"emoji\"),\n    inputs: t.type({ instructions: t.string }),\n  }),\n  t.type({\n    type: t.literal(\"instructions\"),\n    inputs: t.type({\n      current_instructions: t.string,\n      former_suggestions: t.array(t.string),\n    }),\n  }),\n  t.type({\n    type: t.literal(\"description\"),\n    inputs: t.type({ instructions: t.string, name: t.string }),\n  }),\n]);\n\nexport type BuilderSuggestionsRequestType = t.TypeOf<\n  typeof InternalPostBuilderSuggestionsRequestBodySchema\n>;\n\nexport const BuilderSuggestionsResponseBodySchema = t.union([\n  t.type({\n    status: t.literal(\"ok\"),\n    suggestions: t.union([t.array(t.string), t.null, t.undefined]),\n  }),\n  t.type({\n    status: t.literal(\"unavailable\"),\n    reason: t.union([\n      t.literal(\"user_not_finished\"), // The user has not finished inputing data for suggestions to make sense\n      t.literal(\"irrelevant\"),\n    ]),\n  }),\n]);\n\nexport type BuilderSuggestionsType = t.TypeOf<\n  typeof BuilderSuggestionsResponseBodySchema\n>;\n\nexport const BuilderEmojiSuggestionsResponseBodySchema = t.type({\n  suggestions: t.array(t.type({ emoji: t.string, backgroundColor: t.string })),\n});\nexport type BuilderEmojiSuggestionsType = t.TypeOf<\n  typeof BuilderEmojiSuggestionsResponseBodySchema\n>;\n\nexport const InternalPostBuilderProcessActionGenerateSchemaRequestBodySchema =\n  t.type({\n    instructions: t.string,\n  });\n","import * as t from \"io-ts\";\nconst PostRestrictedSpace = t.type({\n  memberIds: t.array(t.string),\n  isRestricted: t.literal(true),\n});\n\nconst PostUnrestrictedSpace = t.type({\n  memberIds: t.null,\n  isRestricted: t.literal(false),\n});\n\nexport const PostSpaceRequestBodySchema = t.intersection([\n  t.type({\n    name: t.string,\n  }),\n  t.union([PostRestrictedSpace, PostUnrestrictedSpace]),\n]);\n\nexport const PatchSpaceMembersRequestBodySchema = t.union([\n  PostRestrictedSpace,\n  PostUnrestrictedSpace,\n]);\n\nexport const ContentSchema = t.type({\n  dataSourceId: t.string,\n  parentsIn: t.array(t.string),\n});\n\nexport const PatchSpaceRequestBodySchema = t.type({\n  name: t.union([t.string, t.undefined]),\n  content: t.union([t.array(ContentSchema), t.undefined]),\n});\n\nexport const PostDataSourceViewSchema = ContentSchema;\n\nexport const PostNotionSyncPayloadSchema = t.type({\n  urls: t.array(t.string),\n  method: t.union([t.literal(\"sync\"), t.literal(\"delete\")]),\n});\n\nexport const GetPostNotionSyncResponseBodySchema = t.type({\n  syncResults: t.array(\n    t.intersection([\n      t.type({\n        url: t.string,\n        method: t.union([t.literal(\"sync\"), t.literal(\"delete\")]),\n        timestamp: t.number,\n        success: t.boolean,\n      }),\n      t.partial({\n        error_message: t.string,\n      }),\n    ])\n  ),\n});\n\nexport type GetPostNotionSyncResponseBody = t.TypeOf<\n  typeof GetPostNotionSyncResponseBodySchema\n>;\n","import * as t from \"io-ts\";\n\nimport { CoreAPIDataSourceDocumentSection } from \"../../../core/data_source\";\n\nexport const UpsertContextSchema = t.type({\n  sync_type: t.union([\n    t.literal(\"batch\"),\n    t.literal(\"incremental\"),\n    t.undefined,\n  ]),\n});\n\nexport type UpsertContext = t.TypeOf<typeof UpsertContextSchema>;\n\nexport const FrontDataSourceDocumentSection: t.RecursiveType<\n  t.Type<CoreAPIDataSourceDocumentSection>,\n  CoreAPIDataSourceDocumentSection\n> = t.recursion(\"Section\", () =>\n  t.type({\n    prefix: t.union([t.string, t.null]),\n    content: t.union([t.string, t.null]),\n    sections: t.array(FrontDataSourceDocumentSection),\n  })\n);\n\nexport type FrontDataSourceDocumentSectionType = t.TypeOf<\n  typeof FrontDataSourceDocumentSection\n>;\n\nexport const PostDataSourceDocumentRequestBodySchema = t.type({\n  timestamp: t.union([t.Int, t.undefined, t.null]),\n  tags: t.union([t.array(t.string), t.undefined, t.null]),\n  parent_id: t.union([t.string, t.undefined, t.null]),\n  parents: t.union([t.array(t.string), t.undefined, t.null]),\n  source_url: t.union([t.string, t.undefined, t.null]),\n  upsert_context: t.union([UpsertContextSchema, t.undefined, t.null]),\n  text: t.union([t.string, t.undefined, t.null]),\n  section: t.union([FrontDataSourceDocumentSection, t.undefined, t.null]),\n  light_document_output: t.union([t.boolean, t.undefined]),\n  async: t.union([t.boolean, t.undefined, t.null]),\n  title: t.string,\n  mime_type: t.string,\n});\n\nexport type PostDataSourceDocumentRequestBody = t.TypeOf<\n  typeof PostDataSourceDocumentRequestBodySchema\n>;\n\nexport const PostDataSourceWithNameDocumentRequestBodySchema = t.intersection([\n  t.type({\n    name: t.string,\n  }),\n  PostDataSourceDocumentRequestBodySchema,\n]);\n\nexport type PostDataSourceWithNameDocumentRequestBody = t.TypeOf<\n  typeof PostDataSourceWithNameDocumentRequestBodySchema\n>;\n\n// Post and Patch require the same request body\nexport type PatchDataSourceWithNameDocumentRequestBody = t.TypeOf<\n  typeof PostDataSourceWithNameDocumentRequestBodySchema\n>;\n\nexport const PatchDataSourceTableRequestBodySchema = t.type({\n  name: t.string,\n  description: t.string,\n  timestamp: t.union([t.number, t.undefined, t.null]),\n  tags: t.union([t.array(t.string), t.undefined, t.null]),\n  parentId: t.union([t.string, t.undefined, t.null]),\n  parents: t.union([t.array(t.string), t.undefined, t.null]),\n  truncate: t.boolean,\n  async: t.union([t.boolean, t.undefined]),\n  fileId: t.union([t.string, t.undefined]),\n  title: t.string,\n  mimeType: t.string,\n  sourceUrl: t.union([t.string, t.undefined, t.null]),\n});\n\nexport type PatchDataSourceTableRequestBody = t.TypeOf<\n  typeof PatchDataSourceTableRequestBodySchema\n>;\n","import * as t from \"io-ts\";\n\nimport { ContentNodeType } from \"../../..\";\n\nconst ParentsToAddRemoveSchema = t.type({\n  parentsToAdd: t.union([t.array(t.string), t.undefined]),\n  parentsToRemove: t.union([t.array(t.string), t.undefined]),\n});\n\nconst ParentsInSchema = t.type({\n  parentsIn: t.array(t.string),\n});\n\nexport const PatchDataSourceViewSchema = t.union([\n  ParentsToAddRemoveSchema,\n  ParentsInSchema,\n]);\n\nexport type PatchDataSourceViewType = t.TypeOf<\n  typeof PatchDataSourceViewSchema\n>;\n\nexport type LightContentNode = {\n  expandable: boolean;\n  internalId: string;\n  lastUpdatedAt: number | null;\n  parentInternalId: string | null;\n  preventSelection?: boolean;\n  sourceUrl: string | null;\n  title: string;\n  type: ContentNodeType;\n};\n\nexport const DATA_SOURCE_VIEW_CATEGORIES = [\n  \"managed\",\n  \"folder\",\n  \"website\",\n  \"apps\",\n] as const;\n\nexport type DataSourceViewCategory =\n  (typeof DATA_SOURCE_VIEW_CATEGORIES)[number];\n\nexport function isValidDataSourceViewCategory(\n  category: unknown\n): category is DataSourceViewCategory {\n  return DATA_SOURCE_VIEW_CATEGORIES.includes(\n    category as DataSourceViewCategory\n  );\n}\n\nexport type DataSourceViewCategoryWithoutApps = Exclude<\n  DataSourceViewCategory,\n  \"apps\"\n>;\n\nexport function isDataSourceViewCategoryWithoutApps(\n  category: unknown\n): category is DataSourceViewCategoryWithoutApps {\n  return isValidDataSourceViewCategory(category) && category !== \"apps\";\n}\n\nexport function isWebsiteOrFolderCategory(\n  category: unknown\n): category is Extract<DataSourceViewCategory, \"website\" | \"folder\"> {\n  return category === \"website\" || category === \"folder\";\n}\n","import { BlockType } from \"../front/run\";\nimport { ModelId } from \"../shared/model_id\";\nimport { SpaceType } from \"./space\";\n\nexport type AppVisibility = \"private\" | \"deleted\";\n\nexport const APP_NAME_REGEXP = /^[a-zA-Z0-9_-]{1,64}$/;\n\nexport type BlockRunConfig = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n};\n\nexport type AppType = {\n  id: ModelId;\n  sId: string;\n  name: string;\n  description: string | null;\n  savedSpecification: string | null;\n  savedConfig: string | null;\n  savedRun: string | null;\n  dustAPIProjectId: string;\n  space: SpaceType;\n};\n\nexport type SpecificationBlockType = {\n  type: BlockType;\n  name: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  spec: any;\n  config: BlockRunConfig;\n  indent: number | null;\n};\n\nexport type SpecificationType = Array<SpecificationBlockType>;\n","import * as t from \"io-ts\";\n\nimport { BaseAction } from \"../../../front/assistant/actions\";\nimport { ModelId } from \"../../../shared/model_id\";\n\nexport type BrowseConfigurationType = {\n  id: ModelId;\n  sId: string;\n\n  type: \"browse_configuration\";\n\n  name: string;\n  description: string | null;\n};\n\nexport const BrowseResultSchema = t.type({\n  requestedUrl: t.string,\n  browsedUrl: t.string,\n  content: t.string,\n  responseCode: t.string,\n  errorMessage: t.string,\n});\n\nexport const BrowseActionOutputSchema = t.type({\n  results: t.array(BrowseResultSchema),\n});\n\nexport type BrowseActionOutputType = t.TypeOf<typeof BrowseActionOutputSchema>;\n\nexport type BrowseResultType = t.TypeOf<typeof BrowseResultSchema>;\n\nexport interface BrowseActionType extends BaseAction {\n  agentMessageId: ModelId;\n  urls: string[];\n  output: BrowseActionOutputType | null;\n  functionCallId: string | null;\n  functionCallName: string | null;\n  step: number;\n  type: \"browse_action\";\n}\n\n/**\n * Browse Action Events\n */\n\n// Event sent before the execution with the finalized params to be used.\nexport type BrowseParamsEvent = {\n  type: \"browse_params\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  action: BrowseActionType;\n};\n\nexport type BrowseErrorEvent = {\n  type: \"browse_error\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  error: {\n    code: string;\n    message: string;\n  };\n};\n\nexport type BrowseSuccessEvent = {\n  type: \"browse_success\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  action: BrowseActionType;\n};\n","import { BaseAction } from \"../../../front/assistant/actions/index\";\nimport { ModelId } from \"../../../shared/model_id\";\nimport { SupportedFileContentType } from \"../../files\";\n\nexport type DustAppRunConfigurationType = {\n  id: ModelId;\n  sId: string;\n\n  type: \"dust_app_run_configuration\";\n\n  appWorkspaceId: string;\n  appId: string;\n\n  name: string;\n  description: string | null;\n};\n\nexport type DustAppParameters = {\n  [key: string]: string | number | boolean;\n};\n\nexport interface DustAppRunActionType extends BaseAction {\n  agentMessageId: ModelId;\n  appWorkspaceId: string;\n  appId: string;\n  appName: string;\n  params: DustAppParameters;\n  runningBlock: {\n    type: string;\n    name: string;\n    status: \"running\" | \"succeeded\" | \"errored\";\n  } | null;\n  output: unknown | null;\n  functionCallId: string | null;\n  functionCallName: string | null;\n  step: number;\n  resultsFileId: string | null;\n  resultsFileSnippet: string | null;\n  resultsFileContentType: SupportedFileContentType | null;\n  type: \"dust_app_run_action\";\n}\n\n/**\n * DustAppRun Action Events\n */\n\n// Event sent before the execution of a dust app run with the finalized params to be used.\nexport type DustAppRunParamsEvent = {\n  type: \"dust_app_run_params\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  action: DustAppRunActionType;\n};\n\nexport type DustAppRunErrorEvent = {\n  type: \"dust_app_run_error\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  error: {\n    code: string;\n    message: string;\n  };\n};\n\nexport type DustAppRunBlockEvent = {\n  type: \"dust_app_run_block\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  action: DustAppRunActionType;\n};\n\nexport type DustAppRunSuccessEvent = {\n  type: \"dust_app_run_success\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  action: DustAppRunActionType;\n};\n\nexport function getDustAppRunResultsFileTitle({\n  appName,\n  resultsFileContentType,\n}: {\n  appName: string;\n  resultsFileContentType: SupportedFileContentType;\n}): string {\n  const extension = resultsFileContentType.split(\"/\").pop();\n  let title = `${appName}_output`;\n  if (extension) {\n    title += `.${extension}`;\n  }\n  return title;\n}\n","import {\n  FunctionCallType,\n  FunctionMessageTypeModel,\n} from \"../../../front/assistant/generation\";\nimport { ModelConfigurationType } from \"../../../front/lib/assistant\";\nimport { ModelId } from \"../../../shared/model_id\";\nimport { SupportedFileContentType } from \"../../files\";\nimport { ConversationType } from \"../conversation\";\n\nexport type ActionGeneratedFileType = {\n  fileId: string;\n  title: string;\n  contentType: SupportedFileContentType;\n  snippet: string | null;\n};\n\nexport type ConversationBaseActionType =\n  | \"conversation_list_files_action\"\n  | \"conversation_include_file_action\";\n\nexport type BaseActionType =\n  | \"browse_action\"\n  | \"dust_app_run_action\"\n  | \"process_action\"\n  | \"reasoning_action\"\n  | \"retrieval_action\"\n  | \"search_labels_action\"\n  | \"tables_query_action\"\n  | \"visualization_action\"\n  | \"websearch_action\"\n  | ConversationBaseActionType;\n\nexport abstract class BaseAction {\n  readonly id: ModelId;\n  readonly type: BaseActionType;\n  readonly generatedFiles: ActionGeneratedFileType[];\n\n  constructor(\n    id: ModelId,\n    type: BaseActionType,\n    generatedFiles: ActionGeneratedFileType[] = []\n  ) {\n    this.id = id;\n    this.type = type;\n    this.generatedFiles = generatedFiles;\n  }\n\n  getGeneratedFiles(): ActionGeneratedFileType[] {\n    return this.generatedFiles;\n  }\n\n  abstract renderForFunctionCall(): FunctionCallType;\n  abstract renderForMultiActionsModel({\n    conversation,\n    model,\n  }: {\n    conversation: ConversationType;\n    model: ModelConfigurationType;\n  }): Promise<FunctionMessageTypeModel>;\n}\n","import {\n  BrowseActionType,\n  BrowseConfigurationType,\n} from \"../../../front/assistant/actions/browse\";\nimport {\n  ConversationIncludeFileActionType,\n  ConversationIncludeFileConfigurationType,\n} from \"../../../front/assistant/actions/conversation/include_file\";\nimport {\n  DustAppRunActionType,\n  DustAppRunConfigurationType,\n} from \"../../../front/assistant/actions/dust_app_run\";\nimport { BaseAction } from \"../../../front/assistant/actions/index\";\nimport {\n  ProcessActionType,\n  ProcessConfigurationType,\n} from \"../../../front/assistant/actions/process\";\nimport { ReasoningConfigurationType } from \"../../../front/assistant/actions/reasoning\";\nimport {\n  RetrievalActionType,\n  RetrievalConfigurationType,\n} from \"../../../front/assistant/actions/retrieval\";\nimport {\n  TablesQueryActionType,\n  TablesQueryConfigurationType,\n} from \"../../../front/assistant/actions/tables_query\";\nimport {\n  WebsearchActionType,\n  WebsearchConfigurationType,\n} from \"../../../front/assistant/actions/websearch\";\nimport {\n  AgentConfigurationType,\n  TemplateAgentConfigurationType,\n} from \"../../../front/assistant/agent\";\nimport { AgentActionType } from \"../../../front/assistant/conversation\";\nimport { SearchLabelsConfigurationType } from \"./search_labels\";\n\nexport function isTablesQueryConfiguration(\n  arg: unknown\n): arg is TablesQueryConfigurationType {\n  return (\n    !!arg &&\n    typeof arg === \"object\" &&\n    \"type\" in arg &&\n    arg.type === \"tables_query_configuration\"\n  );\n}\n\nexport function isTablesQueryActionType(\n  arg: AgentActionType\n): arg is TablesQueryActionType {\n  return arg.type === \"tables_query_action\";\n}\n\nexport function isDustAppRunConfiguration(\n  arg: unknown\n): arg is DustAppRunConfigurationType {\n  return (\n    !!arg &&\n    typeof arg === \"object\" &&\n    \"type\" in arg &&\n    arg.type === \"dust_app_run_configuration\"\n  );\n}\n\n// TODO(2024-05-14 flav) Refactor for better separation of concerns in the front-end.\nexport function isDustAppRunActionType(\n  arg: AgentActionType\n): arg is DustAppRunActionType {\n  return arg.type === \"dust_app_run_action\";\n}\n\n// This is temporary until we refactor all action to this class structure.\nexport function isBaseActionClass(action: unknown): action is BaseAction {\n  return action instanceof BaseAction;\n}\n\nexport function isRetrievalConfiguration(\n  arg: unknown\n): arg is RetrievalConfigurationType {\n  return (\n    !!arg &&\n    typeof arg === \"object\" &&\n    \"type\" in arg &&\n    arg.type === \"retrieval_configuration\"\n  );\n}\n\nexport function isRetrievalActionType(\n  arg: AgentActionType\n): arg is RetrievalActionType {\n  return arg.type === \"retrieval_action\";\n}\n\nexport function isProcessConfiguration(\n  arg: unknown\n): arg is ProcessConfigurationType {\n  return (\n    !!arg &&\n    typeof arg === \"object\" &&\n    \"type\" in arg &&\n    arg.type === \"process_configuration\"\n  );\n}\n\nexport function isProcessActionType(\n  arg: AgentActionType\n): arg is ProcessActionType {\n  return arg.type === \"process_action\";\n}\n\nexport function isWebsearchConfiguration(\n  arg: unknown\n): arg is WebsearchConfigurationType {\n  return (\n    !!arg &&\n    typeof arg === \"object\" &&\n    \"type\" in arg &&\n    arg.type === \"websearch_configuration\"\n  );\n}\n\nexport function isSearchLabelsConfiguration(\n  arg: unknown\n): arg is SearchLabelsConfigurationType {\n  return (\n    !!arg &&\n    typeof arg === \"object\" &&\n    \"type\" in arg &&\n    arg.type === \"search_labels_configuration\"\n  );\n}\n\nexport function isReasoningConfiguration(\n  arg: unknown\n): arg is ReasoningConfigurationType {\n  return (\n    !!arg &&\n    typeof arg === \"object\" &&\n    \"type\" in arg &&\n    arg.type === \"reasoning_configuration\"\n  );\n}\n\nexport function isWebsearchActionType(\n  arg: AgentActionType\n): arg is WebsearchActionType {\n  return arg.type === \"websearch_action\";\n}\n\nexport function isBrowseConfiguration(\n  arg: unknown\n): arg is BrowseConfigurationType {\n  return (\n    !!arg &&\n    typeof arg === \"object\" &&\n    \"type\" in arg &&\n    arg.type === \"browse_configuration\"\n  );\n}\n\nexport function isBrowseActionType(\n  arg: AgentActionType\n): arg is BrowseActionType {\n  return arg.type === \"browse_action\";\n}\n\nexport function isConversationIncludeFileConfiguration(\n  arg: unknown\n): arg is ConversationIncludeFileConfigurationType {\n  return (\n    !!arg &&\n    typeof arg === \"object\" &&\n    \"type\" in arg &&\n    arg.type === \"conversation_include_file_configuration\"\n  );\n}\n\nexport function isConversationIncludeFileConfigurationActionType(\n  arg: AgentActionType\n): arg is ConversationIncludeFileActionType {\n  return arg.type === \"conversation_include_file_action\";\n}\n\nexport function throwIfInvalidAgentConfiguration(\n  configation: AgentConfigurationType | TemplateAgentConfigurationType\n) {\n  configation.actions.forEach((action) => {\n    if (isProcessConfiguration(action)) {\n      if (\n        action.relativeTimeFrame === \"auto\" ||\n        action.relativeTimeFrame === \"none\"\n      ) {\n        /** Should never happen as not permitted for now. */\n        throw new Error(\n          \"Invalid configuration: process must have a definite time frame\"\n        );\n      }\n    }\n  });\n\n  const templateConfiguration = configation as TemplateAgentConfigurationType; // Creation\n  const agentConfiguration = configation as AgentConfigurationType; // Edition\n\n  if (templateConfiguration) {\n    if (templateConfiguration.scope === \"global\") {\n      throw new Error(\"Cannot create global agent\");\n    }\n  }\n\n  if (agentConfiguration) {\n    if (agentConfiguration.scope === \"global\") {\n      throw new Error(\"Cannot edit global agent\");\n    }\n\n    if (agentConfiguration.status === \"archived\") {\n      throw new Error(\"Cannot edit archived agent\");\n    }\n  }\n}\n","import { BaseAction } from \"../../../front/assistant/actions/index\";\nimport {\n  DataSourceConfiguration,\n  RetrievalTimeframe,\n  TimeFrame,\n} from \"../../../front/assistant/actions/retrieval\";\nimport { ModelId } from \"../../../shared/model_id\";\n\nexport const PROCESS_SCHEMA_ALLOWED_TYPES = [\n  \"string\",\n  \"number\",\n  \"boolean\",\n] as const;\n\n// Properties in the process configuration table are stored as an array of objects.\nexport type ProcessSchemaPropertyType = {\n  name: string;\n  type: (typeof PROCESS_SCHEMA_ALLOWED_TYPES)[number];\n  description: string;\n};\n\nexport function renderSchemaPropertiesAsJSONSchema(\n  schema: ProcessSchemaPropertyType[]\n): { [name: string]: { type: string; description: string } } {\n  let jsonSchema: { [name: string]: { type: string; description: string } } =\n    {};\n\n  if (schema.length > 0) {\n    schema.forEach((f) => {\n      jsonSchema[f.name] = {\n        type: f.type,\n        description: f.description,\n      };\n    });\n  } else {\n    // Default schema for extraction.\n    jsonSchema = {\n      required_data: {\n        type: \"string\",\n        description:\n          \"Minimal (short and concise) piece of information extracted to follow instructions\",\n      },\n    };\n  }\n\n  return jsonSchema;\n}\n\nexport type ProcessTagsFilter = {\n  in: string[];\n};\n\nexport type ProcessConfigurationType = {\n  id: ModelId;\n  sId: string;\n\n  type: \"process_configuration\";\n\n  dataSources: DataSourceConfiguration[];\n  relativeTimeFrame: RetrievalTimeframe;\n  schema: ProcessSchemaPropertyType[];\n\n  name: string;\n  description: string | null;\n};\n\nexport type ProcessActionOutputsType = {\n  data: unknown[];\n  min_timestamp: number;\n  total_documents: number;\n  total_chunks: number;\n  total_tokens: number;\n};\n\n// Use top_k of 768 as 512 worked really smoothly during initial tests. Might update to 1024 in the\n// future based on user feedback.\nexport const PROCESS_ACTION_TOP_K = 768;\n\nexport interface ProcessActionType extends BaseAction {\n  id: ModelId; // AgentProcessAction\n  agentMessageId: ModelId; // AgentMessage\n\n  params: {\n    relativeTimeFrame: TimeFrame | null;\n    tagsIn: string[] | null;\n    tagsNot: string[] | null;\n  };\n  schema: ProcessSchemaPropertyType[];\n  outputs: ProcessActionOutputsType | null;\n  functionCallId: string | null;\n  functionCallName: string | null;\n  step: number;\n  type: \"process_action\";\n}\n\n/**\n * Process Action Events\n */\n\n// Event sent before the execution with the finalized params to be used.\nexport type ProcessParamsEvent = {\n  type: \"process_params\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  dataSources: DataSourceConfiguration[];\n  action: ProcessActionType;\n};\n\nexport type ProcessErrorEvent = {\n  type: \"process_error\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  error: {\n    code: string;\n    message: string;\n  };\n};\n\nexport type ProcessSuccessEvent = {\n  type: \"process_success\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  action: ProcessActionType;\n};\n","import { DustAppParameters } from \"../../../front/assistant/actions/dust_app_run\";\nimport { BaseAction } from \"../../../front/assistant/actions/index\";\nimport { ModelId } from \"../../../shared/model_id\";\n\nexport type TablesQueryConfigurationType = {\n  description: string | null;\n  id: ModelId;\n  name: string;\n  sId: string;\n  tables: TableDataSourceConfiguration[];\n  type: \"tables_query_configuration\";\n};\n\nexport type TableDataSourceConfiguration = {\n  workspaceId: string;\n  dataSourceViewId: string;\n  tableId: string;\n};\n\nexport interface TablesQueryActionType extends BaseAction {\n  id: ModelId;\n  params: DustAppParameters;\n  output: Record<string, string | number | boolean> | null;\n  resultsFileId: string | null;\n  resultsFileSnippet: string | null;\n  sectionFileId: string | null;\n  functionCallId: string | null;\n  functionCallName: string | null;\n  agentMessageId: ModelId;\n  step: number;\n  type: \"tables_query_action\";\n}\n\nexport function getTablesQueryResultsFileTitle({\n  output,\n}: {\n  output: Record<string, unknown> | null;\n}): string {\n  return typeof output?.query_title === \"string\"\n    ? output.query_title\n    : \"query_results\";\n}\n\nexport function getTablesQueryResultsFileAttachments({\n  resultsFileId,\n  resultsFileSnippet,\n  sectionFileId,\n  output,\n}: {\n  resultsFileId: string | null;\n  resultsFileSnippet: string | null;\n  sectionFileId: string | null;\n  output: Record<string, unknown> | null;\n}): string | null {\n  if (!resultsFileId || !resultsFileSnippet) {\n    return null;\n  }\n\n  const fileTitle = getTablesQueryResultsFileTitle({ output });\n\n  const resultsFileAttachment =\n    `<file ` +\n    `id=\"${resultsFileId}\" type=\"text/csv\" title=\"${fileTitle}\">\\n${resultsFileSnippet}\\n</file>`;\n\n  let sectionFileAttachment = \"\";\n  if (sectionFileId) {\n    sectionFileAttachment =\n      `\\n<file ` +\n      `id=\"${sectionFileId}\" type=\"application/vnd.dust.section.json\" title=\"${fileTitle} (Results optimized for search)\" />`;\n  }\n\n  return `${resultsFileAttachment}${sectionFileAttachment}`;\n}\n\n/**\n * TablesQuey Events\n */\n\nexport type TablesQueryErrorEvent = {\n  type: \"tables_query_error\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  error: {\n    code: \"tables_query_error\" | \"too_many_result_rows\";\n    message: string;\n  };\n};\n\nexport type TablesQueryStartedEvent = {\n  type: \"tables_query_started\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  action: TablesQueryActionType;\n};\n\nexport type TablesQueryModelOutputEvent = {\n  type: \"tables_query_model_output\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  action: TablesQueryActionType;\n};\n\nexport type TablesQueryOutputEvent = {\n  type: \"tables_query_output\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  action: TablesQueryActionType;\n};\n","import * as t from \"io-ts\";\n\nimport { BaseAction } from \"../../../front/assistant/actions\";\nimport { ModelId } from \"../../../shared/model_id\";\n\nexport type WebsearchConfigurationType = {\n  id: ModelId;\n  sId: string;\n\n  type: \"websearch_configuration\";\n\n  name: string;\n  description: string | null;\n};\n\n// Type fresh out from the Dust app\nconst WebsearchAppResultSchema = t.type({\n  title: t.string,\n  snippet: t.string,\n  link: t.string,\n});\nexport const WebsearchAppActionOutputSchema = t.union([\n  t.type({\n    results: t.array(WebsearchAppResultSchema),\n  }),\n  t.type({\n    error: t.string,\n    results: t.array(WebsearchAppResultSchema),\n  }),\n]);\n// Type after processing in the run loop (to add references)\nconst WebsearchResultSchema = t.type({\n  title: t.string,\n  snippet: t.string,\n  link: t.string,\n  reference: t.string,\n});\nexport const WebsearchActionOutputSchema = t.union([\n  t.type({\n    results: t.array(WebsearchResultSchema),\n  }),\n  t.type({\n    results: t.array(WebsearchResultSchema),\n    error: t.string,\n  }),\n]);\n\nexport type WebsearchActionOutputType = t.TypeOf<\n  typeof WebsearchActionOutputSchema\n>;\n\nexport type WebsearchResultType = t.TypeOf<typeof WebsearchResultSchema>;\n\nexport interface WebsearchActionType extends BaseAction {\n  agentMessageId: ModelId;\n  query: string;\n  output: WebsearchActionOutputType | null;\n  functionCallId: string | null;\n  functionCallName: string | null;\n  step: number;\n  type: \"websearch_action\";\n}\n\n/**\n * WebSearch Action Events\n */\n\n// Event sent before the execution with the finalized params to be used.\nexport type WebsearchParamsEvent = {\n  type: \"websearch_params\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  action: WebsearchActionType;\n};\n\nexport type WebsearchErrorEvent = {\n  type: \"websearch_error\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  error: {\n    code: string;\n    message: string;\n  };\n};\n\nexport type WebsearchSuccessEvent = {\n  type: \"websearch_success\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  action: WebsearchActionType;\n};\n","import {\n  BrowseConfigurationType,\n  BrowseParamsEvent,\n} from \"../../front/assistant/actions/browse\";\nimport {\n  ConversationIncludeFileConfigurationType,\n  ConversationIncludeFileParamsEvent,\n} from \"../../front/assistant/actions/conversation/include_file\";\nimport {\n  DustAppRunBlockEvent,\n  DustAppRunConfigurationType,\n  DustAppRunParamsEvent,\n} from \"../../front/assistant/actions/dust_app_run\";\nimport {\n  ProcessConfigurationType,\n  ProcessParamsEvent,\n} from \"../../front/assistant/actions/process\";\nimport {\n  RetrievalConfigurationType,\n  RetrievalParamsEvent,\n} from \"../../front/assistant/actions/retrieval\";\nimport {\n  TablesQueryConfigurationType,\n  TablesQueryModelOutputEvent,\n  TablesQueryOutputEvent,\n  TablesQueryStartedEvent,\n} from \"../../front/assistant/actions/tables_query\";\nimport {\n  WebsearchConfigurationType,\n  WebsearchParamsEvent,\n} from \"../../front/assistant/actions/websearch\";\nimport {\n  AgentActionType,\n  AgentMessageType,\n} from \"../../front/assistant/conversation\";\nimport { ModelIdType, ModelProviderIdType } from \"../../front/lib/assistant\";\nimport { ModelId } from \"../../shared/model_id\";\nimport {\n  ReasoningConfigurationType,\n  ReasoningStartedEvent,\n  ReasoningThinkingEvent,\n  ReasoningTokensEvent,\n} from \"./actions/reasoning\";\nimport {\n  SearchLabelsConfigurationType,\n  SearchLabelsParamsEvent,\n} from \"./actions/search_labels\";\n\n/**\n * Agent Action configuration\n */\n\nexport type AgentActionConfigurationType =\n  | BrowseConfigurationType\n  | DustAppRunConfigurationType\n  | ProcessConfigurationType\n  | ReasoningConfigurationType\n  | RetrievalConfigurationType\n  | TablesQueryConfigurationType\n  | WebsearchConfigurationType;\n\ntype ConversationAgentActionConfigurationType =\n  ConversationIncludeFileConfigurationType;\n\ntype SearchLabelsAgentActionConfigurationType = SearchLabelsConfigurationType;\n\nexport type ActionConfigurationType =\n  | AgentActionConfigurationType\n  | ConversationAgentActionConfigurationType\n  | SearchLabelsAgentActionConfigurationType;\n\ntype UnsavedConfiguration<T> = Omit<T, \"id\" | \"sId\">;\n\n// We need to apply Omit to each member of the union separately rather than the whole union\n// because Omit<A | B, \"k\"> is different from Omit<A, \"k\"> | Omit<B, \"k\">.\n// The first form loses the discriminated union properties needed for type narrowing.\nexport type UnsavedAgentActionConfigurationType =\n  | UnsavedConfiguration<TablesQueryConfigurationType>\n  | UnsavedConfiguration<RetrievalConfigurationType>\n  | UnsavedConfiguration<DustAppRunConfigurationType>\n  | UnsavedConfiguration<ProcessConfigurationType>\n  | UnsavedConfiguration<WebsearchConfigurationType>\n  | UnsavedConfiguration<BrowseConfigurationType>\n  | UnsavedConfiguration<ReasoningConfigurationType>;\n\nexport type AgentAction =\n  | AgentActionConfigurationType[\"type\"]\n  | ConversationAgentActionConfigurationType[\"type\"];\n\n// Each AgentActionConfigurationType is capable of generating this type at runtime to specify which\n// inputs should be generated by the model. As an example, to run the retrieval action for which the\n// `relativeTimeFrame` has been specified in the configuration but for which the `query` is \"auto\",\n// it would generate:\n//\n// ```\n// { inputs: [{ name: \"query\", description: \"...\", type: \"string\" }]\n// ```\n//\n// The params generator model for this action would be tasked to generate that query. If the\n// retrieval configuration sets `relativeTimeFrame` to \"auto\" as well we would get:\n//\n// ```\n// {\n//   inputs: [\n//     { name: \"query\", description: \"...\", type: \"string\" },\n//     { name: \"relativeTimeFrame\", description: \"...\", type: \"string\" },\n//   ]\n// }\n// ```\nexport type AgentActionSpecification = {\n  name: string;\n  description: string;\n  inputs: {\n    name: string;\n    description: string;\n    type: \"string\" | \"number\" | \"boolean\" | \"array\";\n    items?: {\n      type: \"string\" | \"number\" | \"boolean\";\n    };\n  }[];\n};\n\n/**\n * Agent configuration\n */\n\nexport type GlobalAgentStatus =\n  | \"active\"\n  | \"disabled_by_admin\"\n  | \"disabled_missing_datasource\"\n  | \"disabled_free_workspace\";\n\n/**\n * Agent statuses:\n * - \"active\" means the agent can be used directly\n * - \"archived\" means the agent was either deleted, or that there is a newer\n *   version\n * - \"draft\" is used for the \"try\" button in builder, when the agent is not yet\n *   fully created / updated\n */\nexport type AgentStatus = \"active\" | \"archived\" | \"draft\";\nexport type AgentConfigurationStatus = AgentStatus | GlobalAgentStatus;\n\n/**\n * Agent configuration scope\n * - 'global' scope are Dust agents, not editable, inside-list for all, cannot be overriden\n * - 'workspace' scope are editable by builders only,  inside-list by default but user can change it\n * - 'published' scope are editable by everybody, outside-list by default\n * - 'private' scope are editable by author only, inside-list for author, cannot be overriden (so no\n *   entry in the table\n */\nexport const AGENT_CONFIGURATION_SCOPES = [\n  \"global\",\n  \"workspace\",\n  \"published\",\n  \"private\",\n] as const;\nexport type AgentConfigurationScope =\n  (typeof AGENT_CONFIGURATION_SCOPES)[number];\n\n/**\n * Defines strategies for fetching agent configurations based on various\n * 'views':\n * - 'current_user': Retrieves agents created or edited by the current user.\n * - 'list': Retrieves all active agents accessible to the user\n * - {agentIds: string}: Retrieves specific agents by their sIds.\n * - 'all': All non-private agents (so combines workspace, published and global\n *   agents); used e.g. for non-user calls such as API\n * - 'workspace': Retrieves all agents exclusively with a 'workspace' scope.\n * - 'published': Retrieves all agents exclusively with a 'published' scope.\n * - 'global': Retrieves all agents exclusively with a 'global' scope.\n * - 'admin_internal': Grants access to all agents, including private ones.\n * - 'archived': Retrieves all agents that are archived. Only available to super\n *   users. Intended strictly for internal use with necessary superuser or admin\n *   authorization.\n */\nexport type AgentsGetViewType =\n  | { agentIds: string[]; allVersions?: boolean }\n  | \"current_user\"\n  | \"list\"\n  | \"all\"\n  | \"workspace\"\n  | \"published\"\n  | \"global\"\n  | \"admin_internal\"\n  | \"archived\"\n  | \"favorites\";\n\nexport type AgentUsageType = {\n  messageCount: number;\n  conversationCount: number;\n  userCount: number;\n  timePeriodSec: number;\n};\n\nexport type AgentRecentAuthors = readonly string[];\n\nexport type AgentReasoningEffort = \"low\" | \"medium\" | \"high\";\n\nexport type AgentModelConfigurationType = {\n  providerId: ModelProviderIdType;\n  modelId: ModelIdType;\n  temperature: number;\n  reasoningEffort?: AgentReasoningEffort;\n};\n\nexport type LightAgentConfigurationType = {\n  id: ModelId;\n\n  versionCreatedAt: string | null;\n\n  sId: string;\n  version: number;\n  // Global agents have a null authorId, others have a non-null authorId\n  versionAuthorId: ModelId | null;\n\n  instructions: string | null;\n\n  model: AgentModelConfigurationType;\n\n  status: AgentConfigurationStatus;\n  scope: AgentConfigurationScope;\n\n  // always false if not in the context of a user (API query)\n  userFavorite: boolean;\n\n  name: string;\n  description: string;\n  pictureUrl: string;\n\n  // `lastAuthors` is expensive to compute, so we only compute it when needed.\n  lastAuthors?: AgentRecentAuthors;\n  usage?: AgentUsageType;\n  feedbacks?: { up: number; down: number };\n\n  maxStepsPerRun: number;\n  visualizationEnabled: boolean;\n\n  templateId: string | null;\n\n  // Group restrictions for accessing the agent/conversation.\n  // The array of arrays represents permission requirements:\n  // - If empty, no restrictions apply\n  // - Each sub-array represents an OR condition (user must belong to AT LEAST ONE group)\n  // - Sub-arrays are combined with AND logic (user must satisfy ALL sub-arrays)\n  //\n  // Example: [[1,2], [3,4]] means (1 OR 2) AND (3 OR 4)\n  requestedGroupIds: string[][];\n\n  // TODO(2025-01-15) `groupId` clean-up. Remove once Chrome extension uses optional.\n  groupIds?: string[];\n\n  reasoningEffort?: AgentReasoningEffort;\n};\n\nexport type AgentConfigurationType = LightAgentConfigurationType & {\n  // If empty, no actions are performed, otherwise the actions are performed.\n  actions: AgentActionConfigurationType[];\n};\n\nexport interface TemplateAgentConfigurationType {\n  name: string;\n  pictureUrl: string;\n\n  scope: AgentConfigurationScope;\n  description: string;\n  model: AgentModelConfigurationType;\n  actions: AgentActionConfigurationType[];\n  instructions: string | null;\n  isTemplate: true;\n  maxStepsPerRun?: number;\n  visualizationEnabled: boolean;\n}\n\nexport const DEFAULT_MAX_STEPS_USE_PER_RUN = 8;\nexport const MAX_STEPS_USE_PER_RUN_LIMIT = 12;\n\n/**\n * Agent events\n */\n\n// Event sent when an agent error occured before we have a agent message in the database.\nexport type AgentMessageErrorEvent = {\n  type: \"agent_message_error\";\n  created: number;\n  configurationId: string;\n  error: {\n    code: string;\n    message: string;\n  };\n};\n\n// Generic event sent when an error occured (whether it's during the action or the message generation).\nexport type AgentErrorEvent = {\n  type: \"agent_error\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  error: {\n    code: string;\n    message: string;\n  };\n};\n\nexport type AgentDisabledErrorEvent = {\n  type: \"agent_disabled_error\";\n  created: number;\n  configurationId: string;\n  error: {\n    code: string;\n    message: string;\n  };\n};\n\n// Event sent during the execution of an action. These are action specific.\nexport type AgentActionSpecificEvent =\n  | BrowseParamsEvent\n  | ConversationIncludeFileParamsEvent\n  | DustAppRunBlockEvent\n  | DustAppRunParamsEvent\n  | ProcessParamsEvent\n  | ReasoningStartedEvent\n  | ReasoningThinkingEvent\n  | ReasoningTokensEvent\n  | RetrievalParamsEvent\n  | SearchLabelsParamsEvent\n  | TablesQueryModelOutputEvent\n  | TablesQueryOutputEvent\n  | TablesQueryStartedEvent\n  | WebsearchParamsEvent;\n\n// Event sent once the action is completed, we're moving to generating a message if applicable.\nexport type AgentActionSuccessEvent = {\n  type: \"agent_action_success\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  action: AgentActionType;\n};\n\n// Event sent to stop the generation.\nexport type AgentGenerationCancelledEvent = {\n  type: \"agent_generation_cancelled\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n};\n\n// Event sent once the message is completed and successful.\nexport type AgentMessageSuccessEvent = {\n  type: \"agent_message_success\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  message: AgentMessageType;\n  runIds: string[];\n};\n\nexport type AgentActionsEvent = {\n  type: \"agent_actions\";\n  created: number;\n  runId: string;\n  actions: Array<{\n    action: ActionConfigurationType;\n    inputs: Record<string, string | boolean | number>;\n    specification: AgentActionSpecification | null;\n    functionCallId: string | null;\n  }>;\n};\n\nexport type AgentChainOfThoughtEvent = {\n  type: \"agent_chain_of_thought\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  message: AgentMessageType;\n  chainOfThought: string;\n};\n\nexport type AgentContentEvent = {\n  type: \"agent_message_content\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  content: string;\n  processedContent: string;\n};\n","const TAILWIND_COLOR_NAMES = [\n  \"pink\",\n  \"rose\",\n  \"red\",\n  \"orange\",\n  \"amber\",\n  \"yellow\",\n  \"lime\",\n  \"green\",\n  \"emerald\",\n  \"teal\",\n  \"cyan\",\n  \"sky\",\n  \"blue\",\n  \"indigo\",\n  \"violet\",\n  \"purple\",\n  \"fuchsia\",\n];\nconst TAILWIND_COLOR_SHADES = [\n  \"100\",\n  \"200\",\n  \"300\",\n  \"400\",\n  \"500\",\n  \"600\",\n  \"700\",\n  \"800\",\n];\n\nexport const generateTailwindBackgroundColors = (): string[] => {\n  const tailwindColors: string[] = [];\n  TAILWIND_COLOR_NAMES.forEach((color) => {\n    TAILWIND_COLOR_SHADES.forEach((shade) => {\n      tailwindColors.push(`bg-${color}-${shade}`);\n    });\n  });\n  return tailwindColors;\n};\n","import { ioTsEnum } from \"../../shared/utils/iots_utils\";\n\nexport const ASSISTANT_CREATIVITY_LEVELS = [\n  \"deterministic\",\n  \"factual\",\n  \"balanced\",\n  \"creative\",\n] as const;\nexport type AssistantCreativityLevel =\n  (typeof ASSISTANT_CREATIVITY_LEVELS)[number];\nexport const AssistantCreativityLevelCodec = ioTsEnum<AssistantCreativityLevel>(\n  ASSISTANT_CREATIVITY_LEVELS,\n  \"AssistantCreativityLevel\"\n);\nexport const ASSISTANT_CREATIVITY_LEVEL_DISPLAY_NAMES = {\n  deterministic: \"Deterministic\",\n  factual: \"Factual\",\n  balanced: \"Balanced\",\n  creative: \"Creative\",\n} as const;\nexport const ASSISTANT_CREATIVITY_LEVEL_TEMPERATURES: Record<\n  AssistantCreativityLevel,\n  number\n> = {\n  deterministic: 0.0,\n  factual: 0.2,\n  balanced: 0.7,\n  creative: 1.0,\n};\n\nexport const ASSISTANT_BUILDER_DRAWER_TABS = [\n  \"Template\",\n  \"Preview\",\n  \"Performance\",\n] as const;\n\nexport type AssistantBuilderRightPanelTab =\n  (typeof ASSISTANT_BUILDER_DRAWER_TABS)[number];\n\nexport type AssistantBuilderRightPanelStatus = {\n  openedAt: number | null;\n  tab: AssistantBuilderRightPanelTab | null;\n};\n","import { BrowseActionType } from \"../../front/assistant/actions/browse\";\nimport { ConversationIncludeFileActionType } from \"../../front/assistant/actions/conversation/include_file\";\nimport { ConversationListFilesActionType } from \"../../front/assistant/actions/conversation/list_files\";\nimport { DustAppRunActionType } from \"../../front/assistant/actions/dust_app_run\";\nimport { ProcessActionType } from \"../../front/assistant/actions/process\";\nimport { ReasoningActionType } from \"../../front/assistant/actions/reasoning\";\nimport { RetrievalActionType } from \"../../front/assistant/actions/retrieval\";\nimport { TablesQueryActionType } from \"../../front/assistant/actions/tables_query\";\nimport { WebsearchActionType } from \"../../front/assistant/actions/websearch\";\nimport { LightAgentConfigurationType } from \"../../front/assistant/agent\";\nimport { UserType, WorkspaceType } from \"../../front/user\";\nimport { ModelId } from \"../../shared/model_id\";\nimport { ContentFragmentType } from \"../content_fragment\";\nimport { SearchLabelsActionType } from \"./actions/search_labels\";\n\n/**\n * Mentions\n */\n\nexport type AgentMention = {\n  configurationId: string;\n};\n\nexport type MentionType = AgentMention;\n\nexport type MessageVisibility = \"visible\" | \"deleted\";\n\nexport function isAgentMention(arg: MentionType): arg is AgentMention {\n  return (arg as AgentMention).configurationId !== undefined;\n}\n\nexport type ConversationMessageReactions = {\n  messageId: string;\n  reactions: MessageReactionType[];\n}[];\n\nexport type MessageReactionType = {\n  emoji: string;\n  users: {\n    userId: ModelId | null;\n    username: string;\n    fullName: string | null;\n  }[];\n};\n\nexport type MessageType =\n  | AgentMessageType\n  | UserMessageType\n  | ContentFragmentType;\n\nexport type MessageWithContentFragmentsType =\n  | AgentMessageType\n  | (UserMessageType & {\n      contenFragments?: ContentFragmentType[];\n    });\n\nexport type WithRank<T> = T & {\n  rank: number;\n};\nexport type MessageWithRankType = WithRank<MessageType>;\n\n/**\n * User messages\n */\n\nexport type UserMessageOrigin =\n  | \"slack\"\n  | \"web\"\n  | \"api\"\n  | \"email\"\n  | \"gsheet\"\n  | \"zapier\"\n  | \"n8n\"\n  | \"make\"\n  | \"zendesk\"\n  | \"raycast\"\n  | \"github-copilot-chat\"\n  | \"extension\"\n  | \"email\";\n\nexport type UserMessageContext = {\n  username: string;\n  timezone: string;\n  fullName: string | null;\n  email: string | null;\n  profilePictureUrl: string | null;\n  origin?: UserMessageOrigin | null;\n};\n\nexport type UserMessageType = {\n  id: ModelId;\n  created: number;\n  type: \"user_message\";\n  sId: string;\n  visibility: MessageVisibility;\n  version: number;\n  user: UserType | null;\n  mentions: MentionType[];\n  content: string;\n  context: UserMessageContext;\n};\nexport type UserMessageWithRankType = WithRank<UserMessageType>;\n\nexport function isUserMessageType(arg: MessageType): arg is UserMessageType {\n  return arg.type === \"user_message\";\n}\n\n/**\n * Agent messages\n */\nexport type ConfigurableAgentActionType =\n  | RetrievalActionType\n  | DustAppRunActionType\n  | TablesQueryActionType\n  | ProcessActionType\n  | WebsearchActionType\n  | BrowseActionType\n  | ReasoningActionType;\n\nexport type ConversationAgentActionType =\n  | ConversationListFilesActionType\n  | ConversationIncludeFileActionType;\n\nexport type AgentActionType =\n  | ConfigurableAgentActionType\n  | ConversationAgentActionType\n  | SearchLabelsActionType;\n\nexport type AgentMessageStatus =\n  | \"created\"\n  | \"succeeded\"\n  | \"failed\"\n  | \"cancelled\";\n\nexport const ACTION_RUNNING_LABELS: Record<AgentActionType[\"type\"], string> = {\n  browse_action: \"Browsing page\",\n  conversation_include_file_action: \"Reading file\",\n  conversation_list_files_action: \"Listing files\",\n  dust_app_run_action: \"Running App\",\n  process_action: \"Extracting data\",\n  reasoning_action: \"Reasoning\",\n  retrieval_action: \"Searching data\",\n  search_labels_action: \"Searching labels\",\n  tables_query_action: \"Querying tables\",\n  websearch_action: \"Searching the web\",\n};\n\n/**\n * Both `action` and `message` are optional (we could have a no-op agent basically).\n *\n * Since `action` and `message` are bundled together, it means that we will only be able to retry\n * them together in case of error of either. We store an error only here whether it's an error\n * coming from the action or from the message generation.\n */\nexport type AgentMessageType = {\n  id: ModelId;\n  agentMessageId: ModelId;\n  created: number;\n  type: \"agent_message\";\n  sId: string;\n  visibility: MessageVisibility;\n  version: number;\n  parentMessageId: string | null;\n  configuration: LightAgentConfigurationType;\n  status: AgentMessageStatus;\n  actions: AgentActionType[];\n  content: string | null;\n  chainOfThought: string | null;\n  rawContents: Array<{\n    step: number;\n    content: string;\n  }>;\n  error: {\n    code: string;\n    message: string;\n  } | null;\n};\n\nexport type AgentMessageWithRankType = WithRank<AgentMessageType>;\n\nexport function isAgentMessageType(arg: MessageType): arg is AgentMessageType {\n  return arg.type === \"agent_message\";\n}\n\n/**\n * Conversations\n */\n\n/**\n * Visibility of a conversation. Test visibility is for conversations happening\n * when a user 'tests' an agent not in their list using the \"test\" button:\n * those conversations do not show in users' histories.\n */\nexport type ConversationVisibility =\n  | \"unlisted\"\n  | \"workspace\"\n  | \"deleted\"\n  | \"test\";\n\n/**\n * A lighter version of Conversation without the content (for menu display).\n */\nexport type ConversationWithoutContentType = {\n  id: ModelId;\n  created: number;\n  updated?: number;\n  owner: WorkspaceType;\n  sId: string;\n  title: string | null;\n  visibility: ConversationVisibility;\n  requestedGroupIds: string[][];\n\n  // TODO(2025-01-15) `groupId` clean-up. Remove once Chrome extension uses optional.\n  groupIds?: string[];\n};\n\n/**\n * content [][] structure is intended to allow retries (of agent messages) or edits (of user\n * messages).\n */\nexport type ConversationType = ConversationWithoutContentType & {\n  content: (UserMessageType[] | AgentMessageType[] | ContentFragmentType[])[];\n};\n\nexport type UserParticipant = {\n  username: string;\n  fullName: string | null;\n  pictureUrl: string | null;\n};\nexport type AgentParticipant = {\n  configurationId: string;\n  name: string;\n  pictureUrl: string | null;\n};\n\nexport type ParticipantActionType = \"posted\" | \"reacted\" | \"subscribed\";\n\n/**\n * Conversation participants.\n */\n\nexport interface AgentParticipantType {\n  configurationId: string;\n  name: string;\n  pictureUrl: string;\n}\n\nexport interface UserParticipantType {\n  fullName: string | null;\n  pictureUrl: string | null;\n  username: string;\n}\n\nexport interface ConversationParticipantsType {\n  agents: AgentParticipant[];\n  users: UserParticipant[];\n}\n\nexport const CONVERSATION_ERROR_TYPES = [\n  \"conversation_not_found\",\n  \"conversation_access_restricted\",\n  \"conversation_with_unavailable_agent\",\n] as const;\n\nexport type ConversationErrorType = (typeof CONVERSATION_ERROR_TYPES)[number];\n\nexport class ConversationError extends Error {\n  readonly type: ConversationErrorType;\n\n  constructor(type: ConversationErrorType) {\n    super(`Cannot access conversation: ${type}`);\n    this.type = type;\n  }\n}\n\nexport type SubmitMessageError = {\n  type:\n    | \"user_not_found\"\n    | \"attachment_upload_error\"\n    | \"message_send_error\"\n    | \"plan_limit_reached_error\"\n    | \"content_too_large\";\n  title: string;\n  message: string;\n};\n\nexport interface FetchConversationMessagesResponse {\n  hasMore: boolean;\n  lastValue: number | null;\n  messages: MessageWithRankType[];\n}\n\n/**\n * Conversation events.\n */\n\n// Event sent when the user message is created.\nexport type UserMessageNewEvent = {\n  type: \"user_message_new\";\n  created: number;\n  messageId: string;\n  message: UserMessageWithRankType;\n};\n\n// Event sent when the user message is created.\nexport type UserMessageErrorEvent = {\n  type: \"user_message_error\";\n  created: number;\n  error: {\n    code: string;\n    message: string;\n  };\n};\n\n// Event sent when a new message is created (empty) and the agent is about to be executed.\nexport type AgentMessageNewEvent = {\n  type: \"agent_message_new\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  message: AgentMessageWithRankType;\n};\n\n// Event sent when the conversation title is updated.\nexport type ConversationTitleEvent = {\n  type: \"conversation_title\";\n  created: number;\n  title: string;\n};\n","/**\n * Model rendering of conversations.\n */\n\nexport interface ModelMessageType {\n  role: \"action\" | \"agent\" | \"user\" | \"content_fragment\";\n  name: string;\n  content: string;\n}\n\nexport interface ModelConversationType {\n  messages: ModelMessageType[];\n}\n\nexport interface ImageContent {\n  type: \"image_url\";\n  image_url: {\n    url: string;\n  };\n}\n\ninterface TextContent {\n  type: \"text\";\n  text: string;\n}\n\ntype Content = TextContent | ImageContent;\n\nexport function isTextContent(content: Content): content is TextContent {\n  return content.type === \"text\";\n}\n\nexport interface ContentFragmentMessageTypeModel {\n  role: \"content_fragment\";\n  name: string;\n  content: Content[];\n}\n\nexport interface UserMessageTypeModel {\n  role: \"user\";\n  name: string;\n  content: Content[];\n}\nexport interface FunctionCallType {\n  id: string;\n  name: string;\n  arguments: string; // Empty is not valid, should be at least \"{}\"\n}\n\n// Assistant requiring usage of function(s) call(s)\nexport interface AssistantFunctionCallMessageTypeModel {\n  role: \"assistant\";\n  content?: string;\n  function_calls: FunctionCallType[];\n}\n\nexport interface AssistantContentMessageTypeModel {\n  role: \"assistant\";\n  name: string;\n  content: string;\n}\n\n// This is the output of one function call\nexport interface FunctionMessageTypeModel {\n  role: \"function\";\n  name: string;\n  function_call_id: string;\n  content: string;\n}\n\nexport type ModelMessageTypeMultiActions =\n  | ContentFragmentMessageTypeModel\n  | UserMessageTypeModel\n  | AssistantFunctionCallMessageTypeModel\n  | AssistantContentMessageTypeModel\n  | FunctionMessageTypeModel;\n\nexport function isContentFragmentMessageTypeModel(\n  contentFragment: ModelMessageTypeMultiActions\n): contentFragment is ContentFragmentMessageTypeModel {\n  return contentFragment.role === \"content_fragment\";\n}\n\nexport function isUserMessageTypeModel(\n  userMessage: ModelMessageTypeMultiActions\n): userMessage is UserMessageTypeModel {\n  return userMessage.role === \"user\";\n}\n\nexport type ModelConversationTypeMultiActions = {\n  messages: ModelMessageTypeMultiActions[];\n};\n\n/**\n * Generation execution.\n */\n\n// Event sent when tokens are streamed as the the agent is generating a message.\nexport type TokensClassification = \"tokens\" | \"chain_of_thought\";\nexport type GenerationTokensEvent = {\n  type: \"generation_tokens\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  text: string;\n} & (\n  | {\n      classification: TokensClassification;\n    }\n  | {\n      classification: \"opening_delimiter\" | \"closing_delimiter\";\n      delimiterClassification: TokensClassification;\n    }\n);\n\nexport type GenerationErrorEvent = {\n  type: \"generation_error\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  error: {\n    code: string;\n    message: string;\n  };\n};\n\nexport type GenerationSuccessEvent = {\n  type: \"generation_success\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n  text: string;\n  chainOfThought: string;\n  runId: string;\n};\n\nexport type GenerationCancelEvent = {\n  type: \"generation_cancel\";\n  created: number;\n  configurationId: string;\n  messageId: string;\n};\n","import * as t from \"io-ts\";\nimport { nonEmptyArray } from \"io-ts-types/lib/nonEmptyArray\";\nimport { NonEmptyString } from \"io-ts-types/lib/NonEmptyString\";\n\nimport { ioTsEnum } from \"../../shared/utils/iots_utils\";\nimport { TimeframeUnitCodec } from \"./actions/retrieval\";\nimport { AssistantCreativityLevelCodec } from \"./builder\";\n\n// TAGS\n\nexport const TEMPLATES_TAG_CODES = [\n  \"CONTENT\",\n  \"DATA\",\n  \"DESIGN\",\n  \"ENGINEERING\",\n  \"FINANCE\",\n  \"HIRING\",\n  \"KNOWLEDGE\",\n  \"MARKETING\",\n  \"OPERATIONS\",\n  \"PRODUCT\",\n  \"PRODUCT_MANAGEMENT\",\n  \"PRODUCTIVITY\",\n  \"SALES\",\n  \"UX_DESIGN\",\n  \"UX_RESEARCH\",\n  \"WRITING\",\n] as const;\nexport type TemplateTagCodeType = (typeof TEMPLATES_TAG_CODES)[number];\n\nexport type TemplateTagsType = Record<\n  TemplateTagCodeType,\n  {\n    label: string;\n  }\n>;\n\nexport const TEMPLATES_TAGS_CONFIG: TemplateTagsType = {\n  CONTENT: {\n    label: \"Content\",\n  },\n  DATA: {\n    label: \"Data\",\n  },\n  DESIGN: {\n    label: \"Design\",\n  },\n  ENGINEERING: {\n    label: \"Engineering\",\n  },\n  FINANCE: {\n    label: \"Finance\",\n  },\n  HIRING: {\n    label: \"Hiring\",\n  },\n  KNOWLEDGE: {\n    label: \"Knowledge\",\n  },\n  MARKETING: {\n    label: \"Marketing\",\n  },\n  OPERATIONS: {\n    label: \"Operations\",\n  },\n  PRODUCT: {\n    label: \"Product\",\n  },\n  PRODUCT_MANAGEMENT: {\n    label: \"Product Management\",\n  },\n  PRODUCTIVITY: {\n    label: \"Productivity\",\n  },\n  SALES: {\n    label: \"Sales\",\n  },\n  UX_DESIGN: {\n    label: \"UX Design\",\n  },\n  UX_RESEARCH: {\n    label: \"UX Research\",\n  },\n  WRITING: {\n    label: \"Writing\",\n  },\n};\n\nexport function isTemplateTagCodeArray(\n  value: unknown\n): value is TemplateTagCodeType[] {\n  return (\n    Array.isArray(value) && value.every((v) => TEMPLATES_TAG_CODES.includes(v))\n  );\n}\n\nconst TemplateTagCodeTypeCodec = t.keyof({\n  ...TEMPLATES_TAGS_CONFIG,\n});\n\n// MULTI ACTION MODE\n\ntype MultiActionType =\n  | \"RETRIEVAL_SEARCH\"\n  | \"DUST_APP_RUN\"\n  | \"TABLES_QUERY\"\n  | \"PROCESS\"\n  | \"WEB_NAVIGATION\";\nexport const MULTI_ACTION_PRESETS: Record<MultiActionType, string> = {\n  DUST_APP_RUN: \"Run Dust app\",\n  RETRIEVAL_SEARCH: \"Search data sources\",\n  TABLES_QUERY: \"Query tables\",\n  PROCESS: \"Extract data\",\n  WEB_NAVIGATION: \"Web navigation\",\n} as const;\nexport type MultiActionPreset = keyof typeof MULTI_ACTION_PRESETS;\nexport const MultiActionPresetCodec = ioTsEnum<MultiActionPreset>(\n  Object.keys(MULTI_ACTION_PRESETS),\n  \"MultiActionPreset\"\n);\nconst TemplateActionTypePreset = t.type({\n  type: MultiActionPresetCodec,\n  name: NonEmptyString,\n  description: NonEmptyString,\n  help: NonEmptyString,\n});\nconst TemplateActionsPreset = t.array(TemplateActionTypePreset);\n\n// VISIBILITY\n\nexport const TEMPLATE_VISIBILITIES = [\n  \"draft\",\n  \"published\",\n  \"disabled\",\n] as const;\nexport type TemplateVisibility = (typeof TEMPLATE_VISIBILITIES)[number];\nexport const TemplateVisibilityCodec = ioTsEnum<TemplateVisibility>(\n  TEMPLATE_VISIBILITIES,\n  \"TemplateVisibility\"\n);\n\n// FORM SCHEMA\n\nexport const CreateTemplateFormSchema = t.type({\n  backgroundColor: NonEmptyString,\n  description: t.union([t.string, t.undefined]),\n  emoji: NonEmptyString,\n  handle: NonEmptyString,\n  timeFrameDuration: t.union([t.string, t.undefined]),\n  timeFrameUnit: t.union([TimeframeUnitCodec, t.literal(\"\"), t.undefined]),\n  helpActions: t.union([t.string, t.undefined]),\n  helpInstructions: t.union([t.string, t.undefined]),\n  presetActions: TemplateActionsPreset,\n  presetInstructions: t.union([t.string, t.undefined]),\n  presetModelId: t.string,\n  presetTemperature: AssistantCreativityLevelCodec,\n  tags: nonEmptyArray(TemplateTagCodeTypeCodec),\n  visibility: TemplateVisibilityCodec,\n});\n\nexport type CreateTemplateFormType = t.TypeOf<typeof CreateTemplateFormSchema>;\n","// This defines the commands that the iframe can send to the host window.\n\n// Common base interface.\ninterface VisualizationRPCRequestBase {\n  identifier: string;\n  messageUniqueId: string;\n}\n\n// Define parameter types for each command.\n\ninterface GetFileParams {\n  fileId: string;\n}\n\ninterface SetContentHeightParams {\n  height: number;\n}\n\ninterface DownloadFileRequestParams {\n  blob: Blob;\n  filename?: string;\n}\n\ninterface setErrorMessageParams {\n  errorMessage: string;\n}\n\n// Define a mapped type to extend the base with specific parameters.\nexport type VisualizationRPCRequestMap = {\n  getFile: GetFileParams;\n  getCodeToExecute: null;\n  setContentHeight: SetContentHeightParams;\n  setErrorMessage: setErrorMessageParams;\n  downloadFileRequest: DownloadFileRequestParams;\n  displayCode: null;\n};\n\n// Derive the command type from the keys of the request map\nexport type VisualizationRPCCommand = keyof VisualizationRPCRequestMap;\n\n// Create a union type for requests based on the mapped type.\nexport type VisualizationRPCRequest = {\n  [K in VisualizationRPCCommand]: VisualizationRPCRequestBase & {\n    command: K;\n    params: VisualizationRPCRequestMap[K];\n  };\n}[VisualizationRPCCommand];\n\nexport const validCommands: VisualizationRPCCommand[] = [\n  \"getFile\",\n  \"getCodeToExecute\",\n  \"setContentHeight\",\n  \"setErrorMessage\",\n];\n\n// Command results.\n\nexport interface CommandResultMap {\n  getCodeToExecute: { code: string };\n  getFile: { fileBlob: Blob | null };\n  downloadFileRequest: { blob: Blob; filename?: string };\n  setContentHeight: void;\n  setErrorMessage: void;\n  displayCode: void;\n}\n\n// TODO(@fontanierh): refactor all these guards to use io-ts instead of manual checks.\n\n// Type guard for getFile.\nexport function isGetFileRequest(\n  value: unknown\n): value is VisualizationRPCRequest & {\n  command: \"getFile\";\n  params: GetFileParams;\n} {\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n\n  const v = value as Partial<VisualizationRPCRequest>;\n\n  return (\n    v.command === \"getFile\" &&\n    typeof v.identifier === \"string\" &&\n    typeof v.messageUniqueId === \"string\" &&\n    typeof v.params === \"object\" &&\n    v.params !== null &&\n    typeof (v.params as GetFileParams).fileId === \"string\"\n  );\n}\n\n// Type guard for getCodeToExecute.\nexport function isGetCodeToExecuteRequest(\n  value: unknown\n): value is VisualizationRPCRequest & {\n  command: \"getCodeToExecute\";\n  params: null;\n} {\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n\n  const v = value as Partial<VisualizationRPCRequest>;\n\n  return (\n    v.command === \"getCodeToExecute\" &&\n    typeof v.identifier === \"string\" &&\n    typeof v.messageUniqueId === \"string\"\n  );\n}\n\n// Type guard for setContentHeight.\nexport function isSetContentHeightRequest(\n  value: unknown\n): value is VisualizationRPCRequest & {\n  command: \"setContentHeight\";\n  params: SetContentHeightParams;\n} {\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n\n  const v = value as Partial<VisualizationRPCRequest>;\n\n  return (\n    v.command === \"setContentHeight\" &&\n    typeof v.identifier === \"string\" &&\n    typeof v.messageUniqueId === \"string\" &&\n    typeof v.params === \"object\" &&\n    v.params !== null &&\n    typeof (v.params as SetContentHeightParams).height === \"number\"\n  );\n}\n\nexport function isSetErrorMessageRequest(\n  value: unknown\n): value is VisualizationRPCRequest & {\n  command: \"setErrorMessage\";\n} {\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n\n  const v = value as Partial<VisualizationRPCRequest>;\n\n  return (\n    v.command === \"setErrorMessage\" &&\n    typeof v.identifier === \"string\" &&\n    typeof v.messageUniqueId === \"string\"\n  );\n}\n\nexport function isDownloadFileRequest(\n  value: unknown\n): value is VisualizationRPCRequest & {\n  command: \"downloadFileRequest\";\n  params: DownloadFileRequestParams;\n} {\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n\n  const v = value as Partial<VisualizationRPCRequest>;\n\n  return (\n    v.command === \"downloadFileRequest\" &&\n    typeof v.identifier === \"string\" &&\n    typeof v.messageUniqueId === \"string\" &&\n    typeof v.params === \"object\" &&\n    v.params !== null &&\n    (v.params as DownloadFileRequestParams).blob instanceof Blob\n  );\n}\n\n// Type guard for getCodeToExecute.\nexport function isDisplayCodeRequest(\n  value: unknown\n): value is VisualizationRPCRequest & {\n  command: \"displayCode\";\n  params: null;\n} {\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n\n  const v = value as Partial<VisualizationRPCRequest>;\n\n  return (\n    v.command === \"displayCode\" &&\n    typeof v.identifier === \"string\" &&\n    typeof v.messageUniqueId === \"string\"\n  );\n}\n\nexport function isVisualizationRPCRequest(\n  value: unknown\n): value is VisualizationRPCRequest {\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n\n  return (\n    isGetCodeToExecuteRequest(value) ||\n    isGetFileRequest(value) ||\n    isDownloadFileRequest(value) ||\n    isSetContentHeightRequest(value) ||\n    isSetErrorMessageRequest(value) ||\n    isDisplayCodeRequest(value)\n  );\n}\n","import { ModelId } from \"../shared/model_id\";\nimport { MessageType, MessageVisibility } from \"./assistant/conversation\";\nimport { SupportedFileContentType } from \"./files\";\n\nexport type ContentFragmentContextType = {\n  username: string | null;\n  fullName: string | null;\n  email: string | null;\n  profilePictureUrl: string | null;\n};\n\nexport type ContentFragmentVersion = \"superseded\" | \"latest\";\n\nexport type SupportedContentFragmentType =\n  | SupportedFileContentType\n  | \"dust-application/slack\"; // Legacy\n\nexport type ContentFragmentType = {\n  id: ModelId;\n  sId: string;\n  fileId: string | null;\n  snippet: string | null;\n  generatedTables: string[];\n  created: number;\n  type: \"content_fragment\";\n  visibility: MessageVisibility;\n  version: number;\n  sourceUrl: string | null;\n  textUrl: string;\n  textBytes: number | null;\n  title: string;\n  contentType: SupportedContentFragmentType;\n  context: ContentFragmentContextType;\n  contentFragmentId: string;\n  contentFragmentVersion: ContentFragmentVersion;\n};\n\nexport type UploadedContentFragment = {\n  fileId: string;\n  title: string;\n};\n\nexport function isContentFragmentType(\n  arg: MessageType\n): arg is ContentFragmentType {\n  return arg.type === \"content_fragment\";\n}\n","import { ModelId } from \"../shared/model_id\";\nimport { Err, Ok, Result } from \"../shared/result\";\nimport { DataSourceViewType } from \"./data_source_view\";\nimport { ConnectorType } from \"./lib/connectors_api\";\n\nexport const CONNECTOR_PROVIDERS = [\n  \"confluence\",\n  \"github\",\n  \"google_drive\",\n  \"intercom\",\n  \"notion\",\n  \"slack\",\n  \"microsoft\",\n  \"webcrawler\",\n  \"snowflake\",\n  \"zendesk\",\n  \"bigquery\",\n  \"salesforce\",\n  \"gong\",\n] as const;\n\nexport type ConnectorProvider = (typeof CONNECTOR_PROVIDERS)[number];\n\nexport function isConnectorProvider(val: string): val is ConnectorProvider {\n  return (CONNECTOR_PROVIDERS as unknown as string[]).includes(val);\n}\n\nexport type EditedByUser = {\n  editedAt: number | null;\n  fullName: string | null;\n  imageUrl: string | null;\n  email: string | null;\n  userId: string | null;\n};\n\nexport type DataSourceType = {\n  id: ModelId;\n  sId: string;\n  createdAt: number;\n  name: string;\n  description: string | null;\n  assistantDefaultSelected: boolean;\n  dustAPIProjectId: string;\n  dustAPIDataSourceId: string;\n  connectorId: string | null;\n  connectorProvider: ConnectorProvider | null;\n  editedByUser?: EditedByUser | null;\n};\n\nexport type WithConnector = {\n  connectorProvider: ConnectorProvider;\n  connectorId: string;\n};\n\nexport type ConnectorStatusDetails = {\n  connector: ConnectorType | null;\n  fetchConnectorError: boolean;\n  fetchConnectorErrorMessage: string | null;\n};\n\nexport type DataSourceWithConnectorDetailsType = DataSourceType &\n  WithConnector &\n  ConnectorStatusDetails;\n\nexport type DataSourceWithAgentsUsageType = {\n  count: number;\n  agentNames: string[];\n};\n\nexport function isDataSourceNameValid(name: string): Result<void, string> {\n  const trimmed = name.trim();\n  if (trimmed.length === 0) {\n    return new Err(\"DataSource name cannot be empty\");\n  }\n  if (name.startsWith(\"managed-\")) {\n    return new Err(\"DataSource name cannot start with the prefix `managed-`\");\n  }\n\n  return new Ok(undefined);\n}\n\nexport type TagSearchParams = {\n  query: string;\n  queryType: string;\n  dataSourceViews: DataSourceViewType[];\n};\n\nexport type DataSourceTag = {\n  tag: string;\n  dustAPIDataSourceId: string;\n  connectorProvider: ConnectorProvider | null;\n};\n","import { ModelId } from \"../shared/model_id\";\nimport { DataSourceViewCategory } from \"./api_handlers/public/spaces\";\nimport {\n  ConnectorStatusDetails,\n  DataSourceType,\n  DataSourceWithAgentsUsageType,\n  EditedByUser,\n} from \"./data_source\";\nimport { ContentNodeWithParent } from \"./lib/connectors_api\";\n\nexport interface DataSourceViewType {\n  category: DataSourceViewCategory;\n  createdAt: number;\n  dataSource: DataSourceType;\n  editedByUser?: EditedByUser | null;\n  id: ModelId;\n  kind: DataSourceViewKind;\n  parentsIn: string[] | null;\n  sId: string;\n  updatedAt: number;\n  spaceId: string;\n}\n\nexport type DataSourceViewsWithDetails = DataSourceViewType & {\n  dataSource: DataSourceType & ConnectorStatusDetails;\n  usage: DataSourceWithAgentsUsageType;\n};\n\nexport type DataSourceViewContentNode = ContentNodeWithParent & {\n  dataSourceView: DataSourceViewType;\n};\n\nexport type DataSourceViewSelectionConfiguration = {\n  dataSourceView: DataSourceViewType;\n  selectedResources: DataSourceViewContentNode[];\n  isSelectAll: boolean;\n  tagsFilter: TagsFilter;\n};\n\nexport type TagsFilter = {\n  in: string[];\n  not: string[];\n  mode: \"custom\" | \"auto\";\n} | null;\n\nexport function defaultSelectionConfiguration(\n  dataSourceView: DataSourceViewType\n): DataSourceViewSelectionConfiguration {\n  return {\n    dataSourceView,\n    isSelectAll: false,\n    selectedResources: [],\n    tagsFilter: null,\n  };\n}\n\nexport type DataSourceViewSelectionConfigurations = Record<\n  string, // DataSourceView.sId\n  DataSourceViewSelectionConfiguration\n>;\n\nconst DATA_SOURCE_VIEW_KINDS = [\"default\", \"custom\"] as const;\nexport type DataSourceViewKind = (typeof DATA_SOURCE_VIEW_KINDS)[number];\n","import { ModelId } from \"../shared/model_id\";\n\n/**\n * system group:\n * Accessible by no-one other than our system API keys.\n * Has access to the system Space which holds the connected data sources.\n *\n * global group:\n * Contains all users from the workspace.\n * Has access to the global Space which holds all existing datasource created before spaces.\n *\n * regular group:\n * Contains specific users added by workspace admins.\n * Has access to the list of spaces configured by workspace admins.\n */\nexport const GROUP_KINDS = [\"regular\", \"global\", \"system\"] as const;\nexport type GroupKind = (typeof GROUP_KINDS)[number];\n\nexport function isGroupKind(value: unknown): value is GroupKind {\n  return GROUP_KINDS.includes(value as GroupKind);\n}\nexport function isSystemGroupKind(value: GroupKind): boolean {\n  return value === \"system\";\n}\nexport function isGlobalGroupKind(value: GroupKind): boolean {\n  return value === \"global\";\n}\n\nexport function prettifyGroupName(group: GroupType) {\n  if (group.kind === \"global\") {\n    return \"Company Data\";\n  }\n  return group.name.replace(\"Group for Space \", \"\");\n}\n\nexport type GroupType = {\n  id: ModelId;\n  name: string;\n  sId: string;\n  kind: GroupKind;\n  workspaceId: ModelId;\n};\n\nconst DustGroupIdsHeader = \"X-Dust-Group-Ids\";\n\nexport function getGroupIdsFromHeaders(\n  headers: Record<string, string | string[] | undefined>\n): string[] | undefined {\n  const groupIds = headers[DustGroupIdsHeader.toLowerCase()];\n  if (typeof groupIds === \"string\" && groupIds.trim().length > 0) {\n    return groupIds.split(\",\").map((id) => id.trim());\n  } else {\n    return undefined;\n  }\n}\n\nexport function getHeaderFromGroupIds(groupIds: string[] | undefined) {\n  if (!groupIds) {\n    return undefined;\n  }\n\n  return {\n    [DustGroupIdsHeader]: groupIds.join(\",\"),\n  };\n}\n","import { isRight } from \"fp-ts/lib/Either\";\nimport * as t from \"io-ts\";\n\nexport const ActionResponseBaseSchema = t.type({\n  run_id: t.string,\n  created: t.Integer,\n  run_type: t.string,\n  config: t.UnknownRecord,\n  status: t.type({\n    run: t.string,\n    blocks: t.array(\n      t.type({\n        block_type: t.string,\n        name: t.string,\n        status: t.string,\n        success_count: t.Integer,\n        error_count: t.Integer,\n      })\n    ),\n  }),\n  traces: t.UnknownArray,\n  specification_hash: t.string,\n});\nexport type ActionResponseBase = t.TypeOf<typeof ActionResponseBaseSchema>;\nexport function isActionResponseBase(\n  response: unknown\n): response is ActionResponseBase {\n  return isRight(ActionResponseBaseSchema.decode(response));\n}\n","import { CredentialsType, ProviderType } from \"../../../front/provider\";\n\nconst {\n  DUST_MANAGED_ANTHROPIC_API_KEY = \"\",\n  DUST_MANAGED_AZURE_OPENAI_API_KEY = \"\",\n  DUST_MANAGED_AZURE_OPENAI_ENDPOINT = \"\",\n  DUST_MANAGED_OPENAI_API_KEY = \"\",\n  DUST_MANAGED_TEXTSYNTH_API_KEY = \"\",\n  DUST_MANAGED_MISTRAL_API_KEY = \"\",\n  DUST_MANAGED_GOOGLE_AI_STUDIO_API_KEY = \"\",\n  DUST_MANAGED_SERP_API_KEY = \"\",\n  DUST_MANAGED_BROWSERLESS_API_KEY = \"\",\n  DUST_MANAGED_TOGETHERAI_API_KEY = \"\",\n  DUST_MANAGED_DEEPSEEK_API_KEY = \"\",\n  DUST_MANAGED_FIREWORKS_API_KEY = \"\",\n} = process.env;\n\nexport const credentialsFromProviders = (\n  providers: ProviderType[]\n): CredentialsType => {\n  const credentials: CredentialsType = {};\n  providers.forEach((provider) => {\n    const config = JSON.parse(provider.config) as {\n      api_key?: string;\n      endpoint?: string;\n      service_account?: string;\n    };\n\n    switch (provider.providerId) {\n      case \"openai\":\n        credentials[\"OPENAI_API_KEY\"] = config.api_key;\n        break;\n      case \"cohere\":\n        credentials[\"COHERE_API_KEY\"] = config.api_key;\n        break;\n      case \"ai21\":\n        credentials[\"AI21_API_KEY\"] = config.api_key;\n        break;\n      case \"azure_openai\":\n        credentials[\"AZURE_OPENAI_API_KEY\"] = config.api_key;\n        credentials[\"AZURE_OPENAI_ENDPOINT\"] = config.endpoint;\n        break;\n      case \"anthropic\":\n        credentials[\"ANTHROPIC_API_KEY\"] = config.api_key;\n        break;\n      case \"mistral\":\n        credentials[\"MISTRAL_API_KEY\"] = config.api_key;\n        break;\n      case \"textsynth\":\n        credentials[\"TEXTSYNTH_API_KEY\"] = config.api_key;\n        break;\n      case \"serpapi\":\n        credentials[\"SERP_API_KEY\"] = config.api_key;\n        break;\n      case \"serper\":\n        credentials[\"SERPER_API_KEY\"] = config.api_key;\n        break;\n      case \"browserlessapi\":\n        credentials[\"BROWSERLESS_API_KEY\"] = config.api_key;\n        break;\n      case \"google_ai_studio\":\n        credentials[\"GOOGLE_AI_STUDIO_API_KEY\"] = config.api_key;\n        break;\n      case \"togetherai\":\n        credentials[\"TOGETHERAI_API_KEY\"] = config.api_key;\n        break;\n      case \"deepseek\":\n        credentials[\"DEEPSEEK_API_KEY\"] = config.api_key;\n        break;\n      case \"fireworks\":\n        credentials[\"FIREWORKS_API_KEY\"] = config.api_key;\n        break;\n    }\n  });\n  return credentials;\n};\n\nexport const dustManagedCredentials = (): CredentialsType => {\n  return {\n    ANTHROPIC_API_KEY: DUST_MANAGED_ANTHROPIC_API_KEY,\n    AZURE_OPENAI_API_KEY: DUST_MANAGED_AZURE_OPENAI_API_KEY,\n    AZURE_OPENAI_ENDPOINT: DUST_MANAGED_AZURE_OPENAI_ENDPOINT,\n    MISTRAL_API_KEY: DUST_MANAGED_MISTRAL_API_KEY,\n    OPENAI_API_KEY: DUST_MANAGED_OPENAI_API_KEY,\n    TEXTSYNTH_API_KEY: DUST_MANAGED_TEXTSYNTH_API_KEY,\n    GOOGLE_AI_STUDIO_API_KEY: DUST_MANAGED_GOOGLE_AI_STUDIO_API_KEY,\n    SERP_API_KEY: DUST_MANAGED_SERP_API_KEY,\n    BROWSERLESS_API_KEY: DUST_MANAGED_BROWSERLESS_API_KEY,\n    TOGETHERAI_API_KEY: DUST_MANAGED_TOGETHERAI_API_KEY,\n    DEEPSEEK_API_KEY: DUST_MANAGED_DEEPSEEK_API_KEY,\n    FIREWORKS_API_KEY: DUST_MANAGED_FIREWORKS_API_KEY,\n  };\n};\n","import {\n  AdminCommandType,\n  AdminResponseType,\n} from \"../../connectors/admin/cli\";\nimport { ConnectorsAPIError, isConnectorsAPIError } from \"../../connectors/api\";\nimport { UpdateConnectorConfigurationType } from \"../../connectors/api_handlers/connector_configuration\";\nimport { ConnectorCreateRequestBody } from \"../../connectors/api_handlers/create_connector\";\nimport { UpdateConnectorRequestBody } from \"../../connectors/api_handlers/update_connector\";\nimport { ConnectorConfiguration } from \"../../connectors/configuration\";\nimport { ContentNodesViewType } from \"../../connectors/content_nodes\";\nimport { ContentNodeType } from \"../../core/content_node\";\nimport { ConnectorProvider, DataSourceType } from \"../../front/data_source\";\nimport { LoggerInterface } from \"../../shared/logger\";\nimport { Err, Ok, Result } from \"../../shared/result\";\n\nexport type ConnectorsAPIResponse<T> = Result<T, ConnectorsAPIError>;\nexport type ConnectorSyncStatus = \"succeeded\" | \"failed\";\nexport const CONNECTORS_ERROR_TYPES = [\n  \"oauth_token_revoked\",\n  \"third_party_internal_error\",\n  \"webcrawling_error\",\n  \"webcrawling_error_empty_content\",\n  \"webcrawling_error_content_too_large\",\n  \"webcrawling_error_blocked\",\n  \"webcrawling_synchronization_limit_reached\",\n  \"remote_database_connection_not_readonly\",\n  \"remote_database_network_error\",\n] as const;\n\nexport type ConnectorErrorType = (typeof CONNECTORS_ERROR_TYPES)[number];\nexport function isConnectorError(val: string): val is ConnectorErrorType {\n  return (CONNECTORS_ERROR_TYPES as unknown as string[]).includes(val);\n}\n\nexport type ConnectorType = {\n  id: string;\n  type: ConnectorProvider;\n  workspaceId: string;\n  dataSourceId: string;\n  connectionId: string;\n  useProxy: boolean;\n  lastSyncStatus?: ConnectorSyncStatus;\n  lastSyncStartTime?: number;\n  lastSyncFinishTime?: number;\n  lastSyncSuccessfulTime?: number;\n  firstSuccessfulSyncTime?: number;\n  firstSyncProgress?: string;\n  errorType?: ConnectorErrorType;\n  configuration: ConnectorConfiguration;\n  pausedAt?: number;\n  updatedAt: number;\n};\n\n/**\n * This type represents the permission associated with a ContentNode. For now the only\n * permission we handle is read. but we could have more complex permissions in the future.\n */\nexport type ConnectorPermission = \"read\" | \"write\" | \"read_write\" | \"none\";\n// currently used for Slack, for which channels can be public or private\nexport type ProviderVisibility = \"public\" | \"private\";\n\n/**\n * A ContentNode represents a connector related node. As an example:\n * - Notion: Top-level pages (possibly manually added lower level ones)\n * - Github: repositories\n * - Slack: channels\n * - GoogleDrive: shared drive or sub-folders of shared drives.\n *\n * `internalId` and `parentInternalId` are internal opaque identifiers that\n * should enable reconstructing the tree structure of the resources.\n *\n * Those ids must be aligned with those used in the \"parents\" field of data\n * sources documents, to enable search filter on documents based on their\n * parents, see the\n *\n * The convention to use for internal ids are to always use the externally\n * provided id when possible (e.g. Notion page id, Github repository id,\n * etc...). When not possible, such as for Github issues whose id is not\n * workspace-unique, a custom function to create a unique id is created, and\n * used both in the parents field management code and the connectors node code.\n *\n * A specific situation for the Microsoft connector leads us to not use the\n * externally provided id (although it exists and is unique), but to compute our\n * own. This is because the Microsoft API does not allow to query a document or\n * list its children using its id alone. We compute an internal id that contains all\n * information. More details here:\n * https://www.notion.so/dust-tt/Design-Doc-Microsoft-ids-parents-c27726652aae45abafaac587b971a41d?pvs=4\n */\nexport interface ContentNode {\n  expandable: boolean;\n  internalId: string;\n  lastUpdatedAt: number | null;\n  mimeType: string;\n  // The direct parent ID of this content node\n  parentInternalId: string | null;\n  permission: ConnectorPermission;\n  preventSelection?: boolean;\n  providerVisibility?: ProviderVisibility;\n  sourceUrl: string | null;\n  title: string;\n  type: ContentNodeType;\n}\n\nexport interface ContentNodeWithParent extends ContentNode {\n  parentInternalIds: string[] | null;\n  parentTitle?: string;\n}\n\nexport type GoogleDriveFolderType = {\n  id: string;\n  name: string;\n  parent: string | null;\n  children: string[];\n};\n\nexport type GoogleDriveSelectedFolderType = GoogleDriveFolderType & {\n  selected: boolean;\n};\n\nexport class ConnectorsAPI {\n  _url: string;\n  _secret: string;\n  _logger: LoggerInterface;\n\n  constructor(\n    config: { url: string; secret: string },\n    logger: LoggerInterface\n  ) {\n    this._url = config.url;\n    this._secret = config.secret;\n    this._logger = logger;\n  }\n\n  async createConnector({\n    provider,\n    workspaceId,\n    workspaceAPIKey,\n    dataSourceId,\n    connectionId,\n    configuration,\n  }: {\n    provider: ConnectorProvider;\n    workspaceId: string;\n    workspaceAPIKey: string;\n    dataSourceId: string;\n    connectionId: string;\n    configuration: ConnectorConfiguration;\n  }): Promise<ConnectorsAPIResponse<ConnectorType>> {\n    const res = await this._fetchWithError(\n      `${this._url}/connectors/create/${encodeURIComponent(provider)}`,\n      {\n        method: \"POST\",\n        headers: this.getDefaultHeaders(),\n        body: JSON.stringify({\n          workspaceId,\n          workspaceAPIKey,\n          dataSourceId,\n          connectionId,\n          configuration,\n        } satisfies ConnectorCreateRequestBody),\n      }\n    );\n\n    return this._resultFromResponse(res);\n  }\n\n  async updateConfiguration({\n    connectorId,\n    configuration,\n  }: {\n    connectorId: string;\n    configuration: UpdateConnectorConfigurationType;\n  }): Promise<ConnectorsAPIResponse<ConnectorType>> {\n    const res = await this._fetchWithError(\n      `${this._url}/connectors/${encodeURIComponent(\n        connectorId\n      )}/configuration`,\n      {\n        method: \"PATCH\",\n        headers: this.getDefaultHeaders(),\n        body: JSON.stringify(\n          configuration satisfies UpdateConnectorConfigurationType\n        ),\n      }\n    );\n\n    return this._resultFromResponse(res);\n  }\n\n  async updateConnector({\n    connectorId,\n    connectionId,\n  }: {\n    connectorId: string;\n    connectionId: string;\n  }): Promise<ConnectorsAPIResponse<{ connectorId: string }>> {\n    const res = await this._fetchWithError(\n      `${this._url}/connectors/update/${encodeURIComponent(connectorId)}`,\n      {\n        method: \"POST\",\n        headers: this.getDefaultHeaders(),\n        body: JSON.stringify({\n          connectionId,\n        } satisfies UpdateConnectorRequestBody),\n      }\n    );\n\n    return this._resultFromResponse(res);\n  }\n\n  async stopConnector(\n    connectorId: string\n  ): Promise<ConnectorsAPIResponse<undefined>> {\n    const res = await this._fetchWithError(\n      `${this._url}/connectors/stop/${encodeURIComponent(connectorId)}`,\n      {\n        method: \"POST\",\n        headers: this.getDefaultHeaders(),\n      }\n    );\n\n    return this._resultFromResponse(res);\n  }\n\n  async pauseConnector(\n    connectorId: string\n  ): Promise<ConnectorsAPIResponse<undefined>> {\n    const res = await this._fetchWithError(\n      `${this._url}/connectors/pause/${encodeURIComponent(connectorId)}`,\n      {\n        method: \"POST\",\n        headers: this.getDefaultHeaders(),\n      }\n    );\n\n    return this._resultFromResponse(res);\n  }\n\n  async unpauseConnector(\n    connectorId: string\n  ): Promise<ConnectorsAPIResponse<undefined>> {\n    const res = await this._fetchWithError(\n      `${this._url}/connectors/unpause/${encodeURIComponent(connectorId)}`,\n      {\n        method: \"POST\",\n        headers: this.getDefaultHeaders(),\n      }\n    );\n\n    return this._resultFromResponse(res);\n  }\n\n  async resumeConnector(\n    connectorId: string\n  ): Promise<ConnectorsAPIResponse<undefined>> {\n    const res = await this._fetchWithError(\n      `${this._url}/connectors/resume/${encodeURIComponent(connectorId)}`,\n      {\n        method: \"POST\",\n        headers: this.getDefaultHeaders(),\n      }\n    );\n\n    return this._resultFromResponse(res);\n  }\n\n  async syncConnector(\n    connectorId: string\n  ): Promise<ConnectorsAPIResponse<{ workflowId: string }>> {\n    const res = await this._fetchWithError(\n      `${this._url}/connectors/sync/${encodeURIComponent(connectorId)}`,\n      {\n        method: \"POST\",\n        headers: this.getDefaultHeaders(),\n      }\n    );\n\n    return this._resultFromResponse(res);\n  }\n\n  async deleteConnector(\n    connectorId: string,\n    force = false\n  ): Promise<ConnectorsAPIResponse<{ success: true }>> {\n    const res = await this._fetchWithError(\n      `${this._url}/connectors/delete/${encodeURIComponent(\n        connectorId\n      )}?force=${force ? \"true\" : \"false\"}`,\n      {\n        method: \"DELETE\",\n        headers: this.getDefaultHeaders(),\n      }\n    );\n\n    return this._resultFromResponse(res);\n  }\n\n  async getConnectorPermissions<\n    T extends ConnectorPermission = ConnectorPermission\n  >({\n    connectorId,\n    filterPermission,\n    parentId,\n    viewType = \"document\",\n  }: {\n    connectorId: string;\n    filterPermission?: T;\n    parentId?: string;\n    viewType?: ContentNodesViewType;\n  }): Promise<\n    ConnectorsAPIResponse<{\n      resources: (T extends \"read\" ? ContentNodeWithParent : ContentNode)[];\n    }>\n  > {\n    const queryParams = new URLSearchParams();\n\n    if (parentId) {\n      queryParams.append(\"parentId\", parentId);\n    }\n\n    if (filterPermission) {\n      queryParams.append(\"filterPermission\", filterPermission);\n    }\n\n    const qs = queryParams.toString();\n\n    const url = `${this._url}/connectors/${encodeURIComponent(\n      connectorId\n    )}/permissions?viewType=${viewType}&${qs}`;\n\n    const res = await this._fetchWithError(url, {\n      method: \"GET\",\n      headers: this.getDefaultHeaders(),\n    });\n\n    return this._resultFromResponse(res);\n  }\n\n  async setConnectorPermissions({\n    connectorId,\n    resources,\n  }: {\n    connectorId: string;\n    resources: {\n      internalId: string;\n      permission: ConnectorPermission;\n    }[];\n  }): Promise<ConnectorsAPIResponse<void>> {\n    // Connector permission changes are logged so user actions can be traced\n    this._logger.info(\n      {\n        connectorId,\n        resources,\n      },\n      \"Setting connector permissions\"\n    );\n\n    const res = await this._fetchWithError(\n      `${this._url}/connectors/${encodeURIComponent(connectorId)}/permissions`,\n      {\n        method: \"POST\",\n        headers: this.getDefaultHeaders(),\n        body: JSON.stringify({\n          resources: resources.map(({ internalId, permission }) => ({\n            internal_id: internalId,\n            permission,\n          })),\n        }),\n      }\n    );\n\n    return this._resultFromResponse(res);\n  }\n\n  async getConnector(\n    connectorId: string\n  ): Promise<ConnectorsAPIResponse<ConnectorType>> {\n    const parsedId = parseInt(connectorId, 10);\n    if (isNaN(parsedId)) {\n      const err: ConnectorsAPIError = {\n        type: \"invalid_request_error\",\n        message: \"Invalid connector ID\",\n      };\n      return new Err(err);\n    }\n\n    const res = await this._fetchWithError(\n      `${this._url}/connectors/${encodeURIComponent(connectorId)}`,\n      {\n        method: \"GET\",\n        headers: this.getDefaultHeaders(),\n      }\n    );\n\n    return this._resultFromResponse(res);\n  }\n\n  // TODO(jules): remove after debugging\n  async getConnectorFromDataSource(\n    dataSource: DataSourceType\n  ): Promise<ConnectorsAPIResponse<ConnectorType>> {\n    const res = await this._fetchWithError(\n      `${this._url}/connectors/${encodeURIComponent(\n        dataSource.connectorId ?? \"\"\n      )}?origin=${dataSource.id}`,\n      {\n        method: \"GET\",\n        headers: this.getDefaultHeaders(),\n      }\n    );\n\n    return this._resultFromResponse(res);\n  }\n\n  async getConnectors(\n    provider: ConnectorProvider,\n    connectorIds: string[]\n  ): Promise<ConnectorsAPIResponse<ConnectorType[]>> {\n    if (connectorIds.length === 0) {\n      return new Ok([]);\n    }\n    const res = await this._fetchWithError(\n      `${this._url}/connectors?provider=${encodeURIComponent(\n        provider\n      )}&${connectorIds\n        .map((id) => `connector_id=${encodeURIComponent(id)}`)\n        .join(\"&\")}`,\n      {\n        method: \"GET\",\n        headers: this.getDefaultHeaders(),\n      }\n    );\n\n    return this._resultFromResponse(res);\n  }\n\n  async setConnectorConfig(\n    connectorId: string,\n    configKey: string,\n    configValue: string\n  ): Promise<ConnectorsAPIResponse<void>> {\n    const res = await this._fetchWithError(\n      `${this._url}/connectors/${encodeURIComponent(\n        connectorId\n      )}/config/${encodeURIComponent(configKey)}`,\n      {\n        method: \"POST\",\n        headers: this.getDefaultHeaders(),\n        body: JSON.stringify({\n          configValue,\n        }),\n      }\n    );\n\n    return this._resultFromResponse(res);\n  }\n\n  async getConnectorConfig(\n    connectorId: string,\n    configKey: string\n  ): Promise<\n    ConnectorsAPIResponse<{\n      connectorId: number;\n      configKey: string;\n      configValue: string;\n    }>\n  > {\n    const res = await this._fetchWithError(\n      `${this._url}/connectors/${encodeURIComponent(\n        connectorId\n      )}/config/${encodeURIComponent(configKey)}`,\n      {\n        method: \"GET\",\n        headers: this.getDefaultHeaders(),\n      }\n    );\n\n    return this._resultFromResponse(res);\n  }\n\n  async linkSlackChannelsWithAgent({\n    connectorId,\n    slackChannelInternalIds,\n    agentConfigurationId,\n  }: {\n    connectorId: string;\n    slackChannelInternalIds: string[];\n    agentConfigurationId: string;\n  }): Promise<ConnectorsAPIResponse<{ success: true }>> {\n    const res = await this._fetchWithError(\n      `${this._url}/slack/channels/linked_with_agent`,\n      {\n        method: \"PATCH\",\n        headers: this.getDefaultHeaders(),\n        body: JSON.stringify({\n          connector_id: connectorId,\n          agent_configuration_id: agentConfigurationId,\n          slack_channel_internal_ids: slackChannelInternalIds,\n        }),\n      }\n    );\n\n    return this._resultFromResponse(res);\n  }\n\n  async getSlackChannelsLinkedWithAgent({\n    connectorId,\n  }: {\n    connectorId: string;\n  }): Promise<\n    ConnectorsAPIResponse<{\n      slackChannels: {\n        slackChannelId: string;\n        slackChannelName: string;\n        agentConfigurationId: string;\n      }[];\n    }>\n  > {\n    const res = await this._fetchWithError(\n      `${\n        this._url\n      }/slack/channels/linked_with_agent?connector_id=${encodeURIComponent(\n        connectorId\n      )}`,\n      {\n        method: \"GET\",\n        headers: this.getDefaultHeaders(),\n      }\n    );\n\n    return this._resultFromResponse(res);\n  }\n\n  async admin(\n    adminCommand: AdminCommandType\n  ): Promise<ConnectorsAPIResponse<AdminResponseType>> {\n    const res = await this._fetchWithError(`${this._url}/connectors/admin`, {\n      method: \"POST\",\n      headers: this.getDefaultHeaders(),\n      body: JSON.stringify(adminCommand),\n    });\n\n    return this._resultFromResponse(res);\n  }\n\n  getDefaultHeaders() {\n    return {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${this._secret}`,\n    };\n  }\n\n  private async _fetchWithError(\n    url: string,\n    init?: RequestInit\n  ): Promise<\n    Result<{ response: Response; duration: number }, ConnectorsAPIError>\n  > {\n    const now = Date.now();\n    try {\n      const res = await fetch(url, init);\n      return new Ok({ response: res, duration: Date.now() - now });\n    } catch (e) {\n      const duration = Date.now() - now;\n      const err: ConnectorsAPIError = {\n        type: \"unexpected_network_error\",\n        message: `Unexpected network error from ConnectorsAPI: ${e}`,\n      };\n      this._logger.error(\n        {\n          url,\n          duration,\n          connectorsError: err,\n          error: e,\n        },\n        \"ConnectorsAPI error\"\n      );\n      return new Err(err);\n    }\n  }\n\n  private async _resultFromResponse<T>(\n    res: Result<\n      {\n        response: Response;\n        duration: number;\n      },\n      ConnectorsAPIError\n    >\n  ): Promise<ConnectorsAPIResponse<T>> {\n    if (res.isErr()) {\n      return res;\n    }\n\n    // 204 means no content.\n    if (res.value.response.status === 204) {\n      return new Ok(undefined as T);\n    }\n    // We get the text and attempt to parse so that we can log the raw text in case of error (the\n    // body is already consumed by response.json() if used otherwise).\n    const text = await res.value.response.text();\n\n    let json = null;\n    try {\n      json = JSON.parse(text);\n    } catch (e) {\n      const err: ConnectorsAPIError = {\n        type: \"unexpected_response_format\",\n        message: `Unexpected response format from ConnectorsAPI: ${e}`,\n      };\n      this._logger.error(\n        {\n          connectorsError: err,\n          parseError: e,\n          rawText: text,\n          status: res.value.response.status,\n          url: res.value.response.url,\n          duration: res.value.duration,\n        },\n        \"ConnectorsAPI error\"\n      );\n      return new Err(err);\n    }\n\n    if (!res.value.response.ok) {\n      const err = json?.error;\n      if (isConnectorsAPIError(err)) {\n        this._logger.error(\n          {\n            connectorsError: err,\n            status: res.value.response.status,\n            url: res.value.response.url,\n            duration: res.value.duration,\n          },\n          \"ConnectorsAPI error\"\n        );\n        return new Err(err);\n      } else {\n        const err: ConnectorsAPIError = {\n          type: \"unexpected_error_format\",\n          message: \"Unexpected error format from ConnectorAPI\",\n        };\n        this._logger.error(\n          {\n            connectorsError: err,\n            json,\n            status: res.value.response.status,\n            url: res.value.response.url,\n            duration: res.value.duration,\n          },\n          \"ConnectorsAPI error\"\n        );\n        return new Err(err);\n      }\n    } else {\n      return new Ok(json);\n    }\n  }\n}\n","import { createParser } from \"eventsource-parser\";\nimport * as t from \"io-ts\";\n\nimport { CoreAPIContentNode } from \"../../core/content_node\";\nimport {\n  CoreAPIDataSource,\n  CoreAPIDataSourceConfig,\n  CoreAPIDataSourceDocumentSection,\n  CoreAPIDocument,\n  CoreAPIDocumentBlob,\n  CoreAPIDocumentVersion,\n  CoreAPIFolder,\n  CoreAPILightDocument,\n  CoreAPITableBlob,\n  EmbedderType,\n} from \"../../core/data_source\";\nimport { DustAppSecretType } from \"../../front/dust_app_secret\";\nimport { GroupType } from \"../../front/groups\";\nimport { dustManagedCredentials } from \"../../front/lib/api/credentials\";\nimport { EmbeddingProviderIdType } from \"../../front/lib/assistant\";\nimport { Project } from \"../../front/project\";\nimport { CredentialsType } from \"../../front/provider\";\nimport {\n  BlockType,\n  RunConfig,\n  RunRunType,\n  RunStatus,\n  TraceType,\n} from \"../../front/run\";\nimport { LightWorkspaceType } from \"../../front/user\";\nimport { LoggerInterface } from \"../../shared/logger\";\nimport { Err, Ok, Result } from \"../../shared/result\";\nimport { DataSourceViewType } from \"../data_source_view\";\nimport { ProviderVisibility } from \"./connectors_api\";\n\nexport const MAX_CHUNK_SIZE = 512;\n\nexport const EMBEDDING_CONFIGS: Record<EmbeddingProviderIdType, EmbedderType> =\n  {\n    openai: {\n      model_id: \"text-embedding-3-large-1536\",\n      provider_id: \"openai\",\n      splitter_id: \"base_v0\",\n      max_chunk_size: MAX_CHUNK_SIZE,\n    },\n    mistral: {\n      model_id: \"mistral-embed\",\n      provider_id: \"mistral\",\n      splitter_id: \"base_v0\",\n      max_chunk_size: MAX_CHUNK_SIZE,\n    },\n  } as const;\n\nexport type CoreAPIError = {\n  message: string;\n  code: string;\n};\n\nexport function isCoreAPIError(obj: unknown): obj is CoreAPIError {\n  return (\n    typeof obj === \"object\" &&\n    obj !== null &&\n    \"message\" in obj &&\n    typeof obj.message === \"string\" &&\n    \"code\" in obj &&\n    typeof obj.code === \"string\"\n  );\n}\n\nexport type CoreAPIResponse<T> = Result<T, CoreAPIError>;\n\nexport type CoreAPIDatasetVersion = {\n  hash: string;\n  created: number;\n};\n\nexport type CoreAPIDatasetWithoutData = CoreAPIDatasetVersion & {\n  dataset_id: string;\n  keys: string[];\n};\n\nexport type CoreAPIDataset = CoreAPIDatasetWithoutData & {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: { [key: string]: any }[];\n};\n\nexport type CoreAPIRun = {\n  run_id: string;\n  created: number;\n  run_type: RunRunType;\n  app_hash?: string | null;\n  specification_hash?: string | null;\n  config: RunConfig;\n  status: RunStatus;\n  traces: Array<[[BlockType, string], Array<Array<TraceType>>]>;\n};\n\nexport type CoreAPITokenType = [number, string];\n\ntype CoreAPICreateRunParams = {\n  projectId: string;\n  runType: RunRunType;\n  specification?: string | null;\n  specificationHash?: string | null;\n  datasetId?: string | null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  inputs?: any[] | null;\n  config: RunConfig;\n  credentials: CredentialsType;\n  secrets: DustAppSecretType[];\n  isSystemKey?: boolean;\n  storeBlocksResults?: boolean;\n};\n\ntype GetDatasetResponse = {\n  dataset: CoreAPIDataset;\n};\n\ntype GetDatasetsResponse = {\n  datasets: { [key: string]: CoreAPIDatasetVersion[] };\n};\n\nexport type CoreAPITableSchema = {\n  name: string;\n  value_type: \"int\" | \"float\" | \"text\" | \"bool\" | \"datetime\";\n  possible_values: string[] | null;\n}[];\n\nexport type CoreAPITable = {\n  table_id: string;\n  name: string;\n  description: string;\n  schema: CoreAPITableSchema | null;\n  timestamp: number;\n  tags: string[];\n  parent_id: string | null;\n  parents: string[];\n  created: number;\n  data_source_id: string;\n  title: string;\n  mime_type: string;\n  remote_database_table_id: string | null;\n  remote_database_secret_id: string | null;\n};\n\nexport type CoreAPIRowValue =\n  | number\n  | string\n  | boolean\n  | { type: \"datetime\"; epoch: number; string_value?: string }\n  | null;\n\nexport type CoreAPIRow = {\n  row_id: string;\n  value: Record<string, CoreAPIRowValue>;\n};\n\nexport function isRowMatchingSchema(\n  row: CoreAPIRow,\n  schema: CoreAPITableSchema\n) {\n  for (const [k, v] of Object.entries(row.value)) {\n    if (v === null) {\n      continue;\n    }\n    if (typeof v === \"string\" && v.trim().length === 0) {\n      continue;\n    }\n    const schemaEntry = schema.find((s) => s.name === k);\n    if (!schemaEntry) {\n      return false;\n    }\n\n    if (schemaEntry.value_type === \"int\" && typeof v !== \"number\") {\n      return false;\n    } else if (schemaEntry.value_type === \"float\" && typeof v !== \"number\") {\n      return false;\n    } else if (schemaEntry.value_type === \"text\" && typeof v !== \"string\") {\n      return false;\n    } else if (schemaEntry.value_type === \"bool\" && typeof v !== \"boolean\") {\n      return false;\n    } else if (\n      schemaEntry.value_type === \"datetime\" &&\n      (typeof v !== \"object\" ||\n        !v ||\n        typeof v.epoch !== \"number\" ||\n        (v.string_value && typeof v.string_value !== \"string\"))\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport type CoreAPIQueryResult = {\n  value: Record<string, unknown>;\n};\n\nexport type CoreAPISearchFilter = {\n  tags: {\n    in: string[] | null;\n    not: string[] | null;\n  } | null;\n  parents: {\n    in: string[] | null;\n    not: string[] | null;\n  } | null;\n  timestamp: {\n    gt: number | null;\n    lt: number | null;\n  } | null;\n};\n\nexport type CoreAPISortSpec = {\n  field: string;\n  direction: \"asc\" | \"desc\";\n};\n\nexport type CoreAPISearchOptions = {\n  limit?: number;\n  cursor?: string;\n  sort?: CoreAPISortSpec[];\n};\n\nexport interface CoreAPISearchCursorRequest {\n  sort?: CoreAPISortSpec[];\n  limit?: number;\n  cursor?: string;\n}\n\nexport type SearchWarningCode = \"truncated-query-clauses\";\n\nexport interface CoreAPISearchNodesResponse {\n  nodes: CoreAPIContentNode[];\n  next_page_cursor: string | null;\n  hit_count: number;\n  hit_count_is_accurate: boolean;\n  warning_code: SearchWarningCode | null;\n}\n\nexport interface CoreAPISearchTagsResponse {\n  tags: {\n    tag: string;\n    match_count: number;\n    data_sources: string[];\n  }[];\n}\n\nexport const CoreAPISearchScopeSchema = t.union([\n  t.literal(\"nodes_titles\"),\n  t.literal(\"data_source_name\"),\n  t.literal(\"both\"),\n]);\n\nexport type CoreAPISearchScope = t.TypeOf<typeof CoreAPISearchScopeSchema>;\n\nexport const CoreAPIDatasourceViewFilterSchema = t.intersection([\n  t.type({\n    data_source_id: t.string,\n    view_filter: t.array(t.string),\n  }),\n  t.partial({\n    search_scope: CoreAPISearchScopeSchema,\n  }),\n]);\n\nexport type CoreAPIDatasourceViewFilter = t.TypeOf<\n  typeof CoreAPIDatasourceViewFilterSchema\n>;\n\n// Edge-ngram starts at 2 characters.\nexport const MIN_SEARCH_QUERY_SIZE = 2;\n\nexport const CoreAPINodesSearchFilterSchema = t.intersection([\n  t.type({\n    data_source_views: t.array(CoreAPIDatasourceViewFilterSchema),\n  }),\n  t.partial({\n    excluded_node_mime_types: t.union([t.readonlyArray(t.string), t.undefined]),\n    node_ids: t.array(t.string),\n    node_types: t.array(t.string),\n    parent_id: t.string,\n    query: t.string,\n  }),\n]);\n\nexport type CoreAPINodesSearchFilter = t.TypeOf<\n  typeof CoreAPINodesSearchFilterSchema\n>;\nexport interface CoreAPIDataSourceStatsResponse {\n  data_source: {\n    data_source_id: string;\n    data_source_internal_id: string;\n    timestamp: number;\n    name: string;\n    text_size: number;\n    document_count: number;\n  };\n}\n\nexport interface CoreAPIUpsertDataSourceDocumentPayload {\n  projectId: string;\n  dataSourceId: string;\n  documentId: string;\n  timestamp?: number | null;\n  tags: string[];\n  parentId: string | null;\n  parents: string[];\n  sourceUrl?: string | null;\n  section: CoreAPIDataSourceDocumentSection;\n  credentials: CredentialsType;\n  lightDocumentOutput?: boolean;\n  title: string;\n  mimeType: string;\n}\n\n// TODO(keyword-search): Until we remove the `managed-` prefix, we need to\n// sanitize the search name.\nfunction formatDataSourceDisplayName(name: string) {\n  return name\n    .replace(/[-_]/g, \" \") // Replace both hyphens and underscores with spaces.\n    .split(\" \")\n    .filter((part) => part !== \"managed\")\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(\" \");\n}\n\nexport class CoreAPI {\n  _url: string;\n  declare _logger: LoggerInterface;\n  _apiKey: string | null;\n\n  constructor(\n    config: {\n      url: string;\n      apiKey: string | null;\n    },\n    logger: LoggerInterface\n  ) {\n    this._url = config.url;\n    this._logger = logger;\n    this._apiKey = config.apiKey;\n  }\n\n  async createProject(): Promise<CoreAPIResponse<{ project: Project }>> {\n    const response = await this._fetchWithError(`${this._url}/projects`, {\n      method: \"POST\",\n    });\n    return this._resultFromResponse(response);\n  }\n\n  async deleteProject({\n    projectId,\n  }: {\n    projectId: string;\n  }): Promise<CoreAPIResponse<{ success: true }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(projectId)}`,\n      {\n        method: \"DELETE\",\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async getDatasets({\n    projectId,\n  }: {\n    projectId: string;\n  }): Promise<CoreAPIResponse<GetDatasetsResponse>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(projectId)}/datasets`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async getDataset({\n    projectId,\n    datasetName,\n    datasetHash,\n  }: {\n    projectId: string;\n    datasetName: string;\n    datasetHash: string;\n  }): Promise<CoreAPIResponse<GetDatasetResponse>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/datasets/${encodeURIComponent(datasetName)}/${encodeURIComponent(\n        datasetHash\n      )}`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async createDataset({\n    projectId,\n    datasetId,\n    data,\n  }: {\n    projectId: string;\n    datasetId: string;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data: any[];\n  }): Promise<CoreAPIResponse<{ dataset: CoreAPIDatasetWithoutData }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(projectId)}/datasets`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          dataset_id: datasetId,\n          data,\n        }),\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async cloneProject({\n    projectId,\n  }: {\n    projectId: string;\n  }): Promise<CoreAPIResponse<{ project: Project }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(projectId)}/clone`,\n      {\n        method: \"POST\",\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async createRun(\n    workspace: LightWorkspaceType,\n    groups: GroupType[],\n    {\n      projectId,\n      runType,\n      specification,\n      specificationHash,\n      datasetId,\n      inputs,\n      config,\n      credentials,\n      secrets,\n      isSystemKey,\n      storeBlocksResults = true,\n    }: CoreAPICreateRunParams\n  ): Promise<CoreAPIResponse<{ run: CoreAPIRun }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(projectId)}/runs`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-Dust-Workspace-Id\": workspace.sId,\n          \"X-Dust-Group-Ids\": groups.map((g) => g.sId).join(\",\"),\n          \"X-Dust-IsSystemRun\": isSystemKey ? \"true\" : \"false\",\n        },\n        body: JSON.stringify({\n          run_type: runType,\n          specification: specification,\n          specification_hash: specificationHash,\n          dataset_id: datasetId,\n          inputs: inputs,\n          config: config,\n          credentials: credentials,\n          secrets: secrets,\n          store_blocks_results: storeBlocksResults,\n        }),\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async createRunStream(\n    workspace: LightWorkspaceType,\n    groups: GroupType[],\n    {\n      projectId,\n      runType,\n      specification,\n      specificationHash,\n      datasetId,\n      inputs,\n      config,\n      credentials,\n      secrets,\n      isSystemKey,\n      storeBlocksResults = true,\n    }: CoreAPICreateRunParams\n  ): Promise<\n    CoreAPIResponse<{\n      chunkStream: AsyncGenerator<Uint8Array, void, unknown>;\n      dustRunId: Promise<string>;\n    }>\n  > {\n    const res = await this._fetchWithError(\n      `${this._url}/projects/${projectId}/runs/stream`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-Dust-Workspace-Id\": workspace.sId,\n          \"X-Dust-Group-Ids\": groups.map((g) => g.sId).join(\",\"),\n          \"X-Dust-IsSystemRun\": isSystemKey ? \"true\" : \"false\",\n        },\n        body: JSON.stringify({\n          run_type: runType,\n          specification: specification,\n          specification_hash: specificationHash,\n          dataset_id: datasetId,\n          inputs: inputs,\n          config: config,\n          credentials: credentials,\n          secrets: secrets,\n          store_blocks_results: storeBlocksResults,\n        }),\n      }\n    );\n\n    if (res.isErr()) {\n      return res;\n    }\n\n    const response = res.value.response;\n\n    if (!response.ok || !response.body) {\n      return this._resultFromResponse(res);\n    }\n\n    let hasRunId = false;\n    let rejectDustRunIdPromise: (err: Error) => void;\n    let resolveDustRunIdPromise: (runId: string) => void;\n    const dustRunIdPromise = new Promise<string>((resolve, reject) => {\n      rejectDustRunIdPromise = reject;\n      resolveDustRunIdPromise = resolve;\n    });\n\n    const parser = createParser((event) => {\n      if (event.type === \"event\") {\n        if (event.data) {\n          try {\n            const data = JSON.parse(event.data);\n            if (data.content?.run_id && !hasRunId) {\n              hasRunId = true;\n              resolveDustRunIdPromise(data.content.run_id);\n            }\n          } catch (err) {\n            this._logger.error(\n              { error: err },\n              \"Failed parsing chunk from Core API\"\n            );\n          }\n        }\n      }\n    });\n\n    const reader = response.body.getReader();\n    const logger = this._logger;\n\n    const streamChunks = async function* () {\n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) {\n            break;\n          }\n          parser.feed(new TextDecoder().decode(value));\n          yield value;\n        }\n      } catch (e) {\n        logger.error(\n          {\n            error: e,\n            errorStr: JSON.stringify(e),\n            errorSource: \"createRunStream\",\n          },\n          \"Error streaming chunks\"\n        );\n      } finally {\n        if (!hasRunId) {\n          // once the stream is entirely consumed, if we haven't received a run id, reject the promise\n          setImmediate(() => {\n            logger.error(\n              { projectId, runType, specificationHash },\n              \"No run id received\"\n            );\n            rejectDustRunIdPromise(new Error(\"No run id received\"));\n          });\n        }\n        reader.releaseLock();\n      }\n    };\n\n    return new Ok({ chunkStream: streamChunks(), dustRunId: dustRunIdPromise });\n  }\n\n  async deleteRun({\n    projectId,\n    runId,\n  }: {\n    projectId: string;\n    runId: string;\n  }): Promise<CoreAPIResponse<{ success: true }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/runs/${encodeURIComponent(runId)}`,\n      {\n        method: \"DELETE\",\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async getRunsBatch({\n    projectId,\n    dustRunIds,\n  }: {\n    projectId: string;\n    dustRunIds: string[];\n  }): Promise<CoreAPIResponse<{ runs: { [key: string]: CoreAPIRun } }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(projectId)}/runs/batch`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          run_ids: dustRunIds,\n        }),\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async getRun({\n    projectId,\n    runId,\n  }: {\n    projectId: string;\n    runId: string;\n  }): Promise<CoreAPIResponse<{ run: CoreAPIRun }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/runs/${encodeURIComponent(runId)}`,\n      {\n        method: \"GET\",\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async getRunStatus({\n    projectId,\n    runId,\n  }: {\n    projectId: string;\n    runId: string;\n  }): Promise<CoreAPIResponse<{ run: CoreAPIRun }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/runs/${encodeURIComponent(runId)}/status`,\n      {\n        method: \"GET\",\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async getSpecificationHashes({\n    projectId,\n  }: {\n    projectId: string;\n  }): Promise<CoreAPIResponse<{ hashes: string[] }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(projectId)}/specifications`,\n      {\n        method: \"GET\",\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async getSpecification({\n    projectId,\n    specificationHash,\n  }: {\n    projectId: string;\n    specificationHash: string;\n  }): Promise<\n    CoreAPIResponse<{ specification: { created: number; data: string } }>\n  > {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/specifications/${encodeURIComponent(specificationHash)}`,\n      {\n        method: \"GET\",\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async saveSpecification({\n    projectId,\n    specification,\n  }: {\n    projectId: string;\n    specification: string;\n  }): Promise<CoreAPIResponse<{ success: true }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(projectId)}/specifications`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          specification,\n        }),\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async getRunBlock({\n    projectId,\n    runId,\n    blockType,\n    blockName,\n  }: {\n    projectId: string;\n    runId: string;\n    blockType: BlockType;\n    blockName: string;\n  }): Promise<CoreAPIResponse<{ run: CoreAPIRun }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/runs/${encodeURIComponent(runId)}/blocks/${encodeURIComponent(\n        blockType\n      )}/${encodeURIComponent(blockName)}`,\n      {\n        method: \"GET\",\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async createDataSource({\n    projectId,\n    config,\n    credentials,\n    name,\n  }: {\n    projectId: string;\n    config: CoreAPIDataSourceConfig;\n    credentials: CredentialsType;\n    name: string;\n  }): Promise<CoreAPIResponse<{ data_source: CoreAPIDataSource }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(projectId)}/data_sources`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          config,\n          credentials: credentials,\n          name: formatDataSourceDisplayName(name),\n        }),\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async updateDataSource({\n    projectId,\n    dataSourceId,\n    name,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n    name: string;\n  }): Promise<CoreAPIResponse<{ data_source: CoreAPIDataSource }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(dataSourceId)}`,\n      {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          name: formatDataSourceDisplayName(name),\n        }),\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async getDataSource({\n    projectId,\n    dataSourceId,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n  }): Promise<CoreAPIResponse<{ data_source: CoreAPIDataSource }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(dataSourceId)}`,\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async deleteDataSource({\n    projectId,\n    dataSourceId,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n  }): Promise<CoreAPIResponse<{ data_source: CoreAPIDataSource }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(dataSourceId)}`,\n      {\n        method: \"DELETE\",\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async searchDataSource(\n    projectId: string,\n    dataSourceId: string,\n    payload: {\n      query: string;\n      topK: number;\n      filter?: CoreAPISearchFilter | null;\n      view_filter?: CoreAPISearchFilter | null;\n      fullText: boolean;\n      credentials: { [key: string]: string };\n      target_document_tokens?: number | null;\n    }\n  ): Promise<CoreAPIResponse<{ documents: CoreAPIDocument[] }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(dataSourceId)}/search`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          query: payload.query,\n          top_k: payload.topK,\n          filter: payload.filter,\n          view_filter: payload.view_filter,\n          full_text: payload.fullText,\n          credentials: payload.credentials,\n          target_document_tokens: payload.target_document_tokens,\n        }),\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async getDataSourceDocuments(\n    {\n      dataSourceId,\n      documentIds,\n      projectId,\n      viewFilter,\n    }: {\n      dataSourceId: string;\n      documentIds?: string[];\n      projectId: string;\n      viewFilter?: CoreAPISearchFilter | null;\n    },\n    pagination?: { limit: number; offset: number }\n  ): Promise<\n    CoreAPIResponse<{\n      documents: CoreAPIDocument[];\n      limit: number;\n      offset: number;\n      total: number;\n    }>\n  > {\n    const queryParams = new URLSearchParams();\n\n    if (pagination) {\n      queryParams.append(\"limit\", String(pagination.limit));\n      queryParams.append(\"offset\", String(pagination.offset));\n    }\n\n    if (viewFilter) {\n      queryParams.append(\"view_filter\", JSON.stringify(viewFilter));\n    }\n\n    if (documentIds && documentIds.length > 0) {\n      queryParams.append(\"document_ids\", JSON.stringify(documentIds));\n    }\n\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/documents?${queryParams.toString()}`,\n      {\n        method: \"GET\",\n      }\n    );\n    return this._resultFromResponse(response);\n  }\n\n  async getDataSourceDocument({\n    dataSourceId,\n    documentId,\n    projectId,\n    versionHash,\n    viewFilter,\n  }: {\n    dataSourceId: string;\n    documentId: string;\n    projectId: string;\n    versionHash?: string | null;\n    viewFilter?: CoreAPISearchFilter | null;\n  }): Promise<\n    CoreAPIResponse<{\n      document: CoreAPIDocument;\n      data_source: CoreAPIDataSource;\n    }>\n  > {\n    const queryParams = new URLSearchParams();\n\n    if (versionHash) {\n      queryParams.append(\"version_hash\", versionHash);\n    }\n\n    if (viewFilter) {\n      queryParams.append(\"view_filter\", JSON.stringify(viewFilter));\n    }\n\n    const qs = queryParams.toString();\n\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/documents/${encodeURIComponent(documentId)}${qs ? `?${qs}` : \"\"}`,\n      {\n        method: \"GET\",\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async getDataSourceDocumentVersions({\n    projectId,\n    dataSourceId,\n    documentId,\n    latest_hash,\n    limit = 10,\n    offset = 0,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n    documentId: string;\n    limit: number;\n    offset: number;\n    latest_hash?: string | null;\n  }): Promise<\n    CoreAPIResponse<{\n      versions: CoreAPIDocumentVersion[];\n      offset: number;\n      limit: number;\n      total: number;\n    }>\n  > {\n    const params = new URLSearchParams({\n      limit: String(limit),\n      offset: String(offset),\n    });\n\n    if (latest_hash) {\n      params.append(\"latest_hash\", latest_hash);\n    }\n\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/documents/${encodeURIComponent(\n        documentId\n      )}/versions?${params.toString()}`,\n      {\n        method: \"GET\",\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async upsertDataSourceDocument({\n    projectId,\n    dataSourceId,\n    documentId,\n    timestamp,\n    tags,\n    parentId,\n    parents,\n    sourceUrl,\n    section,\n    credentials,\n    lightDocumentOutput = false,\n    title,\n    mimeType,\n  }: CoreAPIUpsertDataSourceDocumentPayload): Promise<\n    CoreAPIResponse<{\n      document:\n        | CoreAPIDocument\n        // if lightDocumentOutput is true, we return this type\n        | CoreAPILightDocument;\n\n      data_source: CoreAPIDataSource;\n    }>\n  > {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${projectId}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/documents`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          document_id: documentId,\n          timestamp,\n          section,\n          tags,\n          parent_id: parentId,\n          parents,\n          source_url: sourceUrl,\n          credentials,\n          light_document_output: lightDocumentOutput,\n          title: title,\n          mime_type: mimeType,\n        }),\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async getDataSourceDocumentBlob({\n    projectId,\n    dataSourceId,\n    documentId,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n    documentId: string;\n  }): Promise<CoreAPIResponse<CoreAPIDocumentBlob>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${projectId}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/documents/${encodeURIComponent(documentId)}/blob`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async updateDataSourceDocumentTags({\n    projectId,\n    dataSourceId,\n    documentId,\n    addTags,\n    removeTags,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n    documentId: string;\n    addTags?: string[];\n    removeTags?: string[];\n  }): Promise<\n    CoreAPIResponse<{\n      data_source: CoreAPIDataSource;\n    }>\n  > {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/documents/${encodeURIComponent(documentId)}/tags`,\n      {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          add_tags: addTags,\n          remove_tags: removeTags,\n        }),\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async updateDataSourceDocumentParents({\n    projectId,\n    dataSourceId,\n    documentId,\n    parentId,\n    parents,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n    documentId: string;\n    parentId: string | null;\n    parents: string[];\n  }): Promise<\n    CoreAPIResponse<{\n      data_source: CoreAPIDataSource;\n    }>\n  > {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/documents/${encodeURIComponent(documentId)}/parents`,\n      {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          parents: parents,\n          parent_id: parentId,\n        }),\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async deleteDataSourceDocument({\n    projectId,\n    dataSourceId,\n    documentId,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n    documentId: string;\n  }): Promise<CoreAPIResponse<{ data_source: CoreAPIDataSource }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/documents/${encodeURIComponent(documentId)}`,\n      {\n        method: \"DELETE\",\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async scrubDataSourceDocumentDeletedVersions({\n    projectId,\n    dataSourceId,\n    documentId,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n    documentId: string;\n  }): Promise<\n    CoreAPIResponse<{\n      versions: CoreAPIDocumentVersion[];\n    }>\n  > {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/documents/${encodeURIComponent(documentId)}/scrub_deleted_versions`,\n      {\n        method: \"POST\",\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async tokenize({\n    text,\n    modelId,\n    providerId,\n  }: {\n    text: string;\n    modelId: string;\n    providerId: string;\n  }): Promise<CoreAPIResponse<{ tokens: CoreAPITokenType[] }>> {\n    const credentials = dustManagedCredentials();\n    const response = await this._fetchWithError(`${this._url}/tokenize`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      keepalive: false,\n      body: JSON.stringify({\n        text,\n        model_id: modelId,\n        provider_id: providerId,\n        credentials,\n      }),\n    });\n\n    return this._resultFromResponse(response);\n  }\n\n  async tokenizeBatch({\n    texts,\n    modelId,\n    providerId,\n  }: {\n    texts: string[];\n    modelId: string;\n    providerId: string;\n  }): Promise<CoreAPIResponse<{ tokens: CoreAPITokenType[][] }>> {\n    const credentials = dustManagedCredentials();\n    const response = await this._fetchWithError(`${this._url}/tokenize/batch`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      keepalive: false,\n      body: JSON.stringify({\n        texts,\n        model_id: modelId,\n        provider_id: providerId,\n        credentials,\n      }),\n    });\n\n    return this._resultFromResponse(response);\n  }\n\n  async dataSourceTokenize({\n    text,\n    projectId,\n    dataSourceId,\n  }: {\n    text: string;\n    projectId: string;\n    dataSourceId: string;\n  }): Promise<CoreAPIResponse<{ tokens: CoreAPITokenType[] }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(dataSourceId)}/tokenize`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ text }),\n      }\n    );\n    return this._resultFromResponse(response);\n  }\n\n  async tableValidateCSVContent({\n    projectId,\n    dataSourceId,\n    bucket,\n    bucketCSVPath,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n    bucket: string;\n    bucketCSVPath: string;\n  }): Promise<\n    CoreAPIResponse<{\n      schema: CoreAPITableSchema;\n    }>\n  > {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/tables/validate_csv_content`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          bucket,\n          bucket_csv_path: bucketCSVPath,\n        }),\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async upsertTable({\n    projectId,\n    dataSourceId,\n    tableId,\n    name,\n    description,\n    timestamp,\n    tags,\n    parentId,\n    parents,\n    remoteDatabaseTableId,\n    remoteDatabaseSecretId,\n    title,\n    mimeType,\n    sourceUrl,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n    tableId: string;\n    name: string;\n    description: string;\n    timestamp: number | null;\n    tags: string[];\n    parentId: string | null;\n    parents: string[];\n    remoteDatabaseTableId?: string | null;\n    remoteDatabaseSecretId?: string | null;\n    title: string;\n    mimeType: string;\n    sourceUrl: string | null;\n  }): Promise<CoreAPIResponse<{ table: CoreAPITable }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(dataSourceId)}/tables`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          table_id: tableId,\n          name: name,\n          description: description,\n          timestamp,\n          tags,\n          parent_id: parentId,\n          parents,\n          remote_database_table_id: remoteDatabaseTableId ?? null,\n          remote_database_secret_id: remoteDatabaseSecretId ?? null,\n          title,\n          mime_type: mimeType,\n          source_url: sourceUrl,\n        }),\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async getTable({\n    projectId,\n    dataSourceId,\n    tableId,\n    viewFilter,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n    tableId: string;\n    viewFilter?: CoreAPISearchFilter | null;\n  }): Promise<CoreAPIResponse<{ table: CoreAPITable }>> {\n    const queryParams = new URLSearchParams();\n\n    if (viewFilter) {\n      queryParams.append(\"view_filter\", JSON.stringify(viewFilter));\n    }\n\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/tables/${encodeURIComponent(tableId)}?${queryParams.toString()}`,\n      {\n        method: \"GET\",\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async getTables(\n    {\n      dataSourceId,\n      projectId,\n      tableIds,\n      viewFilter,\n    }: {\n      dataSourceId: string;\n      projectId: string;\n      tableIds?: string[];\n      viewFilter?: CoreAPISearchFilter | null;\n    },\n    pagination?: { limit: number; offset: number }\n  ): Promise<\n    CoreAPIResponse<{\n      limit: number;\n      offset: number;\n      tables: CoreAPITable[];\n      total: number;\n    }>\n  > {\n    const queryParams = new URLSearchParams();\n\n    if (viewFilter) {\n      queryParams.append(\"view_filter\", JSON.stringify(viewFilter));\n    }\n\n    if (tableIds && tableIds.length > 0) {\n      queryParams.append(\"table_ids\", JSON.stringify(tableIds));\n    }\n\n    if (pagination) {\n      queryParams.append(\"limit\", String(pagination.limit));\n      queryParams.append(\"offset\", String(pagination.offset));\n    }\n\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/tables?${queryParams.toString()}`,\n      {\n        method: \"GET\",\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async deleteTable({\n    projectId,\n    dataSourceId,\n    tableId,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n    tableId: string;\n  }): Promise<CoreAPIResponse<{ success: true }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/tables/${encodeURIComponent(tableId)}`,\n      {\n        method: \"DELETE\",\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async updateTableParents({\n    projectId,\n    dataSourceId,\n    tableId,\n    parentId,\n    parents,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n    tableId: string;\n    parentId: string | null;\n    parents: string[];\n  }): Promise<CoreAPIResponse<{ success: true }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/tables/${encodeURIComponent(tableId)}/parents`,\n      {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          parent_id: parentId,\n          parents: parents,\n        }),\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async upsertTableRows({\n    projectId,\n    dataSourceId,\n    tableId,\n    rows,\n    truncate,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n    tableId: string;\n    rows: CoreAPIRow[];\n    truncate?: boolean;\n  }): Promise<CoreAPIResponse<{ success: true }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/tables/${encodeURIComponent(tableId)}/rows`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          rows,\n          truncate: truncate || false,\n        }),\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async tableUpsertCSVContent({\n    projectId,\n    dataSourceId,\n    tableId,\n    bucket,\n    bucketCSVPath,\n    truncate,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n    tableId: string;\n    bucket: string;\n    bucketCSVPath: string;\n    truncate?: boolean;\n  }): Promise<\n    CoreAPIResponse<{\n      schema: CoreAPITableSchema;\n    }>\n  > {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/tables/${encodeURIComponent(tableId)}/csv`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          bucket,\n          bucket_csv_path: bucketCSVPath,\n          truncate: truncate || false,\n        }),\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async getTableRow({\n    projectId,\n    dataSourceId,\n    tableId,\n    rowId,\n    filter,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n    tableId: string;\n    rowId: string;\n    filter?: CoreAPISearchFilter | null;\n  }): Promise<CoreAPIResponse<{ row: CoreAPIRow }>> {\n    const qs = filter\n      ? `?view_filter=${encodeURIComponent(JSON.stringify(filter))}`\n      : \"\";\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/tables/${encodeURIComponent(tableId)}/rows/${encodeURIComponent(\n        rowId\n      )}${qs}`,\n      {\n        method: \"GET\",\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async getTableRows({\n    projectId,\n    dataSourceId,\n    tableId,\n    limit,\n    offset,\n    filter,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n    tableId: string;\n    limit: number;\n    offset: number;\n    filter?: CoreAPISearchFilter | null;\n  }): Promise<\n    CoreAPIResponse<{\n      rows: CoreAPIRow[];\n      offset: number;\n      limit: number;\n      total: number;\n    }>\n  > {\n    const qs = filter\n      ? `&view_filter=${encodeURIComponent(JSON.stringify(filter))}`\n      : \"\";\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/tables/${encodeURIComponent(\n        tableId\n      )}/rows?limit=${limit}&offset=${offset}${qs}`,\n      {\n        method: \"GET\",\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async getDataSourceTableBlob({\n    projectId,\n    dataSourceId,\n    tableId,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n    tableId: string;\n  }): Promise<CoreAPIResponse<CoreAPITableBlob>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${projectId}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/tables/${encodeURIComponent(tableId)}/blob`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async deleteTableRow({\n    projectId,\n    dataSourceId,\n    tableId,\n    rowId,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n    tableId: string;\n    rowId: string;\n  }): Promise<CoreAPIResponse<{ success: true }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/tables/${encodeURIComponent(tableId)}/rows/${encodeURIComponent(\n        rowId\n      )}`,\n      {\n        method: \"DELETE\",\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async queryDatabase({\n    tables,\n    query,\n    filter,\n  }: {\n    tables: Array<{\n      project_id: string;\n      data_source_id: string;\n      table_id: string;\n    }>;\n    query: string;\n    filter?: CoreAPISearchFilter | null;\n  }): Promise<\n    CoreAPIResponse<{\n      schema: CoreAPITableSchema;\n      results: CoreAPIQueryResult[];\n    }>\n  > {\n    const response = await this._fetchWithError(`${this._url}/query_database`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        query,\n        tables,\n        filter,\n      }),\n    });\n\n    return this._resultFromResponse(response);\n  }\n\n  async getDataSourceFolders(\n    {\n      projectId,\n      dataSourceId,\n      folderIds,\n      viewFilter,\n    }: {\n      projectId: string;\n      dataSourceId: string;\n      folderIds?: string[];\n      viewFilter?: CoreAPISearchFilter | null;\n    },\n    pagination?: { limit: number; offset: number }\n  ): Promise<\n    CoreAPIResponse<{\n      folders: CoreAPIFolder[];\n      limit: number;\n      offset: number;\n      total: number;\n    }>\n  > {\n    const queryParams = new URLSearchParams();\n\n    if (pagination) {\n      queryParams.append(\"limit\", String(pagination.limit));\n      queryParams.append(\"offset\", String(pagination.offset));\n    }\n\n    if (viewFilter) {\n      queryParams.append(\"view_filter\", JSON.stringify(viewFilter));\n    }\n\n    if (folderIds && folderIds.length > 0) {\n      queryParams.append(\"document_ids\", JSON.stringify(folderIds));\n    }\n\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/folders?${queryParams.toString()}`,\n      {\n        method: \"GET\",\n      }\n    );\n    return this._resultFromResponse(response);\n  }\n\n  async searchNodes({\n    query,\n    filter,\n    options,\n  }: {\n    query?: string;\n    filter: CoreAPINodesSearchFilter;\n    options?: CoreAPISearchOptions;\n  }): Promise<CoreAPIResponse<CoreAPISearchNodesResponse>> {\n    const response = await this._fetchWithError(`${this._url}/nodes/search`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        query,\n        filter,\n        options,\n      }),\n    });\n\n    return this._resultFromResponse(response);\n  }\n\n  async getDataSourceStats({\n    projectId,\n    dataSourceId,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n  }): Promise<CoreAPIResponse<CoreAPIDataSourceStatsResponse>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(dataSourceId)}/stats`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async searchTags({\n    query,\n    queryType,\n    dataSourceViews,\n    limit,\n  }: {\n    query?: string;\n    queryType?: string;\n    dataSourceViews: DataSourceViewType[];\n    limit?: number;\n  }): Promise<CoreAPIResponse<CoreAPISearchTagsResponse>> {\n    const dataSourceViewsFilter: CoreAPIDatasourceViewFilter[] =\n      dataSourceViews.map((dsv) => ({\n        data_source_id: dsv.dataSource.dustAPIDataSourceId,\n        view_filter: dsv.parentsIn ?? [],\n      }));\n\n    const response = await this._fetchWithError(`${this._url}/tags/search`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        data_source_views: dataSourceViewsFilter,\n        query,\n        query_type: queryType,\n        limit,\n      }),\n    });\n\n    return this._resultFromResponse(response);\n  }\n\n  async getDataSourceFolder({\n    projectId,\n    dataSourceId,\n    folderId,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n    folderId: string;\n    viewFilter?: CoreAPISearchFilter | null;\n  }): Promise<CoreAPIResponse<{ folder: CoreAPIFolder }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/folders/${encodeURIComponent(folderId)}`,\n      {\n        method: \"GET\",\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async upsertDataSourceFolder({\n    projectId,\n    dataSourceId,\n    folderId,\n    timestamp,\n    parentId,\n    parents,\n    title,\n    mimeType,\n    sourceUrl,\n    providerVisibility,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n    folderId: string;\n    timestamp: number | null;\n    parentId: string | null;\n    parents: string[];\n    title: string;\n    mimeType: string;\n    sourceUrl?: string | null;\n    providerVisibility: ProviderVisibility | null | undefined;\n  }): Promise<CoreAPIResponse<{ folder: CoreAPIFolder }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${projectId}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/folders`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          folder_id: folderId,\n          timestamp,\n          title,\n          parent_id: parentId,\n          parents,\n          mime_type: mimeType,\n          source_url: sourceUrl,\n          provider_visibility: providerVisibility,\n        }),\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n\n  async deleteDataSourceFolder({\n    projectId,\n    dataSourceId,\n    folderId,\n  }: {\n    projectId: string;\n    dataSourceId: string;\n    folderId: string;\n  }): Promise<CoreAPIResponse<{ data_source: CoreAPIDataSource }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/projects/${encodeURIComponent(\n        projectId\n      )}/data_sources/${encodeURIComponent(\n        dataSourceId\n      )}/folders/${encodeURIComponent(folderId)}`,\n      {\n        method: \"DELETE\",\n      }\n    );\n\n    return this._resultFromResponse(response);\n  }\n  private async _fetchWithError(\n    url: string,\n    init?: RequestInit\n  ): Promise<Result<{ response: Response; duration: number }, CoreAPIError>> {\n    const now = Date.now();\n    try {\n      const params = { ...init };\n      if (this._apiKey) {\n        params.headers = {\n          ...params.headers,\n          Authorization: `Bearer ${this._apiKey}`,\n        };\n      }\n      const res = await fetch(url, params);\n      return new Ok({ response: res, duration: Date.now() - now });\n    } catch (e) {\n      const duration = Date.now() - now;\n      const err: CoreAPIError = {\n        code: \"unexpected_network_error\",\n        message: `Unexpected network error from CoreAPI: ${e}`,\n      };\n      this._logger.error(\n        {\n          url,\n          duration,\n          coreError: err,\n          error: e,\n        },\n        \"CoreAPI error\"\n      );\n      return new Err(err);\n    }\n  }\n\n  private async _resultFromResponse<T>(\n    res: Result<\n      {\n        response: Response;\n        duration: number;\n      },\n      CoreAPIError\n    >\n  ): Promise<CoreAPIResponse<T>> {\n    if (res.isErr()) {\n      return res;\n    }\n\n    // We get the text and attempt to parse so that we can log the raw text in case of error (the\n    // body is already consumed by response.json() if used otherwise).\n    const text = await res.value.response.text();\n\n    let json = null;\n    try {\n      json = JSON.parse(text);\n    } catch (e) {\n      const err: CoreAPIError = {\n        code: \"unexpected_response_format\",\n        message: `Unexpected response format from CoreAPI: ${e}`,\n      };\n\n      this._logger.error(\n        {\n          coreError: err,\n          parseError: e,\n          rawText: text,\n          status: res.value.response.status,\n          url: res.value.response.url,\n          duration: res.value.duration,\n        },\n        \"CoreAPI error\"\n      );\n      return new Err(err);\n    }\n\n    if (!res.value.response.ok) {\n      const err = json?.error;\n      if (isCoreAPIError(err)) {\n        this._logger.error(\n          {\n            coreError: err,\n            status: res.value.response.status,\n            url: res.value.response.url,\n            duration: res.value.duration,\n          },\n          \"CoreAPI error\"\n        );\n        return new Err(err);\n      } else {\n        const err: CoreAPIError = {\n          code: \"unexpected_error_format\",\n          message: \"Unexpected error format from CoreAPI\",\n        };\n        this._logger.error(\n          {\n            coreError: err,\n            json,\n            status: res.value.response.status,\n            url: res.value.response.url,\n            duration: res.value.duration,\n          },\n          \"CoreAPI error\"\n        );\n        return new Err(err);\n      }\n    } else {\n      const err = json?.error;\n      const res = json?.response;\n\n      if (err && isCoreAPIError(err)) {\n        this._logger.error(\n          {\n            coreError: err,\n            json,\n            status: res.value.response.status,\n            url: res.value.response.url,\n            duration: res.value.duration,\n          },\n          \"CoreAPI error\"\n        );\n        return new Err(err);\n      } else if (res) {\n        return new Ok(res);\n      } else {\n        const err: CoreAPIError = {\n          code: \"unexpected_response_format\",\n          message: \"Unexpected response format from CoreAPI\",\n        };\n        this._logger.error(\n          {\n            coreError: err,\n            json,\n            status: res.value.response.status,\n            url: res.value.response.url,\n            duration: res.value.duration,\n          },\n          \"CoreAPI error\"\n        );\n        return new Err(err);\n      }\n    }\n  }\n}\n","import { ConnectorsAPIError } from \"../../connectors/api\";\nimport { CONVERSATION_ERROR_TYPES } from \"../assistant/conversation\";\nimport { CoreAPIError } from \"./core_api\";\n\nexport type InternalErrorWithStatusCode = {\n  status_code: number;\n};\n\nconst API_ERROR_TYPES = [\n  \"not_authenticated\",\n  \"sso_enforced\",\n  \"missing_authorization_header_error\",\n  \"malformed_authorization_header_error\",\n  \"invalid_basic_authorization_error\",\n  \"invalid_oauth_token_error\",\n  \"expired_oauth_token_error\",\n  \"invalid_api_key_error\",\n  \"internal_server_error\",\n  \"invalid_request_error\",\n  \"invalid_rows_request_error\",\n  \"user_not_found\",\n  \"content_too_large\",\n  \"data_source_error\",\n  \"data_source_not_found\",\n  \"data_source_view_not_found\",\n  \"data_source_auth_error\",\n  \"data_source_quota_error\",\n  \"data_source_document_not_found\",\n  \"data_source_not_managed\",\n  \"run_error\",\n  \"app_not_found\",\n  \"app_auth_error\",\n  \"provider_auth_error\",\n  \"provider_not_found\",\n  \"dataset_not_found\",\n  \"workspace_not_found\",\n  \"workspace_auth_error\",\n  \"workspace_user_not_found\",\n  \"method_not_supported_error\",\n  \"personal_workspace_not_found\",\n  \"action_unknown_error\",\n  \"action_api_error\",\n  \"membership_not_found\",\n  \"invitation_not_found\",\n  \"plan_limit_error\",\n  \"template_not_found\",\n  \"chat_message_not_found\",\n  \"connector_not_found_error\",\n  \"connector_update_error\",\n  \"connector_update_unauthorized\",\n  \"connector_oauth_target_mismatch\",\n  \"connector_oauth_user_missing_rights\",\n  \"connector_provider_not_supported\",\n  \"connector_credentials_error\",\n  \"agent_configuration_not_found\",\n  \"agent_message_error\",\n  \"message_not_found\",\n  \"plan_message_limit_exceeded\",\n  \"global_agent_error\",\n  \"stripe_invalid_product_id_error\",\n  \"rate_limit_error\",\n  \"subscription_payment_failed\",\n  \"subscription_not_found\",\n  \"subscription_state_invalid\",\n  \"service_unavailable\",\n  // Use by agent creation / update\n  \"assistant_saving_error\",\n  // Used in the DustAPI client:\n  \"unexpected_error_format\",\n  \"unexpected_response_format\",\n  \"unexpected_network_error\",\n  // Used by callAction client:\n  \"action_failed\",\n  \"unexpected_action_response\",\n  \"feature_flag_not_found\",\n  \"feature_flag_already_exists\",\n  // Pagination:\n  \"invalid_pagination_parameters\",\n  \"table_not_found\",\n  // Templates:\n  \"template_not_found\",\n  // Invitations:\n  \"invitation_already_sent_recently\",\n  // DustAppSecrets:\n  \"dust_app_secret_not_found\",\n  // Key:\n  \"key_not_found\",\n  // Labs:\n  \"transcripts_configuration_not_found\",\n  \"transcripts_configuration_default_not_allowed\",\n  \"transcripts_configuration_already_exists\",\n  // Files:\n  \"file_not_found\",\n  \"file_too_large\",\n  \"file_type_not_supported\",\n  \"file_is_empty\",\n  // Runs:\n  \"run_not_found\",\n  // Spaces:\n  \"space_already_exists\",\n  \"space_not_found\",\n  // Groups:\n  \"group_not_found\",\n  // Plugins:\n  \"plugin_not_found\",\n  \"plugin_execution_failed\",\n  // Trackers:\n  \"tracker_not_found\",\n  // Conversation:\n  ...CONVERSATION_ERROR_TYPES,\n] as const;\n\nexport type APIErrorType = (typeof API_ERROR_TYPES)[number];\n\nexport type APIError = {\n  type: APIErrorType;\n  message: string;\n  data_source_error?: CoreAPIError;\n  run_error?: CoreAPIError;\n  app_error?: CoreAPIError;\n  connectors_error?: ConnectorsAPIError;\n};\n\nexport function isAPIError(obj: unknown): obj is APIError {\n  return (\n    typeof obj === \"object\" &&\n    obj !== null &&\n    \"message\" in obj &&\n    typeof obj.message === \"string\" &&\n    \"type\" in obj &&\n    typeof obj.type === \"string\" &&\n    API_ERROR_TYPES.includes(obj.type as APIErrorType)\n  );\n}\n\n/**\n * Type to transport a HTTP error with its http status code (eg: 404)\n * and the error object returned by our public API endpoints (api/v1/*)\n */\nexport type APIErrorWithStatusCode = {\n  api_error: APIError;\n  status_code: number;\n};\n\nexport type APIErrorResponse = {\n  error: APIError;\n};\n\nexport function isAPIErrorResponse(obj: unknown): obj is APIErrorResponse {\n  return (\n    typeof obj === \"object\" &&\n    obj !== null &&\n    \"error\" in obj &&\n    isAPIError(obj.error)\n  );\n}\n\nexport type WithAPIErrorResponse<T> = T | APIErrorResponse;\n","// TRANSCRIPTS\nexport const labsTranscriptsProviders = [\n  \"google_drive\",\n  \"gong\",\n  \"modjo\",\n] as const;\nexport type LabsTranscriptsProviderType =\n  (typeof labsTranscriptsProviders)[number];\n","import * as t from \"io-ts\";\n\nimport { LightWorkspaceType } from \"../../user\";\n\ninterface BaseArgDefinition {\n  description?: string;\n  label: string;\n  redact?: boolean;\n}\n\ntype AtLeastTwoElements<T> = readonly [T, T, ...T[]];\n\ninterface EnumArgDefinition extends BaseArgDefinition {\n  type: \"enum\";\n  values: AtLeastTwoElements<string>;\n}\n\ninterface StringArgDefinition extends BaseArgDefinition {\n  type: \"string\";\n  values?: never;\n}\n\ninterface NumberArgDefinition extends BaseArgDefinition {\n  type: \"number\";\n  values?: never;\n}\n\ninterface TextArgDefinition extends BaseArgDefinition {\n  type: \"text\";\n  values?: never;\n}\n\ninterface BooleanArgDefinition extends BaseArgDefinition {\n  type: \"boolean\";\n  values?: never;\n}\n\nexport type PluginArgDefinition =\n  | EnumArgDefinition\n  | StringArgDefinition\n  | TextArgDefinition\n  | NumberArgDefinition\n  | BooleanArgDefinition;\n\nexport type StrictPluginArgs = {\n  [key: string]: PluginArgDefinition;\n};\n\nexport type PluginArgs = Record<string, PluginArgDefinition>;\n\nexport interface PluginManifest<\n  T extends PluginArgs,\n  R extends SupportedResourceType\n> {\n  args: T;\n  description: string;\n  explanation?: string;\n  id: string;\n  name: string;\n  resourceTypes: R[];\n  warning?: string;\n}\n\ninterface PluginResourceScope {\n  resourceType: SupportedResourceType;\n}\n\ninterface PluginWorkspaceResource extends PluginResourceScope {\n  resourceId: string;\n  workspace: LightWorkspaceType;\n}\n\nexport type PluginResourceTarget =\n  | PluginResourceScope\n  | PluginWorkspaceResource;\n\nexport function createIoTsCodecFromArgs(\n  args: PluginArgs\n): t.TypeC<Record<string, t.Mixed>> {\n  const codecProps: Record<string, t.Mixed> = {};\n\n  for (const [key, arg] of Object.entries(args)) {\n    switch (arg.type) {\n      case \"text\":\n        codecProps[key] = t.string;\n        break;\n      case \"string\":\n        codecProps[key] = t.string;\n        break;\n      case \"number\":\n        codecProps[key] = t.number;\n        break;\n      case \"boolean\":\n        codecProps[key] = t.boolean;\n        break;\n      case \"enum\":\n        if (!Array.isArray(arg.values) || arg.values.length < 2) {\n          throw new Error(\n            `Enum argument \"${key}\" must have at least two values`\n          );\n        }\n        codecProps[key] = t.union([\n          t.literal(arg.values[0]),\n          t.literal(arg.values[1]),\n          ...arg.values.slice(2).map((v) => t.literal(v)),\n        ]);\n    }\n  }\n\n  return t.type(codecProps);\n}\n\nexport const supportedResourceTypes = [\n  \"apps\",\n  \"data_source_views\",\n  \"data_sources\",\n  \"spaces\",\n  \"workspaces\",\n  // Special case for global operations.\n  \"global\",\n] as const;\n\nexport type SupportedResourceType = (typeof supportedResourceTypes)[number];\n\nexport function isSupportedResourceType(\n  resourceType: string\n): resourceType is SupportedResourceType {\n  return supportedResourceTypes.includes(resourceType as SupportedResourceType);\n}\n","export function assertNever(x: never): never {\n  throw new Error(\n    `${\n      typeof x === \"object\" ? JSON.stringify(x) : x\n    } is not of type never. This should never happen.`\n  );\n}\n","import * as t from \"io-ts\";\n\nimport {\n  EmbeddingProviderIdType,\n  ModelProviderIdType,\n} from \"../front/lib/assistant\";\nimport { ModelId } from \"../shared/model_id\";\nimport { assertNever } from \"../shared/utils/assert_never\";\n\nexport type WorkspaceSegmentationType = \"interesting\" | null;\n\nexport const ROLES = [\"admin\", \"builder\", \"user\", \"none\"] as const;\nexport const ACTIVE_ROLES = [\"admin\", \"builder\", \"user\"] as const;\n\nfunction keyObject<T extends readonly string[]>(\n  arr: T\n): { [K in T[number]]: null } {\n  return Object.fromEntries(arr.map((v) => [v, null])) as {\n    [K in T[number]]: null;\n  };\n}\n\nexport const RoleSchema = t.keyof(keyObject(ROLES));\n\nexport type RoleType = t.TypeOf<typeof RoleSchema>;\n\nexport const ActiveRoleSchema = t.keyof(keyObject(ACTIVE_ROLES));\n\nexport type ActiveRoleType = t.TypeOf<typeof ActiveRoleSchema>;\n\nexport function isActiveRoleType(role: string): role is ActiveRoleType {\n  return ACTIVE_ROLES.includes(role as ActiveRoleType);\n}\n\nexport type LightWorkspaceType = {\n  id: ModelId;\n  sId: string;\n  name: string;\n  role: RoleType;\n  segmentation: WorkspaceSegmentationType;\n  whiteListedProviders: ModelProviderIdType[] | null;\n  defaultEmbeddingProvider: EmbeddingProviderIdType | null;\n  metadata: Record<string, string | number | boolean | object> | null;\n};\n\nexport type WorkspaceType = LightWorkspaceType & {\n  ssoEnforced?: boolean;\n};\n\nexport type ExtensionWorkspaceType = WorkspaceType & {\n  blacklistedDomains: string[] | null;\n};\n\nexport type UserProviderType =\n  | \"auth0\"\n  | \"github\"\n  | \"google\"\n  | \"okta\"\n  | \"samlp\"\n  | \"waad\"\n  | null;\n\nexport type UserType = {\n  sId: string;\n  id: ModelId;\n  createdAt: number;\n  provider: UserProviderType;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string | null;\n  fullName: string;\n  image: string | null;\n};\n\nexport type UserTypeWithWorkspaces = UserType & {\n  workspaces: WorkspaceType[];\n};\n\nexport type UserTypeWithExtensionWorkspaces = UserType & {\n  workspaces: ExtensionWorkspaceType[];\n};\n\nexport type UserMetadataType = {\n  key: string;\n  value: string;\n};\n\nexport function formatUserFullName(user?: {\n  firstName?: string;\n  lastName?: string | null;\n}) {\n  return user\n    ? [user.firstName, user.lastName].filter(Boolean).join(\" \")\n    : null;\n}\n\nexport function isAdmin(\n  owner: WorkspaceType | null\n): owner is WorkspaceType & { role: \"admin\" } {\n  if (!owner) {\n    return false;\n  }\n  switch (owner.role) {\n    case \"admin\":\n      return true;\n    case \"builder\":\n    case \"user\":\n    case \"none\":\n      return false;\n    default:\n      assertNever(owner.role);\n  }\n}\n\nexport function isBuilder(\n  owner: WorkspaceType | null\n): owner is WorkspaceType & { role: \"builder\" | \"admin\" } {\n  if (!owner) {\n    return false;\n  }\n  switch (owner.role) {\n    case \"admin\":\n    case \"builder\":\n      return true;\n    case \"user\":\n    case \"none\":\n      return false;\n    default:\n      assertNever(owner.role);\n  }\n}\n\nexport function isUser(\n  owner: WorkspaceType | null\n): owner is WorkspaceType & { role: \"user\" | \"builder\" | \"admin\" } {\n  if (!owner) {\n    return false;\n  }\n  switch (owner.role) {\n    case \"admin\":\n    case \"builder\":\n    case \"user\":\n      return true;\n    case \"none\":\n      return false;\n    default:\n      assertNever(owner.role);\n  }\n}\n\nexport function isOnlyUser(\n  owner: WorkspaceType | null\n): owner is WorkspaceType & { role: \"user\" } {\n  if (!owner) {\n    return false;\n  }\n  return owner.role === \"user\";\n}\n\nexport function isOnlyBuilder(\n  owner: WorkspaceType | null\n): owner is WorkspaceType & { role: \"builder\" } {\n  if (!owner) {\n    return false;\n  }\n  return owner.role === \"builder\";\n}\n\nexport function isOnlyAdmin(\n  owner: WorkspaceType | null\n): owner is WorkspaceType & { role: \"admin\" } {\n  if (!owner) {\n    return false;\n  }\n  return owner.role === \"admin\";\n}\n\nconst DustUserEmailHeader = \"x-api-user-email\";\n\nexport function getUserEmailFromHeaders(headers: {\n  [key: string]: string | string[] | undefined;\n}) {\n  const email = headers[DustUserEmailHeader];\n  if (typeof email === \"string\") {\n    return email;\n  }\n\n  return undefined;\n}\n\nexport function getHeaderFromUserEmail(email: string | undefined) {\n  if (!email) {\n    return undefined;\n  }\n\n  return {\n    [DustUserEmailHeader]: email,\n  };\n}\n","import * as t from \"io-ts\";\nimport { NonEmptyString } from \"io-ts-types\";\n\nimport { ModelId } from \"../shared/model_id\";\nimport { ActiveRoleSchema, ActiveRoleType } from \"./user\";\n\nexport type MembershipInvitationType = {\n  sId: string;\n  id: ModelId;\n  status: \"pending\" | \"consumed\" | \"revoked\";\n  inviteEmail: string;\n  inviteLink: string;\n  initialRole: ActiveRoleType;\n  createdAt: number;\n};\n\n// Types for the invite form in Poke.\n\nexport const InviteMemberFormSchema = t.type({\n  email: NonEmptyString,\n  role: ActiveRoleSchema,\n});\n\nexport type InviteMemberFormType = t.TypeOf<typeof InviteMemberFormSchema>;\n","export const MEMBERSHIP_ROLE_TYPES = [\"admin\", \"builder\", \"user\"] as const;\nexport type MembershipRoleType = (typeof MEMBERSHIP_ROLE_TYPES)[number];\nexport function isMembershipRoleType(\n  value: unknown\n): value is MembershipRoleType {\n  return MEMBERSHIP_ROLE_TYPES.includes(value as MembershipRoleType);\n}\n","import * as t from \"io-ts\";\nimport { NonEmptyString } from \"io-ts-types/lib/NonEmptyString\";\nimport { NumberFromString } from \"io-ts-types/lib/NumberFromString\";\n\nexport const MAX_MESSAGE_TIMEFRAMES = [\"day\", \"lifetime\"] as const;\nexport type MaxMessagesTimeframeType = (typeof MAX_MESSAGE_TIMEFRAMES)[number];\n\nexport function isMaxMessagesTimeframeType(\n  value: string\n): value is MaxMessagesTimeframeType {\n  return (MAX_MESSAGE_TIMEFRAMES as unknown as string[]).includes(value);\n}\n\n/**\n *  Expresses limits for usage of the product\n * Any positive number enforces the limit, -1 means no limit.\n * */\nexport type ManageDataSourcesLimitsType = {\n  isConfluenceAllowed: boolean;\n  isSlackAllowed: boolean;\n  isNotionAllowed: boolean;\n  isGoogleDriveAllowed: boolean;\n  isGithubAllowed: boolean;\n  isIntercomAllowed: boolean;\n  isWebCrawlerAllowed: boolean;\n};\nexport type LimitsType = {\n  assistant: {\n    isSlackBotAllowed: boolean;\n    maxMessages: number;\n    maxMessagesTimeframe: MaxMessagesTimeframeType;\n  };\n  connections: ManageDataSourcesLimitsType;\n  dataSources: {\n    count: number;\n    documents: {\n      count: number;\n      sizeMb: number;\n    };\n  };\n  users: {\n    maxUsers: number;\n  };\n  vaults: {\n    maxVaults: number;\n  };\n  canUseProduct: boolean;\n};\n\nexport const SUBSCRIPTION_STATUSES = [\n  \"active\",\n  \"ended\",\n  \"ended_backend_only\", // Ended on the backend but not yet propagated to Stripe\n] as const;\nexport type SubscriptionStatusType = (typeof SUBSCRIPTION_STATUSES)[number];\n\nexport type PlanType = {\n  code: string;\n  name: string;\n  limits: LimitsType;\n  trialPeriodDays: number;\n};\n\nexport type SubscriptionType = {\n  // `null` for FREE_NO_PLAN which is the default plan when there is no Subscription in DB, which\n  // means the workspace is not accessible.\n  sId: string | null;\n  status: SubscriptionStatusType;\n  trialing: boolean;\n  // `null` means that this is a free plan. Otherwise, it's a paid plan.\n  stripeSubscriptionId: string | null;\n  startDate: number | null;\n  endDate: number | null;\n  paymentFailingSince: number | null;\n  plan: PlanType;\n  requestCancelAt: number | null;\n};\n\nexport type BillingPeriod = \"monthly\" | \"yearly\";\n\nexport type SubscriptionPerSeatPricing = {\n  seatPrice: number;\n  seatCurrency: string;\n  billingPeriod: BillingPeriod;\n  quantity: number;\n};\n\nexport const CreatePlanFormSchema = t.type({\n  code: NonEmptyString,\n  name: NonEmptyString,\n  isSlackbotAllowed: t.boolean,\n  isSlackAllowed: t.boolean,\n  isNotionAllowed: t.boolean,\n  isGoogleDriveAllowed: t.boolean,\n  isGithubAllowed: t.boolean,\n  isIntercomAllowed: t.boolean,\n  isConfluenceAllowed: t.boolean,\n  isWebCrawlerAllowed: t.boolean,\n  maxMessages: t.union([t.number, NumberFromString]),\n  maxMessagesTimeframe: t.keyof({\n    day: null,\n    lifetime: null,\n  }),\n  dataSourcesCount: t.union([t.number, NumberFromString]),\n  dataSourcesDocumentsCount: t.union([t.number, NumberFromString]),\n  dataSourcesDocumentsSizeMb: t.union([t.number, NumberFromString]),\n  maxUsers: t.union([t.number, NumberFromString]),\n  maxVaults: t.union([t.number, NumberFromString]),\n});\n\nexport type CreatePlanFormType = t.TypeOf<typeof CreatePlanFormSchema>;\n\nexport const EnterpriseUpgradeFormSchema = t.type({\n  stripeSubscriptionId: NonEmptyString,\n  planCode: NonEmptyString,\n});\n\nexport type EnterpriseUpgradeFormType = t.TypeOf<\n  typeof EnterpriseUpgradeFormSchema\n>;\n","import { ModelId } from \"../shared/model_id\";\nimport { RoleType } from \"./user\";\n\n// Supported operations for resource permissions.\nexport const SUPPORTED_OPERATIONS = [\"admin\", \"read\", \"write\"] as const;\n\nexport type PermissionType = (typeof SUPPORTED_OPERATIONS)[number];\n\n/**\n * Represents permissions assigned to a specific group.\n *\n * @property id - Unique identifier for the group (ModelId type)\n * @property permissions - Array of permissions granted to the group\n */\ntype GroupPermission = {\n  id: ModelId;\n  permissions: PermissionType[];\n};\n\n/**\n * Represents permissions assigned to a specific role.\n *\n * @property role - The type of role (RoleType)\n * @property permissions - Array of permissions granted to the role\n */\ntype RolePermission = {\n  role: RoleType;\n  permissions: PermissionType[];\n};\n\n/**\n * Defines group-based permissions for a resource.\n * Used when access control is managed through group assignments.\n */\nexport type GroupResourcePermissions = {\n  groups: GroupPermission[];\n};\n\n/**\n * Defines combined group and role-based permissions for a resource.\n */\nexport type CombinedResourcePermissions = {\n  groups: GroupPermission[];\n  roles: RolePermission[];\n  workspaceId: ModelId;\n};\n\n/**\n * Represents the complete permission configuration for a resource.\n * Can be either:\n * - Group-based permissions only\n * - Both group and role-based permissions combined\n */\nexport type ResourcePermission =\n  | GroupResourcePermissions\n  | CombinedResourcePermissions;\n\n/**\n * Type guard to determine if a permission configuration includes role-based access control.\n *\n * @param resourcePermission - The resource permission configuration to check\n * @returns True if the configuration includes role-based permissions\n */\nexport function hasRolePermissions(\n  resourcePermission: ResourcePermission\n): resourcePermission is CombinedResourcePermissions {\n  return \"roles\" in resourcePermission;\n}\n","export const DocumentViewRawContentKey = \"viewRawContent\";\n\nexport const DocumentDeletionKey = \"deleteDocumentOrTable\";\n","export const UNIQUE_SPACE_KINDS = [\n  \"global\",\n  \"system\",\n  \"conversations\",\n] as const;\n\nconst SPACE_KINDS = [...UNIQUE_SPACE_KINDS, \"public\", \"regular\"] as const;\n\nexport type SpaceKind = (typeof SPACE_KINDS)[number];\n\nexport type UniqueSpaceKind = (typeof UNIQUE_SPACE_KINDS)[number];\nexport type SpaceType = {\n  createdAt: number;\n  groupIds: string[];\n  isRestricted: boolean;\n  kind: SpaceKind;\n  name: string;\n  sId: string;\n  updatedAt: number;\n};\n\nexport function isUniqueSpaceKind(kind: SpaceKind): kind is UniqueSpaceKind {\n  return UNIQUE_SPACE_KINDS.includes(kind as UniqueSpaceKind);\n}\n","import { ModelId } from \"../shared/model_id\";\nimport { DataSourceViewSelectionConfigurations } from \"./data_source_view\";\nimport { ModelIdType, ModelProviderIdType } from \"./lib/assistant\";\nimport { SpaceType } from \"./space\";\n\ntype TrackerStatus = \"active\" | \"inactive\";\n\nexport type TrackerConfigurationType = {\n  id: ModelId;\n  sId: string;\n  name: string;\n  status: TrackerStatus;\n  description: string | null;\n  modelId: ModelIdType;\n  providerId: ModelProviderIdType;\n  temperature: number;\n  prompt: string | null;\n  frequency: string;\n  skipEmptyEmails: boolean;\n  recipients: string[];\n  space: SpaceType;\n  maintainedDataSources: TrackerDataSourceConfigurationType[];\n  watchedDataSources: TrackerDataSourceConfigurationType[];\n  generations?: TrackerGenerationToProcess[];\n  createdAt: number;\n};\n\nexport type TrackerDataSourceConfigurationType = {\n  dataSourceViewId: string;\n  filter: {\n    parents: {\n      in: string[];\n      not: string[];\n    } | null;\n  };\n};\n\nexport type TrackerConfigurationStateType = {\n  name: string | null;\n  status: TrackerStatus;\n  nameError: string | null;\n  description: string | null;\n  descriptionError: string | null;\n  prompt: string | null;\n  promptError: string | null;\n  frequency: string;\n  frequencyError: string | null;\n  skipEmptyEmails: boolean;\n  recipients: string | null;\n  recipientsError: string | null;\n  modelId: ModelIdType;\n  providerId: ModelProviderIdType;\n  temperature: number;\n  maintainedDataSources: DataSourceViewSelectionConfigurations;\n  watchedDataSources: DataSourceViewSelectionConfigurations;\n};\n\nexport const TRACKER_FREQUENCIES = [\n  { label: \"Daily (Mon-Fri)\", value: \"0 17 * * 1-5\" },\n  { label: \"Weekly on Monday\", value: \"0 17 * * 1\" },\n  { label: \"Weekly on Tuesday\", value: \"0 17 * * 2\" },\n  { label: \"Weekly on Wednesday\", value: \"0 17 * * 3\" },\n  { label: \"Weekly on Thursday\", value: \"0 17 * * 4\" },\n  { label: \"Weekly on Friday\", value: \"0 17 * * 5\" },\n];\n\nexport type TrackerIdWorkspaceId = {\n  trackerId: number;\n  workspaceId: string;\n};\n\nexport type TrackerDataSource = {\n  id: ModelId;\n  name: string;\n  dustAPIProjectId: string;\n  dustAPIDataSourceId: string;\n};\n\nexport type TrackerGenerationToProcess = {\n  id: ModelId;\n  content: string;\n  thinking: string | null;\n  documentId: string;\n  dataSource: TrackerDataSource;\n  maintainedDocumentDataSource: TrackerDataSource | null;\n  maintainedDocumentId: string | null;\n};\n","import {\n  CrawlingFrequency,\n  DepthOption,\n  WebCrawlerConfigurationType,\n} from \"../connectors/webcrawler\";\n\nexport type WebsiteFormState = {\n  url: string;\n  name: string;\n  maxPages: number | null;\n  depth: DepthOption;\n  crawlMode: \"child\" | \"website\";\n  crawlFrequency: CrawlingFrequency;\n  headers: { key: string; value: string }[];\n  errors?: {\n    url?: string;\n    name?: string;\n  };\n};\n\nexport type WebsiteFormAction =\n  | {\n      [K in keyof Omit<WebsiteFormState, \"errors\">]: {\n        type: \"SET_FIELD\";\n        field: K;\n        value: WebsiteFormState[K];\n      };\n    }[keyof Omit<WebsiteFormState, \"errors\">]\n  | {\n      type: \"SET_ERROR\";\n      field: keyof WebsiteFormState[\"errors\"];\n      value: string | undefined;\n    }\n  | {\n      type: \"RESET\";\n      config?: WebCrawlerConfigurationType | null;\n      name?: string;\n    }\n  | { type: \"VALIDATE\" };\n\nexport const FREQUENCY_DISPLAY_TEXT: Record<CrawlingFrequency, string> = {\n  never: \"Never\",\n  daily: \"Every day\",\n  weekly: \"Every week\",\n  monthly: \"Every month\",\n};\n\nexport const DEPTH_DISPLAY_TEXT: Record<DepthOption, string> = {\n  0: \"0 level\",\n  1: \"1 level\",\n  2: \"2 levels\",\n  3: \"3 levels\",\n  4: \"4 levels\",\n  5: \"5 levels\",\n};\n","import { assertNever } from \"../shared/utils/assert_never\";\n\nexport interface WorkspaceDomain {\n  domain: string;\n  domainAutoJoinEnabled: boolean;\n}\n\nexport interface WorkspaceEnterpriseConnection {\n  name: string;\n  strategy: SupportedEnterpriseConnectionStrategies;\n}\n\nexport type SupportedEnterpriseConnectionStrategies = \"okta\" | \"samlp\" | \"waad\";\nexport const supportedEnterpriseConnectionStrategies: SupportedEnterpriseConnectionStrategies[] =\n  [\"okta\", \"samlp\", \"waad\"];\n\nexport const isSupportedEnterpriseConnectionStrategy = (\n  strategy: string\n): strategy is SupportedEnterpriseConnectionStrategies =>\n  supportedEnterpriseConnectionStrategies.includes(\n    strategy as SupportedEnterpriseConnectionStrategies\n  );\n\nexport function connectionStrategyToHumanReadable(\n  strategy: SupportedEnterpriseConnectionStrategies\n) {\n  switch (strategy) {\n    case \"okta\":\n      return \"Okta\";\n\n    case \"samlp\":\n      return \"SAML\";\n\n    case \"waad\":\n      return \"Microsoft Entra ID\";\n\n    default:\n      assertNever(strategy);\n  }\n}\n","import {\n  ConnectionCredentials,\n  CredentialsProvider,\n  OauthAPIGetCredentialsResponse,\n  OauthAPIPostCredentialsResponse,\n  OAuthConnectionType,\n  OAuthProvider,\n} from \"../oauth/lib\";\nimport { LoggerInterface } from \"../shared/logger\";\nimport { Err, Ok, Result } from \"../shared/result\";\n\nexport type OAuthAPIError = {\n  message: string;\n  code: string;\n};\n\nexport type MigratedCredentialsType = {\n  redirect_uri: string;\n  access_token_expiry?: number;\n  authorization_code?: string;\n  access_token: string;\n  refresh_token?: string;\n  raw_json: unknown;\n};\n\nexport function isOAuthAPIError(obj: unknown): obj is OAuthAPIError {\n  return (\n    typeof obj === \"object\" &&\n    obj !== null &&\n    \"message\" in obj &&\n    typeof obj.message === \"string\" &&\n    \"code\" in obj &&\n    typeof obj.code === \"string\"\n  );\n}\n\nexport type OAuthAPIResponse<T> = Result<T, OAuthAPIError>;\n\nexport class OAuthAPI {\n  _logger: LoggerInterface;\n  _url: string;\n  _apiKey: string | null;\n\n  constructor(\n    config: { url: string; apiKey: string | null },\n    logger: LoggerInterface\n  ) {\n    this._url = config.url;\n    this._logger = logger;\n    this._apiKey = config.apiKey;\n  }\n\n  apiUrl() {\n    return this._url;\n  }\n\n  async createConnection({\n    provider,\n    metadata,\n    migratedCredentials,\n    relatedCredential,\n  }: {\n    provider: OAuthProvider;\n    metadata: Record<string, unknown> | null;\n    migratedCredentials?: MigratedCredentialsType;\n    relatedCredential?: {\n      content: Record<string, unknown>;\n      metadata: {\n        workspace_id: string;\n        user_id: string;\n      };\n    };\n  }): Promise<OAuthAPIResponse<{ connection: OAuthConnectionType }>> {\n    const body: {\n      provider: OAuthProvider;\n      metadata: Record<string, unknown> | null;\n      migrated_credentials?: MigratedCredentialsType;\n      related_credential?: {\n        content: Record<string, unknown>;\n        metadata: {\n          workspace_id: string;\n          user_id: string;\n        };\n      };\n    } = {\n      provider,\n      metadata,\n    };\n\n    if (migratedCredentials) {\n      body.migrated_credentials = migratedCredentials;\n    }\n\n    if (relatedCredential) {\n      body.related_credential = relatedCredential;\n    }\n\n    const response = await this._fetchWithError(`${this._url}/connections`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    });\n    return this._resultFromResponse(response);\n  }\n\n  async finalizeConnection({\n    provider,\n    connectionId,\n    code,\n    redirectUri,\n  }: {\n    provider: OAuthProvider;\n    connectionId: string;\n    code: string;\n    redirectUri: string;\n  }): Promise<OAuthAPIResponse<{ connection: OAuthConnectionType }>> {\n    const response = await this._fetchWithError(\n      `${this._url}/connections/${connectionId}/finalize`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          provider,\n          code,\n          redirect_uri: redirectUri,\n        }),\n      }\n    );\n    return this._resultFromResponse(response);\n  }\n\n  async getAccessToken({\n    provider,\n    connectionId,\n  }: {\n    provider: OAuthProvider;\n    connectionId: string;\n  }): Promise<\n    OAuthAPIResponse<{\n      connection: OAuthConnectionType;\n      access_token: string;\n      access_token_expiry: number | null;\n      scrubbed_raw_json: unknown;\n    }>\n  > {\n    const response = await this._fetchWithError(\n      `${this._url}/connections/${connectionId}/access_token`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          provider,\n        }),\n      }\n    );\n    return this._resultFromResponse(response);\n  }\n\n  async postCredentials({\n    provider,\n    userId,\n    workspaceId,\n    credentials,\n  }: {\n    provider: CredentialsProvider;\n    userId: string;\n    workspaceId: string;\n    credentials: ConnectionCredentials;\n  }): Promise<OAuthAPIResponse<OauthAPIPostCredentialsResponse>> {\n    const response = await this._fetchWithError(`${this._url}/credentials`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        provider,\n        metadata: {\n          user_id: userId,\n          workspace_id: workspaceId,\n        },\n        content: credentials,\n      }),\n    });\n    return this._resultFromResponse(response);\n  }\n\n  async getCredentials({\n    credentialsId,\n  }: {\n    credentialsId: string;\n  }): Promise<OAuthAPIResponse<OauthAPIGetCredentialsResponse>> {\n    const response = await this._fetchWithError(\n      `${this._url}/credentials/${credentialsId}`\n    );\n    return this._resultFromResponse(response);\n  }\n\n  private async _fetchWithError(\n    url: string,\n    init?: RequestInit\n  ): Promise<Result<{ response: Response; duration: number }, OAuthAPIError>> {\n    const now = Date.now();\n    const params = { ...init };\n    if (this._apiKey) {\n      params.headers = {\n        ...params.headers,\n        Authorization: `Bearer ${this._apiKey}`,\n      };\n    }\n    try {\n      const res = await fetch(url, params);\n      return new Ok({ response: res, duration: Date.now() - now });\n    } catch (e) {\n      const duration = Date.now() - now;\n      const err: OAuthAPIError = {\n        code: \"unexpected_network_error\",\n        message: `Unexpected network error from OAuthAPI: ${e}`,\n      };\n      this._logger.error(\n        {\n          url,\n          duration,\n          oAuthError: err,\n          error: e,\n        },\n        \"OAuthAPI error\"\n      );\n      return new Err(err);\n    }\n  }\n\n  private async _resultFromResponse<T>(\n    res: Result<\n      {\n        response: Response;\n        duration: number;\n      },\n      OAuthAPIError\n    >\n  ): Promise<OAuthAPIResponse<T>> {\n    if (res.isErr()) {\n      return res;\n    }\n\n    // We get the text and attempt to parse so that we can log the raw text in case of error (the\n    // body is already consumed by response.json() if used otherwise).\n    const text = await res.value.response.text();\n\n    let json = null;\n    try {\n      json = JSON.parse(text);\n    } catch (e) {\n      const err: OAuthAPIError = {\n        code: \"unexpected_response_format\",\n        message: `Unexpected response format from OAuthAPI: ${e}`,\n      };\n\n      this._logger.error(\n        {\n          oAuthError: err,\n          parseError: e,\n          rawText: text,\n          status: res.value.response.status,\n          url: res.value.response.url,\n          duration: res.value.duration,\n        },\n        \"OAuthAPI error\"\n      );\n      return new Err(err);\n    }\n\n    if (!res.value.response.ok) {\n      const err = json?.error;\n      if (isOAuthAPIError(err)) {\n        this._logger.error(\n          {\n            oAuthError: err,\n            status: res.value.response.status,\n            url: res.value.response.url,\n            duration: res.value.duration,\n          },\n          \"OAuthAPI error\"\n        );\n        return new Err(err);\n      } else {\n        const err: OAuthAPIError = {\n          code: \"unexpected_error_format\",\n          message: \"Unexpected error format from OAuthAPI\",\n        };\n        this._logger.error(\n          {\n            oAuthError: err,\n            json,\n            status: res.value.response.status,\n            url: res.value.response.url,\n            duration: res.value.duration,\n          },\n          \"OAuthAPI error\"\n        );\n        return new Err(err);\n      }\n    } else {\n      const err = json?.error;\n      const res = json?.response;\n\n      if (err && isOAuthAPIError(err)) {\n        this._logger.error(\n          {\n            oauthError: err,\n            json,\n            status: res.value.response.status,\n            url: res.value.response.url,\n            duration: res.value.duration,\n          },\n          \"OAuthAPI error\"\n        );\n        return new Err(err);\n      } else if (res) {\n        return new Ok(res);\n      } else {\n        const err: OAuthAPIError = {\n          code: \"unexpected_response_format\",\n          message: \"Unexpected response format from OAuthAPI\",\n        };\n        this._logger.error(\n          {\n            oAuthError: err,\n            json,\n            status: res.value.response.status,\n            url: res.value.response.url,\n            duration: res.value.duration,\n          },\n          \"OAuthAPI error\"\n        );\n        return new Err(err);\n      }\n    }\n  }\n}\n","import { OAuthConnectionType, OAuthProvider } from \"../../oauth/lib\";\nimport { OAuthAPI, OAuthAPIError } from \"../../oauth/oauth_api\";\nimport { LoggerInterface } from \"../../shared/logger\";\nimport { Ok, Result } from \"../../shared/result\";\n\nconst OAUTH_ACCESS_TOKEN_CACHE_TTL = 1000 * 60 * 5;\n\nconst CACHE = new Map<\n  string,\n  {\n    connection: OAuthConnectionType;\n    access_token: string;\n    access_token_expiry: number | null;\n    scrubbed_raw_json: unknown;\n    local_expiry: number;\n  }\n>();\n\nexport async function getOAuthConnectionAccessToken({\n  config,\n  logger,\n  provider,\n  connectionId,\n}: {\n  config: { url: string; apiKey: string | null };\n  logger: LoggerInterface;\n  provider: OAuthProvider;\n  connectionId: string;\n}): Promise<\n  Result<\n    {\n      connection: OAuthConnectionType;\n      access_token: string;\n      access_token_expiry: number | null;\n      scrubbed_raw_json: unknown;\n    },\n    OAuthAPIError\n  >\n> {\n  const cached = CACHE.get(connectionId);\n\n  if (cached && cached.local_expiry > Date.now()) {\n    return new Ok(cached);\n  }\n\n  const res = await new OAuthAPI(config, logger).getAccessToken({\n    provider,\n    connectionId,\n  });\n\n  if (res.isErr()) {\n    return res;\n  }\n\n  CACHE.set(connectionId, {\n    local_expiry: Date.now() + OAUTH_ACCESS_TOKEN_CACHE_TTL,\n    ...res.value,\n  });\n\n  return res;\n}\n","import { LoggerInterface } from \"../../shared/logger\";\nimport { Result } from \"../../shared/result\";\nimport { OauthAPIGetCredentialsResponse } from \"../lib\";\nimport { OAuthAPI, OAuthAPIError } from \"../oauth_api\";\n\nexport async function getConnectionCredentials({\n  config,\n  logger,\n  credentialsId,\n}: {\n  config: { url: string; apiKey: string | null };\n  logger: LoggerInterface;\n  credentialsId: string;\n}): Promise<Result<OauthAPIGetCredentialsResponse, OAuthAPIError>> {\n  const res = await new OAuthAPI(config, logger).getCredentials({\n    credentialsId,\n  });\n\n  if (res.isErr()) {\n    return res;\n  }\n\n  return res;\n}\n","import * as t from \"io-ts\";\n\nexport const OAUTH_USE_CASES = [\n  \"connection\",\n  \"labs_transcripts\",\n  \"platform_actions\",\n] as const;\n\nexport type OAuthUseCase = (typeof OAUTH_USE_CASES)[number];\n\nexport function isOAuthUseCase(obj: unknown): obj is OAuthUseCase {\n  return OAUTH_USE_CASES.includes(obj as OAuthUseCase);\n}\n\nexport const OAUTH_PROVIDERS = [\n  \"confluence\",\n  \"github\",\n  \"google_drive\",\n  \"intercom\",\n  \"notion\",\n  \"slack\",\n  \"gong\",\n  \"microsoft\",\n  \"zendesk\",\n  \"salesforce\",\n] as const;\n\nexport type OAuthProvider = (typeof OAUTH_PROVIDERS)[number];\n\nexport function isOAuthProvider(obj: unknown): obj is OAuthProvider {\n  return OAUTH_PROVIDERS.includes(obj as OAuthProvider);\n}\n\nexport type OAuthConnectionType = {\n  connection_id: string;\n  created: number;\n  metadata: Record<string, unknown>;\n  provider: OAuthProvider;\n  status: \"pending\" | \"finalized\";\n};\n\nexport function isOAuthConnectionType(\n  obj: unknown\n): obj is OAuthConnectionType {\n  const connection = obj as OAuthConnectionType;\n  return (\n    typeof connection.connection_id === \"string\" &&\n    typeof connection.created === \"number\" &&\n    isOAuthProvider(connection.provider) &&\n    (connection.status === \"pending\" || connection.status === \"finalized\")\n  );\n}\n\n// OAuth Providers utils\n\nexport function isValidZendeskSubdomain(s: unknown): s is string {\n  return (\n    typeof s === \"string\" && /^[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?$/.test(s)\n  );\n}\n\nexport function isValidSalesforceDomain(s: unknown): s is string {\n  return (\n    typeof s === \"string\" &&\n    s.startsWith(\"https://\") &&\n    s.endsWith(\".salesforce.com\")\n  );\n}\n\nexport function isValidSalesforceClientId(s: unknown): s is string {\n  return typeof s === \"string\" && s.trim().length > 0;\n}\n\nexport function isValidSalesforceClientSecret(s: unknown): s is string {\n  return typeof s === \"string\" && s.trim().length > 0;\n}\n\n// Credentials Providers\n\nexport const PROVIDERS_WITH_WORKSPACE_CONFIGURATIONS = [\n  \"gong\",\n  \"modjo\",\n] as const;\n\nexport type ProvidersWithWorkspaceConfigurations =\n  (typeof PROVIDERS_WITH_WORKSPACE_CONFIGURATIONS)[number];\n\nexport const CREDENTIALS_PROVIDERS = [\n  \"snowflake\",\n  \"modjo\",\n  \"bigquery\",\n  \"salesforce\",\n] as const;\nexport type CredentialsProvider = (typeof CREDENTIALS_PROVIDERS)[number];\n\nexport function isCredentialProvider(obj: unknown): obj is CredentialsProvider {\n  return CREDENTIALS_PROVIDERS.includes(obj as CredentialsProvider);\n}\n\nexport function isProviderWithWorkspaceConfiguration(\n  obj: unknown\n): obj is ProvidersWithWorkspaceConfigurations {\n  return PROVIDERS_WITH_WORKSPACE_CONFIGURATIONS.includes(\n    obj as ProvidersWithWorkspaceConfigurations\n  );\n}\n\n// Credentials\n\nexport const SnowflakeCredentialsSchema = t.type({\n  username: t.string,\n  password: t.string,\n  account: t.string,\n  role: t.string,\n  warehouse: t.string,\n});\nexport type SnowflakeCredentials = t.TypeOf<typeof SnowflakeCredentialsSchema>;\n\nexport const CheckBigQueryCredentialsSchema = t.type({\n  type: t.string,\n  project_id: t.string,\n  private_key_id: t.string,\n  private_key: t.string,\n  client_email: t.string,\n  client_id: t.string,\n  auth_uri: t.string,\n  token_uri: t.string,\n  auth_provider_x509_cert_url: t.string,\n  client_x509_cert_url: t.string,\n  universe_domain: t.string,\n});\n\nexport type CheckBigQueryCredentials = t.TypeOf<\n  typeof CheckBigQueryCredentialsSchema\n>;\n\nexport const BigQueryCredentialsWithLocationSchema = t.type({\n  type: t.string,\n  project_id: t.string,\n  private_key_id: t.string,\n  private_key: t.string,\n  client_email: t.string,\n  client_id: t.string,\n  auth_uri: t.string,\n  token_uri: t.string,\n  auth_provider_x509_cert_url: t.string,\n  client_x509_cert_url: t.string,\n  universe_domain: t.string,\n  location: t.string,\n});\n\nexport type BigQueryCredentialsWithLocation = t.TypeOf<\n  typeof BigQueryCredentialsWithLocationSchema\n>;\n\nexport const ApiKeyCredentialsSchema = t.type({\n  api_key: t.string,\n});\nexport type ModjoCredentials = t.TypeOf<typeof ApiKeyCredentialsSchema>;\n\nexport const SalesforceCredentialsSchema = t.type({\n  client_id: t.string,\n  client_secret: t.string,\n});\nexport type SalesforceCredentials = t.TypeOf<\n  typeof SalesforceCredentialsSchema\n>;\n\nexport type ConnectionCredentials =\n  | SnowflakeCredentials\n  | ModjoCredentials\n  | BigQueryCredentialsWithLocation\n  | SalesforceCredentials;\n\nexport function isSnowflakeCredentials(\n  credentials: ConnectionCredentials\n): credentials is SnowflakeCredentials {\n  return \"username\" in credentials && \"password\" in credentials;\n}\n\nexport function isModjoCredentials(\n  credentials: ConnectionCredentials\n): credentials is ModjoCredentials {\n  return \"api_key\" in credentials;\n}\n\nexport function isBigQueryWithLocationCredentials(\n  credentials: ConnectionCredentials\n): credentials is BigQueryCredentialsWithLocation {\n  return (\n    \"type\" in credentials &&\n    \"project_id\" in credentials &&\n    \"location\" in credentials\n  );\n}\n\nexport function isSalesforceCredentials(\n  credentials: ConnectionCredentials\n): credentials is SalesforceCredentials {\n  return \"client_id\" in credentials && \"client_secret\" in credentials;\n}\n\nexport type OauthAPIPostCredentialsResponse = {\n  credential: {\n    credential_id: string;\n    provider: CredentialsProvider;\n    created: number;\n  };\n};\n\nexport type OauthAPIGetCredentialsResponse = {\n  credential: {\n    credential_id: string;\n    created: number;\n    provider: CredentialsProvider;\n    metadata: {\n      workspace_id: string;\n      user_id: string;\n    };\n    content: ConnectionCredentials;\n  };\n};\n","import { LightWorkspaceType } from \"../../front/user\";\nimport {\n  isOAuthConnectionType,\n  OAuthConnectionType,\n  OAuthProvider,\n  OAuthUseCase,\n} from \"../../oauth/lib\";\nimport { Err, Ok, Result } from \"../../shared/result\";\n\nexport async function setupOAuthConnection({\n  dustClientFacingUrl,\n  owner,\n  provider,\n  useCase,\n  extraConfig,\n}: {\n  dustClientFacingUrl: string;\n  owner: LightWorkspaceType;\n  provider: OAuthProvider;\n  useCase: OAuthUseCase;\n  extraConfig: Record<string, string>;\n}): Promise<Result<OAuthConnectionType, Error>> {\n  return new Promise((resolve) => {\n    let url = `${dustClientFacingUrl}/w/${owner.sId}/oauth/${provider}/setup?useCase=${useCase}`;\n    if (extraConfig) {\n      url += `&extraConfig=${encodeURIComponent(JSON.stringify(extraConfig))}`;\n    }\n    const oauthPopup = window.open(url);\n    let authComplete = false;\n\n    const popupMessageEventListener = (event: MessageEvent) => {\n      if (event.origin !== window.location.origin) {\n        return;\n      }\n\n      if (event.data.type === \"connection_finalized\") {\n        authComplete = true;\n        const { error, connection } = event.data;\n        if (error) {\n          resolve(new Err(new Error(error)));\n        } else if (connection && isOAuthConnectionType(connection)) {\n          resolve(new Ok(connection));\n        } else {\n          resolve(\n            new Err(\n              new Error(\"Invalid connection data received from auth window\")\n            )\n          );\n        }\n        window.removeEventListener(\"message\", popupMessageEventListener);\n        oauthPopup?.close();\n      }\n    };\n\n    window.addEventListener(\"message\", popupMessageEventListener);\n\n    const checkPopupStatus = setInterval(() => {\n      if (oauthPopup && oauthPopup.closed) {\n        window.removeEventListener(\"message\", popupMessageEventListener);\n        clearInterval(checkPopupStatus);\n        setTimeout(() => {\n          if (!authComplete) {\n            resolve(\n              new Err(new Error(\"User closed the window before auth completed\"))\n            );\n          }\n        }, 100);\n      }\n    }, 100);\n  });\n}\n","import { StatsD } from \"hot-shots\";\n\nlet statsDClient: StatsD | undefined = undefined;\n\nexport function getStatsDClient(): StatsD {\n  if (!statsDClient) {\n    statsDClient = new StatsD();\n  }\n  return statsDClient;\n}\n","import { createClient } from \"redis\";\n\nimport { getStatsDClient } from \"./statsd\";\n\nexport type RedisUsageTagsType = \"cache_with_redis\" | \"rate_limiter\";\n\nexport async function redisClient({\n  origin,\n  redisUri,\n}: {\n  origin: RedisUsageTagsType;\n  redisUri: string;\n}) {\n  const statsDClient = getStatsDClient();\n\n  const client = createClient({\n    url: redisUri,\n  });\n  client.on(\"error\", (err) => console.log(\"Redis Client Error\", err));\n  client.on(\"connect\", () => {\n    statsDClient.increment(\"redis.connection.count\", 1, [origin]);\n  });\n  client.on(\"end\", () => {\n    statsDClient.decrement(\"redis.connection.count\", 1, [origin]);\n  });\n\n  await client.connect();\n\n  return client;\n}\n","import { redisClient } from \"../shared/redis_client\";\n\n// JSON-serializable primitive types.\ntype JsonPrimitive = string | number | boolean | null;\n\n// Recursive type to check if a type is JSON-serializable.\ntype RecursiveJsonSerializable<T> = T extends JsonPrimitive\n  ? T\n  : T extends Array<infer U>\n  ? RecursiveJsonSerializable<U>[]\n  : T extends object\n  ? { [K in keyof T]: RecursiveJsonSerializable<T[K]> }\n  : never;\n\n// Helper type to check if a type is 'never'.\ntype IsNever<T> = [T] extends [never] ? true : false;\n\n/**\n * Ensures that a type is strictly JSON-serializable.\n * If T is not JSON-serializable, this type resolves to 'never'.\n */\nexport type JsonSerializable<T> = IsNever<\n  Exclude<RecursiveJsonSerializable<T>, T>\n> extends true\n  ? T\n  : never;\n\ntype CacheableFunction<T, Args extends unknown[]> = (\n  ...args: Args\n) => Promise<T>;\n\ntype KeyResolver<Args extends unknown[]> = (...args: Args) => string;\n\n// Wrapper function to cache the result of a function with Redis.\n// Usage:\n// const cachedFn = cacheWithRedis(fn, (fnArg1, fnArg2, ...) => `${fnArg1}-${fnArg2}`, 60 * 10 * 1000);\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n// if caching big objects, there is a possible race condition (mulitple calls to\n// caching), therefore, we use a lock\nexport function cacheWithRedis<T, Args extends unknown[]>(\n  fn: CacheableFunction<JsonSerializable<T>, Args>,\n  resolver: KeyResolver<Args>,\n  ttlMs: number,\n  redisUri?: string\n): (...args: Args) => Promise<JsonSerializable<T>> {\n  if (ttlMs > 60 * 60 * 24 * 1000) {\n    throw new Error(\"ttlMs should be less than 24 hours\");\n  }\n\n  return async function (...args: Args): Promise<JsonSerializable<T>> {\n    if (!redisUri) {\n      const REDIS_CACHE_URI = process.env.REDIS_CACHE_URI;\n      if (!REDIS_CACHE_URI) {\n        throw new Error(\"REDIS_CACHE_URI is not set\");\n      }\n      redisUri = REDIS_CACHE_URI;\n    }\n    let redisCli: Awaited<ReturnType<typeof redisClient>> | undefined =\n      undefined;\n\n    const key = `cacheWithRedis-${fn.name}-${resolver(...args)}`;\n\n    try {\n      redisCli = await redisClient({\n        origin: \"cache_with_redis\",\n        redisUri,\n      });\n      let cacheVal = await redisCli.get(key);\n      if (cacheVal) {\n        return JSON.parse(cacheVal) as JsonSerializable<T>;\n      }\n\n      // specific try-finally to ensure unlock is called only after lock\n      try {\n        // if value not found, lock, recheck and set\n        // we avoid locking for the first read to allow parallel calls to redis if the value is set\n        await lock(key);\n        cacheVal = await redisCli.get(key);\n        if (cacheVal) {\n          return JSON.parse(cacheVal) as JsonSerializable<T>;\n        }\n\n        const result = await fn(...args);\n        await redisCli.set(key, JSON.stringify(result), {\n          PX: ttlMs,\n        });\n        return result;\n      } finally {\n        unlock(key);\n      }\n    } finally {\n      if (redisCli) {\n        await redisCli.quit();\n      }\n    }\n  };\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\nconst locks: Record<string, (() => void)[]> = {};\n\nasync function lock(key: string) {\n  return new Promise<void>((resolve) => {\n    if (locks[key]) {\n      locks[key].push(resolve);\n    } else {\n      // use array to allow multiple locks\n      // array set to empty indicates first lock\n      locks[key] = [];\n      resolve();\n    }\n  });\n}\n\nfunction unlock(key: string) {\n  if (locks[key] === undefined) {\n    throw new Error(\"Unreachable: unlock called without lock\");\n  }\n\n  if (locks[key].length === 0) {\n    delete locks[key];\n    return;\n  }\n\n  const unlockFn = locks[key].pop();\n  if (!unlockFn) {\n    throw new Error(\"Unreachable: unlock called without lock\");\n  }\n  unlockFn();\n}\n","import * as child_process from \"child_process\";\n\nimport { LoggerInterface } from \"./logger\";\n\nconst { SLACK_USER_OPERATION_BOT_TOKEN, NODE_ENV } = process.env;\n\n// We might want to delete this, once we make progress out of Sequelize synchronisation.\nexport async function sendInitDbMessage({\n  service,\n  logger,\n}: {\n  service: string;\n  logger: LoggerInterface;\n}) {\n  if (NODE_ENV !== \"production\") {\n    return;\n  }\n\n  if (!SLACK_USER_OPERATION_BOT_TOKEN) {\n    logger.info({}, \"SLACK_USER_OPERATION_BOT_TOKEN is not set\");\n    return;\n  }\n\n  // get the current commit id\n  let commitId = \"unknown\";\n\n  try {\n    commitId = child_process.execSync(\"git rev-parse HEAD\").toString().trim();\n  } catch (error) {\n    logger.error({}, \"Failed to get commit id\");\n  }\n\n  const message = `papertrail: \\`initdb\\` has been initiated. Service: \\`${service}\\`. CommitId: \\`${commitId}\\``;\n\n  try {\n    const res = await fetch(\"https://slack.com/api/chat.postMessage\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${SLACK_USER_OPERATION_BOT_TOKEN}`,\n      },\n      body: JSON.stringify({\n        channel: \"deployments\",\n        text: \"\",\n        blocks: [\n          {\n            type: \"section\",\n            text: {\n              type: \"mrkdwn\",\n              text: message,\n            },\n          },\n        ],\n        mrkdown: true,\n      }),\n    });\n\n    const jsonRes = await res.json();\n    if (!jsonRes.ok) {\n      logger.error(\n        { error: jsonRes.error },\n        \"Failed to send slack message(1).\"\n      );\n    }\n  } catch (error) {\n    logger.error({ error: error }, \"Failed to send slack message(2).\");\n  }\n}\n","import { WorkspaceType } from \"../front/user\";\n\nexport function isDevelopment() {\n  return process.env.NODE_ENV === \"development\";\n}\nexport function isDustWorkspace(w: WorkspaceType) {\n  return w.sId === process.env.PRODUCTION_DUST_WORKSPACE_ID;\n}\n","export const WHITELISTABLE_FEATURES = [\n  \"usage_data_api\",\n  \"okta_enterprise_connection\",\n  \"labs_transcripts\",\n  \"labs_transcripts_full_storage\",\n  \"document_tracker\",\n  \"openai_o1_feature\",\n  \"openai_o1_mini_feature\",\n  \"openai_o1_high_reasoning_feature\",\n  \"openai_o1_custom_assistants_feature\",\n  \"openai_o1_high_reasoning_custom_assistants_feature\",\n  \"deepseek_feature\",\n  \"google_ai_studio_experimental_models_feature\",\n  \"index_private_slack_channel\",\n  \"disable_run_logs\",\n  \"labs_trackers\",\n  \"show_debug_tools\",\n  \"labs_github_actions\",\n  \"deepseek_r1_global_agent_feature\",\n  \"salesforce_feature\",\n  \"advanced_notion_management\",\n  \"attach_from_datasources\",\n  \"force_gdrive_labels_scope\",\n] as const;\nexport type WhitelistableFeature = (typeof WHITELISTABLE_FEATURES)[number];\nexport function isWhitelistableFeature(\n  feature: unknown\n): feature is WhitelistableFeature {\n  return WHITELISTABLE_FEATURES.includes(feature as WhitelistableFeature);\n}\n","import { ConnectorProvider } from \"../front/data_source\";\n\n/**\n * This is a utility type that indicates that we removed all underscores from a string.\n * This is used because we don't want underscores in mime types and remove them from connector providers.\n */\ntype WithoutUnderscores<T extends string> = T extends `${infer A}_${infer B}`\n  ? WithoutUnderscores<`${A}${B}`> // operates recursively to remove all underscores\n  : T;\n\n/**\n * This is a utility type that indicates that we replaced all underscores with dashes in a string.\n * We don't want underscores in mime types but want to type out the type with one: MIME_TYPE.CAT.SOU_PI_NOU\n */\ntype UnderscoreToDash<T extends string> = T extends `${infer A}_${infer B}`\n  ? UnderscoreToDash<`${A}-${B}`> // operates recursively to replace all underscores\n  : T;\n\n/**\n * This function generates mime types for a given provider and resource types.\n * The mime types are in the format `application/vnd.dust.PROVIDER.RESOURCE_TYPE`.\n * Notes:\n * - The underscores in the provider name are stripped in the generated mime type.\n * - The underscores in the resource type are replaced with dashes in the generated mime type.\n */\nfunction generateMimeTypes<\n  P extends ConnectorProvider,\n  T extends Uppercase<string>[]\n>({\n  provider,\n  resourceTypes,\n}: {\n  provider: P;\n  resourceTypes: T;\n}): {\n  [K in T[number]]: `application/vnd.dust.${WithoutUnderscores<P>}.${Lowercase<\n    UnderscoreToDash<K>\n  >}`;\n} {\n  return resourceTypes.reduce(\n    (acc, s) => ({\n      ...acc,\n      [s]: `application/vnd.dust.${provider.replace(\"_\", \"\")}.${s\n        .replace(\"_\", \"-\")\n        .toLowerCase()}`,\n    }),\n    {} as {\n      [K in T[number]]: `application/vnd.dust.${WithoutUnderscores<P>}.${Lowercase<\n        UnderscoreToDash<K>\n      >}`;\n    }\n  );\n}\n\nexport const MIME_TYPES = {\n  CONFLUENCE: generateMimeTypes({\n    provider: \"confluence\",\n    resourceTypes: [\"SPACE\", \"PAGE\"],\n  }),\n  GITHUB: generateMimeTypes({\n    provider: \"github\",\n    resourceTypes: [\n      \"REPOSITORY\",\n      \"CODE_ROOT\",\n      \"CODE_DIRECTORY\",\n      \"CODE_FILE\",\n      // ISSUES is the folder containing all issues.\n      \"ISSUES\",\n      // ISSUE is a single issue.\n      \"ISSUE\",\n      // DISCUSSIONS is the folder containing all discussions.\n      \"DISCUSSIONS\",\n      // DISCUSSION is a single discussion.\n      \"DISCUSSION\",\n    ],\n  }),\n  GOOGLE_DRIVE: generateMimeTypes({\n    provider: \"google_drive\",\n    // Spreadsheets may contain many sheets, thus resemble folders and are\n    // stored as such, but with the special mimeType below.\n    // For files and sheets, we keep Google's mime types.\n    resourceTypes: [\"SHARED_WITH_ME\", \"FOLDER\", \"SPREADSHEET\"],\n  }),\n  INTERCOM: generateMimeTypes({\n    provider: \"intercom\",\n    resourceTypes: [\n      \"COLLECTION\",\n      \"TEAMS_FOLDER\",\n      \"CONVERSATION\",\n      \"TEAM\",\n      \"ARTICLE\",\n      \"HELP_CENTER\",\n    ],\n  }),\n  MICROSOFT: generateMimeTypes({\n    provider: \"microsoft\",\n    // Spreadsheets may contain many sheets, thus resemble folders and are\n    // stored as such, but with the special mimeType below.\n    // For files and sheets, we keep Microsoft's mime types.\n    resourceTypes: [\"FOLDER\", \"SPREADSHEET\"],\n  }),\n  NOTION: generateMimeTypes({\n    provider: \"notion\",\n    resourceTypes: [\"UNKNOWN_FOLDER\", \"SYNCING_FOLDER\", \"DATABASE\", \"PAGE\"],\n  }),\n  SLACK: generateMimeTypes({\n    provider: \"slack\",\n    resourceTypes: [\"CHANNEL\", \"THREAD\", \"MESSAGES\"],\n  }),\n  SNOWFLAKE: generateMimeTypes({\n    provider: \"snowflake\",\n    resourceTypes: [\"DATABASE\", \"SCHEMA\", \"TABLE\"],\n  }),\n  WEBCRAWLER: generateMimeTypes({\n    provider: \"webcrawler\",\n    resourceTypes: [\"FOLDER\"], // pages are upserted as text/html, not an internal mime type\n  }),\n  ZENDESK: generateMimeTypes({\n    provider: \"zendesk\",\n    resourceTypes: [\n      \"BRAND\",\n      \"HELP_CENTER\",\n      \"CATEGORY\",\n      \"ARTICLE\",\n      // TICKETS is the folder containing all tickets.\n      \"TICKETS\",\n      // TICKET is a single ticket.\n      \"TICKET\",\n    ],\n  }),\n  BIGQUERY: generateMimeTypes({\n    provider: \"bigquery\",\n    resourceTypes: [\"DATABASE\", \"SCHEMA\", \"TABLE\"],\n  }),\n  SALESFORCE: generateMimeTypes({\n    provider: \"salesforce\",\n    resourceTypes: [\"DATABASE\", \"SCHEMA\", \"TABLE\"],\n  }),\n  GONG: generateMimeTypes({\n    provider: \"gong\",\n    resourceTypes: [\"TRANSCRIPT\", \"TRANSCRIPT_FOLDER\"],\n  }),\n};\n\nexport type BigQueryMimeType =\n  (typeof MIME_TYPES.BIGQUERY)[keyof typeof MIME_TYPES.BIGQUERY];\n\nexport type ConfluenceMimeType =\n  (typeof MIME_TYPES.CONFLUENCE)[keyof typeof MIME_TYPES.CONFLUENCE];\n\nexport type GithubMimeType =\n  (typeof MIME_TYPES.GITHUB)[keyof typeof MIME_TYPES.GITHUB];\n\nexport type GoogleDriveMimeType =\n  (typeof MIME_TYPES.GOOGLE_DRIVE)[keyof typeof MIME_TYPES.GOOGLE_DRIVE];\n\nexport type IntercomMimeType =\n  (typeof MIME_TYPES.INTERCOM)[keyof typeof MIME_TYPES.INTERCOM];\n\nexport type MicrosoftMimeType =\n  (typeof MIME_TYPES.MICROSOFT)[keyof typeof MIME_TYPES.MICROSOFT];\n\nexport type NotionMimeType =\n  (typeof MIME_TYPES.NOTION)[keyof typeof MIME_TYPES.NOTION];\n\nexport type SlackMimeType =\n  (typeof MIME_TYPES.SLACK)[keyof typeof MIME_TYPES.SLACK];\n\nexport type SnowflakeMimeType =\n  (typeof MIME_TYPES.SNOWFLAKE)[keyof typeof MIME_TYPES.SNOWFLAKE];\n\nexport type WebcrawlerMimeType =\n  (typeof MIME_TYPES.WEBCRAWLER)[keyof typeof MIME_TYPES.WEBCRAWLER];\n\nexport type ZendeskMimeType =\n  (typeof MIME_TYPES.ZENDESK)[keyof typeof MIME_TYPES.ZENDESK];\n\nexport type SalesforceMimeType =\n  (typeof MIME_TYPES.SALESFORCE)[keyof typeof MIME_TYPES.SALESFORCE];\n\nexport type DustMimeType =\n  | BigQueryMimeType\n  | ConfluenceMimeType\n  | GithubMimeType\n  | GoogleDriveMimeType\n  | IntercomMimeType\n  | MicrosoftMimeType\n  | NotionMimeType\n  | SlackMimeType\n  | SnowflakeMimeType\n  | WebcrawlerMimeType\n  | ZendeskMimeType\n  | SalesforceMimeType;\n","import { v4 as uuidv4 } from \"uuid\";\n\nimport { MaxMessagesTimeframeType } from \"../front/plan\";\nimport { LoggerInterface } from \"../shared/logger\";\nimport { redisClient, RedisUsageTagsType } from \"../shared/redis_client\";\nimport { Err, Ok, Result } from \"./result\";\nimport { getStatsDClient } from \"./statsd\";\n\nexport class RateLimitError extends Error {}\n\nlet rateLimiterRedisClient: Awaited<ReturnType<typeof redisClient>> | undefined;\n\nasync function getRedisClient({\n  origin,\n  redisUri,\n}: {\n  origin: RedisUsageTagsType;\n  redisUri?: string;\n}) {\n  const REDIS_URI = redisUri || process.env.REDIS_URI;\n  if (!REDIS_URI) {\n    throw new Error(\"REDIS_URI is not defined\");\n  }\n\n  if (!rateLimiterRedisClient) {\n    rateLimiterRedisClient = await redisClient({\n      origin,\n      redisUri: REDIS_URI,\n    });\n  }\n\n  return rateLimiterRedisClient;\n}\n\nexport const RATE_LIMITER_PREFIX = \"rate_limiter\";\n\nconst makeRateLimiterKey = (key: string) => `${RATE_LIMITER_PREFIX}:${key}`;\n\ninterface RateLimiterOptionsBase {\n  key: string;\n  redisUri?: string;\n}\n\nexport async function rateLimiter({\n  key,\n  maxPerTimeframe,\n  timeframeSeconds,\n  logger,\n  redisUri,\n}: {\n  logger: LoggerInterface;\n  maxPerTimeframe: number;\n  timeframeSeconds: number;\n} & RateLimiterOptionsBase): Promise<number> {\n  const statsDClient = getStatsDClient();\n\n  const now = new Date();\n  const redisKey = makeRateLimiterKey(key);\n  const tags: string[] = [];\n\n  let redis: undefined | Awaited<ReturnType<typeof redisClient>> = undefined;\n  try {\n    redis = await getRedisClient({ origin: \"rate_limiter\", redisUri });\n\n    const zcountRes = await redis.zCount(\n      redisKey,\n      new Date().getTime() - timeframeSeconds * 1000,\n      \"+inf\"\n    );\n    const remaining = maxPerTimeframe - zcountRes;\n    if (remaining > 0) {\n      await redis.zAdd(redisKey, {\n        score: new Date().getTime(),\n        value: uuidv4(),\n      });\n      await redis.expire(redisKey, timeframeSeconds * 2);\n    } else {\n      statsDClient.increment(\"ratelimiter.exceeded.count\", 1, tags);\n    }\n    const totalTimeMs = new Date().getTime() - now.getTime();\n\n    statsDClient.distribution(\n      \"ratelimiter.latency.distribution\",\n      totalTimeMs,\n      tags\n    );\n\n    return remaining > 0 ? remaining : 0;\n  } catch (e) {\n    statsDClient.increment(\"ratelimiter.error.count\", 1, tags);\n    logger.error(\n      {\n        key,\n        maxPerTimeframe,\n        timeframeSeconds,\n        error: e,\n      },\n      `RateLimiter error`\n    );\n\n    // In case of error on our side, we allow the request.\n    return 1;\n  }\n}\n\nexport async function expireRateLimiterKey({\n  key,\n  redisUri,\n}: RateLimiterOptionsBase): Promise<Result<boolean, Error>> {\n  let redis: undefined | Awaited<ReturnType<typeof redisClient>> = undefined;\n\n  try {\n    redis = await getRedisClient({ origin: \"rate_limiter\", redisUri });\n    const redisKey = makeRateLimiterKey(key);\n\n    const isExpired = await redis.expire(redisKey, 0);\n\n    return new Ok(isExpired);\n  } catch (err) {\n    return new Err(err as Error);\n  }\n}\n\nexport function getTimeframeSecondsFromLiteral(\n  timeframeLiteral: MaxMessagesTimeframeType\n): number {\n  switch (timeframeLiteral) {\n    case \"day\":\n      return 60 * 60 * 24; // 1 day.\n\n    // Lifetime is intentionally mapped to a 30-day period.\n    case \"lifetime\":\n      return 60 * 60 * 24 * 30; // 30 days.\n\n    default:\n      return 0;\n  }\n}\n","import { LoggerInterface } from \"./logger\";\n\ntype RetryOptions = {\n  retries?: number;\n  delayBetweenRetriesMs?: number;\n};\n\nexport function withRetries<T, U>(\n  logger: LoggerInterface,\n  fn: (arg: T) => Promise<U>,\n  { retries = 10, delayBetweenRetriesMs = 1000 }: RetryOptions = {}\n): (arg: T & RetryOptions) => Promise<U> {\n  if (retries < 1) {\n    throw new Error(\"retries must be >= 1\");\n  }\n  return async (arg) => {\n    const errors = [];\n    for (let i = 0; i < retries; i++) {\n      try {\n        return await fn(arg);\n      } catch (e) {\n        const sleepTime = delayBetweenRetriesMs * (i + 1) ** 2;\n        logger.warn(\n          {\n            error: e,\n            attempt: i + 1,\n            retries: retries,\n            sleepTime: sleepTime,\n          },\n          \"Error while executing retriable function. Retrying...\"\n        );\n        await new Promise((resolve) => setTimeout(resolve, sleepTime));\n        errors.push(e);\n      }\n    }\n\n    throw new Error(errors.join(\"\\n\"));\n  };\n}\n","import { Readable } from \"stream\";\nimport type { ReadableStream as NodeReadableStream } from \"stream/web\";\n\n// Define a type for the RequestInit object with duplex set to \"half\" because the official types are\n// lagging behind.\nexport interface RequestInitWithDuplex extends RequestInit {\n  duplex: \"half\";\n}\n\nexport function readableStreamToReadable<T = unknown>(\n  webStream: ReadableStream<T>\n): Readable {\n  return Readable.fromWeb(webStream as NodeReadableStream<T>);\n}\n","import { Parser } from \"htmlparser2\";\nimport { Readable, Transform } from \"stream\";\n\ninterface ParserState {\n  insidePage: boolean;\n  pageDepth: number;\n  pageNumber: number;\n  currentPageBuffer: string;\n}\n\nexport function createPageMetadataPrefix({\n  pageNumber,\n  prefix,\n}: {\n  pageNumber: number;\n  prefix: string;\n}): string {\n  return `${prefix}: ${pageNumber}`;\n}\n\n/**\n * A Transform stream that processes HTML data from a Readable stream, extracts text from specific\n * \"page\" <div> elements (identified by a known CSS class), and prefixes each extracted page's text\n * with some custom metadata. Each complete page is pushed downstream as it is encountered.\n *\n * @param input - A Node.js Readable stream containing HTML\n * @param prefix - A prefix string included in the page metadata\n * @param pageSelector - The CSS class on <div> that identifies a page boundary\n * @returns A new Readable stream that emits text for each page, prefixed by metadata\n *\n * How it works:\n * 1. We create a single HTML parser (Parser) instance that listens to events:\n *    - onopentag: Detects when we enter a <div class=\"pageSelector\"> (or nested)\n *    - ontext: Accumulates text if we are currently inside a page div\n *    - onclosetag: Detects when we leave a page div; if that ends the page div,\n *      we emit the stored text plus metadata\n *    - onerror: Destroys the transform if a parsing error occurs\n *\n * 2. We wrap this parser in a Node Transform stream so we can:\n *    - pipe HTML input into it (input.pipe(htmlParsingTransform))\n *    - feed data chunks into the parser\n *    - flush final content in _flush if the stream ends while still inside a page\n *\n * 3. Each completed page is emitted downstream in text form with a custom prefix block\n */\nexport function transformStream(\n  input: Readable,\n  prefix: string,\n  pageSelector: string\n): Readable {\n  // Track parser state.\n  const state: ParserState = {\n    insidePage: false,\n    pageDepth: 0,\n    pageNumber: 0,\n    currentPageBuffer: \"\",\n  };\n\n  // Create a single parser instance for the entire stream.\n  const parser = new Parser(\n    {\n      onopentag(name, attribs) {\n        // If this open tag is <div class=\"pageSelector\">, we've encountered a new page.\n        // We'll track nested divs in case they exist inside the page container.\n        if (name === \"div\" && attribs.class === pageSelector) {\n          if (!state.insidePage) {\n            state.insidePage = true;\n            state.pageDepth = 1;\n          } else {\n            state.pageDepth++;\n          }\n        } else if (state.insidePage) {\n          // If we're already inside a page, any new tag increases the nesting depth.\n          state.pageDepth++;\n        }\n      },\n\n      ontext(text) {\n        // If in the page region, accumulate the text, removing or replacing artifacts\n        if (state.insidePage) {\n          // Replaces &#13; (carriage return) with nothing, and trims the text.\n          // Append a space to keep some spacing between tokens\n          state.currentPageBuffer += text.replace(\"&#13;\", \"\").trim() + \" \";\n        }\n      },\n\n      onclosetag() {\n        // If we're inside a page, decrement the nesting depth each time a tag closes.\n        if (state.insidePage) {\n          state.pageDepth--;\n\n          // If pageDepth==0, we've closed the outermost page div => a page is complete.\n          if (state.pageDepth === 0) {\n            state.insidePage = false;\n\n            // If there's any text in the buffer, emit it as a new chunk prefixed with metadata.\n            if (state.currentPageBuffer.trim()) {\n              htmlParsingTransform.push(\n                `\\n${createPageMetadataPrefix({\n                  pageNumber: state.pageNumber,\n                  prefix,\n                })}\\n${state.currentPageBuffer.trim()}\\n`\n              );\n            }\n\n            // Reset for next page.\n            state.pageNumber++;\n            state.currentPageBuffer = \"\";\n          }\n        }\n      },\n\n      onerror(err) {\n        // If we encounter a parser error, destroy the transform with that error.\n        htmlParsingTransform.destroy(err);\n      },\n    },\n    { decodeEntities: true } // Instruct parser to decode HTML entities like &amp.\n  );\n\n  // Create transform stream.\n  const htmlParsingTransform = new Transform({\n    objectMode: true,\n\n    transform(chunk: Buffer, _encoding, callback) {\n      try {\n        parser.write(chunk.toString());\n        callback();\n      } catch (error) {\n        if (error instanceof Error) {\n          callback(error);\n        } else {\n          callback(\n            new Error(\n              typeof error === \"string\"\n                ? error\n                : \"Unknown error in htmlParsingTransform.transform()\"\n            )\n          );\n        }\n      }\n    },\n\n    flush(callback) {\n      try {\n        // Signal to the parser that we're done (end of the HTML input).\n        parser.end();\n\n        // If we ended the stream while still inside a page, emit any leftover text.\n        if (state.insidePage && state.currentPageBuffer.trim()) {\n          this.push(\n            `\\n${createPageMetadataPrefix({\n              pageNumber: state.pageNumber,\n              prefix,\n            })}\\n${state.currentPageBuffer.trim()}\\n`\n          );\n        }\n\n        callback();\n      } catch (error) {\n        if (error instanceof Error) {\n          callback(error);\n        } else {\n          callback(\n            new Error(\n              typeof error === \"string\"\n                ? error\n                : \"Unknown error in htmlParsingTransform.flush()\"\n            )\n          );\n        }\n      }\n    },\n  });\n\n  // Handle errors on both streams.\n  input.on(\"error\", (error) => htmlParsingTransform.destroy(error));\n  htmlParsingTransform.on(\"error\", (error) => input.destroy(error));\n\n  // Pipe the input HTML stream through our transform and return the result\n  return input.pipe(htmlParsingTransform);\n}\n","import { stringify } from \"csv-stringify/sync\";\nimport { Parser } from \"htmlparser2\";\nimport { Readable, Transform } from \"stream\";\n\nimport { TABLE_PREFIX } from \"../../front/files\";\n\ninterface ParserState {\n  tags: string[];\n  currentRow: string[];\n}\n\nconst HTML_TAGS = {\n  ROW: \"tr\",\n  CELL: \"td\",\n} as const;\n\n/**\n * A Transform stream that processes HTML data from a Readable stream, extracts text from tables\n * and converts it to CSV format. It handles two specific cases:\n * 1. Text within elements matching the selector, which gets prefixed with TABLE_PREFIX\n * 2. Content within table cells (<td>), which gets converted to CSV format\n *\n * @param input - A Node.js Readable stream containing HTML\n * @param selector - A tag name to match for direct text extraction (prefixed with TABLE_PREFIX)\n * @returns A new Readable stream that emits the processed text in CSV format\n *\n * How it works:\n * 1. We create a single HTML parser (Parser) instance that listens to events:\n *    - onopentag: Tracks the current tag stack\n *    - ontext:\n *      * If inside selector-matched element: adds text with TABLE_PREFIX\n *      * If inside <td>: collects text for current row\n *    - onclosetag: When a </tr> is encountered, converts the collected row to CSV\n *    - onerror: Destroys the transform if a parsing error occurs\n *\n * 2. We wrap this parser in a Node Transform stream to:\n *    - pipe HTML input into it\n *    - process data chunks through the parser\n *    - handle proper stream cleanup in flush\n */\nexport function transformStreamToCSV(\n  input: Readable,\n  selector: string\n): Readable {\n  // Track parser state.\n  const state: ParserState = {\n    tags: [],\n    currentRow: [],\n  };\n\n  // Create a single parser instance for the entire stream.\n  const parser = new Parser(\n    {\n      onopentag(name) {\n        state.tags.push(name);\n      },\n\n      ontext(text) {\n        const currentTag = state.tags[state.tags.length - 1];\n\n        if (currentTag === selector) {\n          htmlParsingTransform.push(`${TABLE_PREFIX}${text}\\n`);\n        } else if (currentTag === HTML_TAGS.CELL) {\n          state.currentRow.push(text);\n        }\n      },\n\n      onclosetag(name) {\n        const lastTag = state.tags.pop();\n        if (name !== lastTag) {\n          throw new Error(\"Invalid tag order\");\n        } else {\n          if (lastTag === HTML_TAGS.ROW) {\n            const csv = stringify([state.currentRow]);\n            htmlParsingTransform.push(csv);\n            state.currentRow = [];\n          }\n        }\n      },\n\n      onerror(err) {\n        // If we encounter a parser error, destroy the transform with that error.\n        htmlParsingTransform.destroy(err);\n      },\n    },\n    { decodeEntities: true } // Instruct parser to decode HTML entities like &amp.\n  );\n\n  // Create transform stream.\n  const htmlParsingTransform = new Transform({\n    objectMode: true,\n\n    transform(chunk: Buffer, _encoding, callback) {\n      try {\n        parser.write(chunk.toString());\n        callback();\n      } catch (error) {\n        if (error instanceof Error) {\n          callback(error);\n        } else {\n          callback(\n            new Error(\n              typeof error === \"string\"\n                ? error\n                : \"Unknown error in htmlParsingTransform.transform()\"\n            )\n          );\n        }\n      }\n    },\n\n    flush(callback) {\n      try {\n        // Signal to the parser that we're done (end of the HTML input).\n        parser.end();\n\n        callback();\n      } catch (error) {\n        if (error instanceof Error) {\n          callback(error);\n        } else {\n          callback(\n            new Error(\n              typeof error === \"string\"\n                ? error\n                : \"Unknown error in htmlParsingTransform.flush()\"\n            )\n          );\n        }\n      }\n    },\n  });\n\n  // Handle errors on both streams.\n  input.on(\"error\", (error) => htmlParsingTransform.destroy(error));\n  htmlParsingTransform.on(\"error\", (error) => input.destroy(error));\n\n  // Pipe the input HTML stream through our transform and return the result\n  return input.pipe(htmlParsingTransform);\n}\n","//import { PassThrough, Transform } from \"node:stream\";\n\nimport { isLeft } from \"fp-ts/Either\";\nimport { Parser } from \"htmlparser2\";\nimport * as t from \"io-ts\";\nimport * as reporter from \"io-ts-reporters\";\nimport { Readable } from \"stream\";\n\nimport { LoggerInterface } from \"../logger\";\nimport { Err, Ok, Result } from \"../result\";\nimport { withRetries } from \"../retries\";\nimport { assertNever } from \"../utils/assert_never\";\nimport {\n  readableStreamToReadable,\n  RequestInitWithDuplex,\n} from \"../utils/streams\";\nimport { transformStream } from \"./transform\";\nimport { transformStreamToCSV } from \"./transformToCSV\";\n\n// Define the codec for the response.\nconst TikaResponseCodec = t.type({\n  \"Content-Type\": t.string,\n  \"X-TIKA:content\": t.string,\n});\n\n// Define the type for the decoded response\ntype TikaResponse = t.TypeOf<typeof TikaResponseCodec>;\n\ninterface PageContent {\n  pageNumber: number;\n  content: string;\n}\n\nexport const pagePrefixesPerMimeType: Record<string, string> = {\n  \"application/pdf\": \"$pdfPage\",\n  \"application/vnd.openxmlformats-officedocument.presentationml.presentation\":\n    \"$slideNumber\",\n};\n\n// All those content types are supported by the Tika server.\n// Before adding a new content type, make sure to test it.\nconst supportedContentTypes = [\n  \"application/pdf\",\n  \"application/msword\",\n  \"application/vnd.ms-powerpoint\",\n  \"application/vnd.openxmlformats-officedocument.presentationml.presentation\",\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n  \"application/vnd.ms-excel\",\n] as const;\n\ntype SupportedContentTypes = (typeof supportedContentTypes)[number];\n\ntype ContentTypeConfig = {\n  [key in SupportedContentTypes]?: {\n    handler: \"html\" | \"text\";\n    transformer: \"document\" | \"csv\";\n    selector: string;\n  };\n};\n\nconst contentTypeConfig: ContentTypeConfig = {\n  \"application/pdf\": {\n    handler: \"html\",\n    selector: \"page\",\n    transformer: \"document\",\n  },\n  \"application/vnd.ms-powerpoint\": {\n    handler: \"html\",\n    selector: \"slide-content\",\n    transformer: \"document\",\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.presentation\": {\n    handler: \"html\",\n    selector: \"slide-content\",\n    transformer: \"document\",\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\": {\n    handler: \"html\",\n    selector: \"h1\",\n    transformer: \"csv\",\n  },\n  \"application/vnd.ms-excel\": {\n    handler: \"html\",\n    selector: \"h1\",\n    transformer: \"csv\",\n  },\n};\n\nexport function isTextExtractionSupportedContentType(\n  contentType: string\n): contentType is SupportedContentTypes {\n  return supportedContentTypes.includes(contentType as SupportedContentTypes);\n}\n\nconst DEFAULT_HANDLER = \"text\";\nconst DEFAULT_TIMEOUT_IN_MS = 60000;\n\nexport class TextExtraction {\n  constructor(\n    readonly url: string,\n    readonly options: {\n      enableOcr: boolean;\n      logger: LoggerInterface;\n    }\n  ) {}\n\n  getAdditionalHeaders(): HeadersInit {\n    return {\n      \"X-Tika-PDFOcrStrategy\": this.options.enableOcr ? \"auto\" : \"no_ocr\",\n      \"X-Tika-Timeout-Millis\": DEFAULT_TIMEOUT_IN_MS.toString(),\n    };\n  }\n\n  // Method to extract text from a buffer.\n  async fromBuffer(\n    fileBuffer: Buffer,\n    contentType: SupportedContentTypes\n  ): Promise<Result<PageContent[], Error>> {\n    const response = await this.queryTika(fileBuffer, contentType);\n    if (response.isErr()) {\n      return response;\n    }\n\n    return this.processResponse(response.value);\n  }\n\n  // Method to extract text from a stream.\n  async fromStream(\n    fileStream: Readable,\n    contentType: SupportedContentTypes\n  ): Promise<Readable> {\n    const response = await withRetries(\n      this.options.logger,\n      ({\n        url,\n        additionalHeaders,\n        contentType,\n        fileStream,\n      }: {\n        url: string;\n        additionalHeaders: HeadersInit;\n        contentType: SupportedContentTypes;\n        fileStream: Readable;\n      }) =>\n        fetch(`${url}/tika/`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": contentType,\n            ...additionalHeaders,\n          },\n          body: Readable.toWeb(fileStream),\n          duplex: \"half\",\n        } as RequestInitWithDuplex),\n      {\n        retries: 3,\n        delayBetweenRetriesMs: 1000,\n      }\n    )({\n      url: this.url,\n      additionalHeaders: this.getAdditionalHeaders(),\n      contentType,\n      fileStream,\n    });\n\n    if (!response.body) {\n      throw new Error(\"Response body is null\");\n    }\n\n    const responseStream = readableStreamToReadable(response.body);\n\n    const config = contentTypeConfig[contentType];\n\n    if (config) {\n      const { transformer, selector } = config;\n      switch (transformer) {\n        case \"document\": {\n          const prefix = pagePrefixesPerMimeType[contentType];\n          return transformStream(responseStream, prefix, selector);\n        }\n        case \"csv\": {\n          return transformStreamToCSV(responseStream, selector);\n        }\n        default:\n          assertNever(transformer);\n      }\n    }\n\n    return responseStream;\n  }\n\n  // Query the Tika server and return the response data.\n  private async queryTika(\n    fileBuffer: Buffer,\n    contentType: SupportedContentTypes\n  ): Promise<Result<TikaResponse, Error>> {\n    // Determine the handler type based on the content type.\n    // The HTML handler preserves the structural information of the document\n    // like page structure, etc. The text handler does not.\n    const handlerType =\n      contentTypeConfig[contentType]?.handler ?? DEFAULT_HANDLER;\n\n    try {\n      const response = await withRetries(\n        this.options.logger,\n        ({\n          url,\n          additionalHeaders,\n          handlerType,\n          contentType,\n          fileBuffer,\n        }: {\n          url: string;\n          additionalHeaders: HeadersInit;\n          handlerType: string;\n          contentType: SupportedContentTypes;\n          fileBuffer: Buffer;\n        }) =>\n          fetch(`${url}/tika/${handlerType}`, {\n            method: \"PUT\",\n            headers: {\n              Accept: \"application/json\",\n              \"Content-Type\": contentType,\n              ...additionalHeaders,\n            },\n            body: fileBuffer,\n          }),\n        {\n          retries: 3,\n          delayBetweenRetriesMs: 1000,\n        }\n      )({\n        url: this.url,\n        additionalHeaders: this.getAdditionalHeaders(),\n        handlerType,\n        contentType,\n        fileBuffer,\n      });\n\n      if (!response.ok) {\n        return new Err(new Error(`HTTP error status: ${response.status}`));\n      }\n\n      const data = await response.json();\n      const decodedReponse = TikaResponseCodec.decode(data);\n      if (isLeft(decodedReponse)) {\n        const pathError = reporter.formatValidationErrors(decodedReponse.left);\n        return new Err(new Error(`Invalid response format: ${pathError}`));\n      }\n\n      return new Ok(decodedReponse.right);\n    } catch (err) {\n      this.options.logger.error({ error: err }, \"Error while extracting text\");\n\n      const errorMessage =\n        err instanceof Error ? err.message : \"Unexpected error\";\n\n      return new Err(new Error(`Failed extracting text: ${errorMessage}`));\n    }\n  }\n\n  // Process the Tika response and return an array of PageContent.\n  private processResponse(\n    response: TikaResponse\n  ): Promise<Result<PageContent[], Error>> {\n    const contentType = response[\"Content-Type\"];\n\n    const pageSelector =\n      contentTypeConfig[contentType as SupportedContentTypes]?.selector;\n    if (pageSelector) {\n      return this.processContentBySelector(response, pageSelector);\n    }\n\n    return this.processDefaultResponse(response);\n  }\n\n  // Generic function to process response using a page selector.\n  private processContentBySelector(\n    response: TikaResponse,\n    contentSelector: string\n  ): Promise<Result<PageContent[], Error>> {\n    const html = response[\"X-TIKA:content\"];\n\n    const stream = Readable.from(html);\n\n    // This logic extract the content of the page based on the selector.\n    // We use a streaming parser to avoid loading the entire content in memory.\n    return new Promise<Result<PageContent[], Error>>((resolve) => {\n      const contentDivs: PageContent[] = [];\n      let currentPageContent = \"\";\n      let insidePage = false;\n      let pageNumber = 0;\n      let pageDepth = 0;\n\n      const parser = new Parser(\n        {\n          onopentag(name, attribs) {\n            // Check if the current tag is the page selector.\n            // If it is, we are inside a page.\n            // This assumes that we don't have nested pages.\n            if (name === \"div\" && attribs.class === contentSelector) {\n              insidePage = true;\n              pageNumber++;\n              currentPageContent = \"\";\n              pageDepth = 1;\n            } else if (insidePage) {\n              // If we are inside a page, increment the page depth to handle nested divs.\n              // This is required to know when we are done with the page.\n              pageDepth++;\n            }\n          },\n          ontext(text) {\n            // If we are inside a page, append the text to the current page content.\n            if (insidePage) {\n              currentPageContent += text.trim() + \" \";\n            }\n          },\n          onclosetag() {\n            // If we are inside a page, decrement the page depth.\n            if (insidePage) {\n              pageDepth--;\n              // If the page depth is 0, we are done with the page.\n              if (pageDepth === 0) {\n                insidePage = false;\n                if (currentPageContent.trim()) {\n                  contentDivs.push({\n                    pageNumber: pageNumber,\n                    content: currentPageContent.trim(),\n                  });\n                }\n                currentPageContent = \"\";\n              }\n            }\n          },\n          onerror(err) {\n            return resolve(new Err(err));\n          },\n        },\n        { decodeEntities: true }\n      );\n\n      stream.on(\"data\", (chunk: Buffer) => {\n        parser.write(chunk.toString());\n      });\n\n      stream.on(\"end\", () => {\n        parser.end();\n        return resolve(new Ok(contentDivs));\n      });\n\n      stream.on(\"error\", (err) => {\n        return resolve(new Err(err));\n      });\n    });\n  }\n\n  // Process default response.\n  private processDefaultResponse(\n    response: TikaResponse\n  ): Promise<Result<PageContent[], Error>> {\n    const content = response[\"X-TIKA:content\"];\n\n    // Treat the entire content as a single page.\n    return Promise.resolve(\n      new Ok([{ pageNumber: 1, content: content.trim() }])\n    );\n  }\n}\n","import { LoggerInterface } from \"./logger\";\n\nexport async function sendUserOperationMessage({\n  message,\n  logger,\n  channel,\n}: {\n  message: string;\n  logger: LoggerInterface;\n  channel?: string;\n}) {\n  const { SLACK_USER_OPERATION_BOT_TOKEN, SLACK_USER_OPERATION_CHANNEL_ID } =\n    process.env;\n\n  if (!SLACK_USER_OPERATION_BOT_TOKEN || !SLACK_USER_OPERATION_CHANNEL_ID) {\n    logger.info(\n      {},\n      \"SLACK_USER_OPERATION_BOT_TOKEN or SLACK_USER_OPERATION_CHANNEL_ID is not set\"\n    );\n    return;\n  }\n\n  try {\n    const res = await fetch(\"https://slack.com/api/chat.postMessage\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${SLACK_USER_OPERATION_BOT_TOKEN}`,\n      },\n      body: JSON.stringify({\n        channel: channel ?? SLACK_USER_OPERATION_CHANNEL_ID,\n        text: message,\n      }),\n    });\n\n    const jsonRes = await res.json();\n    if (!jsonRes.ok) {\n      logger.error(\n        { error: jsonRes.error },\n        \"Failed to send slack message to user operation channel (1).\"\n      );\n    }\n\n    // Log the result\n  } catch (error) {\n    logger.error(\n      { error: error },\n      \"Failed to send slack message to user operation channel (2).\"\n    );\n  }\n}\n","/**\n * Executes an array of tasks concurrently with controlled parallelism.\n *\n * This function processes a list of items concurrently while maintaining a maximum\n * number of parallel executions. It uses a shared queue approach where multiple\n * workers pull items to process, ensuring each item is processed exactly once\n * and results are maintained in the original order.\n *\n * @param items - Array of items to be processed\n * @param iterator - Async function that processes each item. Receives the item and its index\n * @param options.concurrency - Maximum number of parallel executions (default: 8)\n * @returns Promise resolving to array of results in the same order as input items.\n */\nexport async function concurrentExecutor<T, V>(\n  items: T[],\n  iterator: (item: T, idx: number) => Promise<V>,\n  { concurrency = 8 }: { concurrency: number }\n) {\n  const results: V[] = new Array(items.length);\n\n  // Initialize queue with work items, preserving original index.\n  // This queue is shared between all workers.\n  const queue = items.map((item, index) => ({ item, index }));\n\n  /**\n   * Worker function that continuously processes items from the shared queue.\n   * Multiple instances of this worker run concurrently, each competing\n   * for the next available item in the queue. When the queue is empty,\n   * the worker terminates.\n   *\n   * The queue.shift() operation is atomic in JavaScript, ensuring\n   * each item is processed exactly once across all workers.\n   */\n  async function worker() {\n    let work;\n\n    // Continue processing while there are items in the queue.\n    while ((work = queue.shift())) {\n      const result = await iterator(work.item, work.index);\n      results[work.index] = result;\n    }\n  }\n\n  // Create and start workers, limiting the number to either the concurrency\n  // limit or the number of items, whichever is smaller. All workers share\n  // the same queue and results array.\n  await Promise.all(\n    Array.from({ length: Math.min(concurrency, items.length) }, () => worker())\n  );\n\n  return results;\n}\n","export class EnvironmentConfig {\n  private static cache: Record<string, string> = {};\n\n  static getEnvVariable(key: string): string {\n    const cachedValue = this.cache[key];\n\n    if (!cachedValue) {\n      const value = process.env[key];\n      if (value === undefined) {\n        throw new Error(`${key} is required but not set`);\n      }\n      this.cache[key] = value;\n\n      return value;\n    }\n\n    return cachedValue;\n  }\n\n  static getOptionalEnvVariable(key: string): string | undefined {\n    if (!this.cache[key]) {\n      const value = process.env[key];\n      if (value) {\n        this.cache[key] = value;\n      }\n    }\n    return this.cache[key];\n  }\n}\n","export function isValidDate(date: Date) {\n  return !isNaN(date.valueOf());\n}\n","export function errorToString(error: unknown): string {\n  if (error instanceof Error) {\n    return error.message;\n  } else if (typeof error === \"string\") {\n    return error;\n  }\n\n  return JSON.stringify(error);\n}\n\nexport function normalizeError(error: unknown): Error {\n  if (error instanceof Error) {\n    return error;\n  }\n\n  return new Error(errorToString(error));\n}\n","import { v4 as uuidv4 } from \"uuid\";\n\nimport { LoggerInterface } from \"../logger\";\n\nlet once = false;\n\nexport function setupGlobalErrorHandler(logger: LoggerInterface) {\n  if (once) {\n    logger.info({}, \"Global error handler already setup\");\n    return;\n  }\n  once = true;\n  process.on(\"unhandledRejection\", (reason, promise) => {\n    // uuid here serves as a correlation id for the console.error and the logger.error.\n    const uuid = uuidv4();\n    // console.log here is important because the promise.catch() below could fail.\n    console.error(\"unhandledRejection\", promise, reason, uuid);\n\n    promise.catch((error) => {\n      // We'll get the call stack from error only if the promise was rejected with an error object.\n      // Example: new Promise((_, reject) => reject(new Error(\"Some error\")))\n      logger.error({ error, panic: true, uuid, reason }, \"Unhandled Rejection\");\n    });\n  });\n\n  process.on(\"uncaughtException\", (error) => {\n    logger.error({ error, panic: true }, \"Uncaught Exception\");\n  });\n}\n","import crypto from \"crypto\";\n\nexport function md5(str: string): string {\n  return crypto.createHash(\"md5\").update(str).digest(\"hex\");\n}\n\nfunction saltedKey(key: string, size = 32): string {\n  const { DUST_DEVELOPERS_SECRETS_SECRET } = process.env;\n  return crypto\n    .createHash(\"sha256\")\n    .update(DUST_DEVELOPERS_SECRETS_SECRET + key)\n    .digest(\"base64\")\n    .substring(0, size);\n}\n\nexport function encrypt(text: string, key: string): string {\n  const iv = md5(key).substring(0, 16);\n  const cipher = crypto.createCipheriv(\"aes-256-cbc\", saltedKey(key), iv);\n  let encrypted = cipher.update(text, \"utf8\", \"hex\");\n  encrypted += cipher.final(\"hex\");\n  return encrypted;\n}\n\nexport function decrypt(encrypted: string, key: string): string {\n  const iv = md5(key).substring(0, 16);\n  const decipher = crypto.createDecipheriv(\"aes-256-cbc\", saltedKey(key), iv);\n  let decrypted = decipher.update(encrypted, \"hex\", \"utf8\");\n  decrypted += decipher.final(\"utf8\");\n  return decrypted;\n}\n","import { Err, Ok, Result } from \"../result\";\n\n/**\n * Substring that ensures we don't cut a string in the middle of a unicode\n * character.\n *\n * The split characters are removed from the result. As such the\n * result may be shorter than the requested length. As a consequence,\n * safeSubstring(0,K) + safeSubstring(K) may not be equal to the original\n * string.\n *\n * Read more:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters\n */\nexport function safeSubstring(\n  str: string,\n  start: number,\n  end?: number\n): string {\n  while (isTrailingLoneSurrogate(str.charCodeAt(start))) {\n    start++;\n  }\n  if (end === undefined) {\n    end = str.length;\n  }\n  while (isLeadingLoneSurrogate(str.charCodeAt(end - 1))) {\n    end--;\n  }\n  return str.substring(start, end);\n}\n\nfunction isLeadingLoneSurrogate(code: number): boolean {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingLoneSurrogate(code: number): boolean {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n\nexport function pluralize(count: number) {\n  return count !== 1 ? \"s\" : \"\";\n}\n\nexport function sanitizeString(rawString: string) {\n  return rawString.trim().toLowerCase();\n}\n\nexport function slugify(text: string) {\n  return text\n    .normalize(\"NFKD\") // Normalize to decomposed form.\n    .replace(/[\\u0300-\\u036f]/g, \"\") // Remove diacritics.\n    .replace(/([a-z])([A-Z0-9])/g, \"$1_$2\") // Get all lowercase letters that are near to uppercase ones and replace with _.\n    .toLowerCase()\n    .trim()\n    .replace(/\\s+/g, \"_\") // Replace spaces with _.\n    .replace(/[\\W]+/g, \"_\") // Replace all non-word characters with _.\n    .replace(/__+/g, \"_\"); // Replace multiple _ with single _.\n}\n\nexport function isSlugified(text: string) {\n  return /^[a-z0-9_]+$/.test(text);\n}\n\nexport function redactString(str: string, n: number) {\n  if (typeof str !== \"string\") {\n    return str;\n  }\n\n  if (str.length <= n) {\n    return str;\n  }\n\n  const redacted = \"•\".repeat(str.length - n) + str.slice(-n);\n  return redacted;\n}\n\nexport function truncate(text: string, length: number, omission = \"...\") {\n  return text.length > length\n    ? `${text.substring(0, length - omission.length)}${omission}`\n    : text;\n}\n\nexport function safeParseJSON(str: string): Result<object | null, Error> {\n  try {\n    const res = JSON.parse(str);\n\n    return new Ok(res);\n  } catch (err) {\n    if (err instanceof Error) {\n      return new Err(err);\n    }\n\n    return new Err(new Error(\"Unexpected error: JSON parsing failed.\"));\n  }\n}\n\nexport function stripNullBytes(text: string): string {\n  return text.replace(/\\0/g, \"\");\n}\n","import { CsvError, parse } from \"csv-parse\";\nimport { stringify } from \"csv-stringify\";\n\nimport { Err, Ok, Result } from \"../result\";\nimport { slugify } from \"./string_utils\";\n\nexport class InvalidStructuredDataHeaderError extends Error {}\nclass ParsingCsvError extends Error {}\n\nexport function getSanitizedHeaders(\n  rawHeaders: string[]\n): Result<string[], Error> {\n  try {\n    const value = rawHeaders.reduce<string[]>((acc, curr) => {\n      // Special case for __dust_id, which is a reserved header name that we use\n      // to assign unique row_id to make incremental row updates possible.\n      const slugifiedName = curr === \"__dust_id\" ? curr : slugify(curr);\n\n      if (!acc.includes(slugifiedName) || !slugifiedName.length) {\n        acc.push(slugifiedName);\n      } else {\n        let conflictResolved = false;\n        for (let i = 2; i < 64; i++) {\n          if (!acc.includes(slugify(`${slugifiedName}_${i}`))) {\n            acc.push(slugify(`${slugifiedName}_${i}`));\n            conflictResolved = true;\n            break;\n          }\n        }\n\n        if (!conflictResolved) {\n          throw new InvalidStructuredDataHeaderError(\n            `Failed to generate unique slugified name for header \"${curr}\" after multiple attempts.`\n          );\n        }\n      }\n      return acc;\n    }, []);\n    return new Ok(value);\n  } catch (e) {\n    if (e instanceof Error) {\n      return new Err(e);\n    } else {\n      return new Err(new Error(\"An unknown error occurred\"));\n    }\n  }\n}\n\nexport async function guessDelimiter(csv: string): Promise<string | undefined> {\n  // Detect the delimiter: try to parse the first 2 lines with different delimiters,\n  // keep the one that works for both lines and has the most columns.\n  let delimiter: string | undefined = undefined;\n  let delimiterColsCount = 0;\n  for (const d of [\",\", \";\", \"\\t\"]) {\n    const records: unknown[][] = [];\n    try {\n      // We parse at most 8 lines with skipEmptyLines with the goal of getting 2 valid ones,\n      // otherwise let's consider the file as broken beyond repair.\n      const parser = parse(csv, { delimiter: d, to: 8, skipEmptyLines: true });\n      for await (const record of parser) {\n        records.push(record);\n        if (records.length === 2) {\n          break;\n        }\n      }\n    } catch (e) {\n      // Ignore error.\n      continue;\n    }\n\n    const [firstRecord, secondRecord] = records;\n    // Check for more than one line to ensure sufficient data for accurate delimiter detection.\n    if (!secondRecord) {\n      continue;\n    }\n\n    if (!!firstRecord.length && firstRecord.length === secondRecord.length) {\n      if (firstRecord.length > delimiterColsCount) {\n        delimiterColsCount = firstRecord.length;\n        delimiter = d;\n      }\n    }\n  }\n\n  return delimiter;\n}\n\n// This function is used by connectors to turn a , ; \\t separated file into a comma separated file.\n// It also will raise if the file can't be parsed.\nexport async function parseAndStringifyCsv(tableCsv: string): Promise<string> {\n  const delimiter = await guessDelimiter(tableCsv);\n  const records: unknown[] = [];\n\n  try {\n    const parser = parse(tableCsv, {\n      delimiter,\n      skipEmptyLines: true,\n      columns: (c) => c,\n    });\n\n    for await (const record of parser) {\n      records.push(record);\n    }\n  } catch (err) {\n    throw new ParsingCsvError(\n      err instanceof CsvError\n        ? `Unable to parse CSV string : ${err.message}`\n        : \"Unable to parse CSV string\"\n    );\n  }\n\n  return new Promise((resolve, reject) => {\n    stringify(records, { header: true }, (err, output) => {\n      if (err) {\n        reject(new ParsingCsvError(\"Unable to stringify parsed CSV data\"));\n      } else {\n        resolve(output);\n      }\n    });\n  });\n}\n"],"names":["Ok","value","_proto","prototype","isOk","isErr","Err","error","_proto2","ioTsEnum","enumValues","enumName","isEnumValue","input","includes","t","Type","uuidv4","context","success","failure","identity","createRangeCodec","min","max","brand","number","n","SlugifiedString","string","s","test","ioTsParsePayload","payload","codec","bodyValidation","decode","isLeft","pathError","reporter","formatValidationErrors","left","right","NumberAsStringCodec","u","c","toString","ConnectorsCommandSchema","type","majorCommand","literal","command","union","args","record","undefined","ConfluenceCommandSchema","connectorId","pageId","spaceId","file","keyInFile","ConfluenceMeResponseSchema","me","UnknownRecord","ConfluenceUpsertPageResponseSchema","workflowId","workflowUrl","GithubCommandSchema","NotionCommandSchema","GoogleDriveCommandSchema","SlackCommandSchema","BatchCommandSchema","WebcrawlerCommandSchema","BatchAllResponseSchema","succeeded","failed","TemporalCommandSchema","IntercomCommandSchema","force","conversationId","day","helpCenterId","IntercomCheckConversationResponseSchema","isConversationOnIntercom","isConversationOnDB","conversationTeamIdOnIntercom","conversationTeamIdOnDB","IntercomFetchConversationResponseSchema","conversation","IntercomFetchArticlesResponseSchema","articles","array","IntercomCheckTeamsResponseSchema","teams","teamId","name","isTeamOnDB","IntercomCheckMissingConversationsResponseSchema","missingConversations","open","createdAt","IntercomForceResyncArticlesResponseSchema","affectedCount","ZendeskCommandSchema","wId","dsId","brandId","query","forceResync","ticketId","ticketUrl","ZendeskCheckIsAdminResponseSchema","userRole","userActive","userIsAdmin","ZendeskCountTicketsResponseSchema","ticketCount","ZendeskFetchTicketResponseSchema","ticket","isTicketOnDb","ZendeskFetchBrandResponseSchema","brandOnDb","MicrosoftCommandSchema","AdminCommandSchema","AdminSuccessResponseSchema","CheckFileGenericResponseSchema","status","content","unknown","GetParentsResponseSchema","parents","NotionUpsertResponseSchema","NotionSearchPagesResponseSchema","pages","id","title","isSkipped","isFull","NotionCheckUrlResponseSchema","page","db","NotionDeleteUrlResponseSchema","deletedPage","deletedDb","NotionFindUrlResponseSchema","NotionMeResponseSchema","botOwner","TemporalCheckQueueResponseSchema","taskQueue","TemporalUnprocessedWorkflowsResponseSchema","queuesAndPollers","queue","pollers","unprocessedQueues","AdminResponseSchema","CONNECTORS_API_ERROR_TYPES","isConnectorsAPIError","obj","message","SlackAutoReadPatternSchema","pattern","SlackAutoReadPatternsSchema","isSlackAutoReadPatterns","v","is","SlackConfigurationTypeSchema","botEnabled","whitelistedDomains","autoReadChannelPatterns","isSlackbotWhitelistType","WEBCRAWLER_MAX_DEPTH","WEBCRAWLER_MAX_PAGES","CrawlingModes","CrawlingFrequencies","DepthOptions","isDepthOption","WebCrawlerConfigurationTypeSchema","url","depth","maxPageToCrawl","crawlMode","crawlFrequency","headers","WebCrawlerHeaderRedactedValue","WEBCRAWLER_DEFAULT_CONFIGURATION","ConnectorConfigurationTypeSchema","UpdateConnectorConfigurationTypeSchema","configuration","ConnectorCreateRequestBodySchema","workspaceAPIKey","dataSourceId","workspaceId","connectionId","UpdateConnectorRequestBodySchema","isWebCrawlerConfiguration","config","maybeWebCrawlerConfig","makeConfluenceSyncWorkflowId","ConfluenceClientError","_Error","error_data","_this","call","data","_inheritsLoose","_wrapNativeSuper","Error","isConfluenceNotFoundError","err","ContentNodesViewTypeCodec","isValidContentNodesViewType","getGoogleSheetTableId","googleFileId","googleSheetId","getGoogleSheetContentNodeInternalId","getGoogleIdsFromSheetContentNodeInternalId","internalId","parts","split","replace","isGoogleSheetContentNodeInternalId","startsWith","googleDriveIncrementalSyncWorkflowId","getIntercomSyncWorkflowId","microsoftIncrementalSyncWorkflowId","microsoftGarbageCollectionWorkflowId","getNotionWorkflowId","isGarbageCollectionRun","wfName","ParsedNotionDatabaseSchema","parentType","parentId","archived","getNotionDatabaseTableId","notionDatabaseId","getNotionDatabaseTableIdFromContentNodeInternalId","EXCLUDE_DATABASES","EXCLUDE_SCHEMAS","getZendeskSyncWorkflowId","getZendeskGarbageCollectionWorkflowId","DEFAULT_QDRANT_CLUSTER","sectionFullText","section","prefix","sections","map","join","TIME_FRAME_UNITS","TimeframeUnitCodec","isTimeFrame","arg","duration","unit","getProviderFromRetrievedDocument","document","dataSourceView","dataSource","connectorProvider","getTitleFromRetrievedDocument","provider","_iterator","_createForOfIteratorHelperLoose","tags","_step","done","substring","_iterator2","_step2","documentId","MODEL_PROVIDER_IDS","REASONING_EFFORT_IDS","DEFAULT_EMBEDDING_PROVIDER_ID","EMBEDDING_PROVIDER_IDS","isModelProviderId","providerId","ModelProviderIdCodec","ReasoningEffortCodec","EmbeddingProviderCodec","isProviderWhitelisted","owner","_owner$whiteListedPro","whiteListedProviders","getSmallWhitelistedModel","GPT_4O_MINI_MODEL_CONFIG","CLAUDE_3_5_HAIKU_DEFAULT_MODEL_CONFIG","GEMINI_FLASH_DEFAULT_MODEL_CONFIG","MISTRAL_SMALL_MODEL_CONFIG","getLargeWhitelistedModel","CLAUDE_3_5_SONNET_DEFAULT_MODEL_CONFIG","GPT_4O_MODEL_CONFIG","GEMINI_PRO_DEFAULT_MODEL_CONFIG","MISTRAL_LARGE_MODEL_CONFIG","GPT_3_5_TURBO_MODEL_ID","GPT_4_TURBO_MODEL_ID","GPT_4O_MODEL_ID","GPT_4O_20240806_MODEL_ID","GPT_4O_MINI_MODEL_ID","O1_MODEL_ID","O1_MINI_MODEL_ID","O3_MINI_MODEL_ID","CLAUDE_3_OPUS_2024029_MODEL_ID","CLAUDE_3_5_SONNET_20240620_MODEL_ID","CLAUDE_3_5_SONNET_20241022_MODEL_ID","CLAUDE_3_7_SONNET_20250219_MODEL_ID","CLAUDE_3_HAIKU_20240307_MODEL_ID","CLAUDE_3_5_HAIKU_20241022_MODEL_ID","CLAUDE_2_1_MODEL_ID","CLAUDE_INSTANT_1_2_MODEL_ID","MISTRAL_LARGE_MODEL_ID","MISTRAL_MEDIUM_MODEL_ID","MISTRAL_SMALL_MODEL_ID","MISTRAL_CODESTRAL_MODEL_ID","GEMINI_1_5_PRO_LATEST_MODEL_ID","GEMINI_1_5_FLASH_LATEST_MODEL_ID","GEMINI_2_FLASH_PREVIEW_MODEL_ID","GEMINI_2_FLASH_THINKING_PREVIEW_MODEL_ID","GEMINI_2_FLASH_MODEL_ID","GEMINI_2_FLASH_LITE_PREVIEW_MODEL_ID","GEMINI_2_PRO_PREVIEW_MODEL_ID","TOGETHERAI_LLAMA_3_3_70B_INSTRUCT_TURBO_MODEL_ID","TOGETHERAI_QWEN_2_5_CODER_32B_INSTRUCT_MODEL_ID","TOGETHERAI_QWEN_QWQ_32B_PREVIEW_MODEL_ID","TOGETHERAI_QWEN_72B_INSTRUCT_MODEL_ID","TOGETHERAI_DEEPSEEK_V3_MODEL_ID","TOGETHERAI_DEEPSEEK_R1_MODEL_ID","DEEPSEEK_CHAT_MODEL_ID","DEEPSEEK_REASONER_MODEL_ID","FIREWORKS_DEEPSEEK_R1_MODEL_ID","MODEL_IDS","isModelId","modelId","ModelIdCodec","LEGACY_OPEN_AI_TOOL_USE_META_PROMPT","GPT_3_5_TURBO_MODEL_CONFIG","displayName","contextSize","recommendedTopK","recommendedExhaustiveTopK","largeModel","description","shortDescription","isLegacy","toolUseMetaPrompt","generationTokensCount","supportsVision","GPT_4_TURBO_MODEL_CONFIG","GPT_4O_20240806_MODEL_CONFIG","O1_MODEL_CONFIG","featureFlag","customAssistantFeatureFlag","O1_HIGH_REASONING_MODEL_CONFIG","reasoningEffort","O1_MINI_MODEL_CONFIG","O3_MINI_MODEL_CONFIG","O3_MINI_HIGH_REASONING_MODEL_CONFIG","ANTHROPIC_DELIMITERS_CONFIGURATION","incompleteDelimiterPatterns","delimiters","openingPattern","closingPattern","classification","swallow","ANTHROPIC_TOOL_USE_META_PROMPT","CLAUDE_3_OPUS_DEFAULT_MODEL_CONFIG","delimitersConfiguration","tokenCountAdjustment","CLAUDE_3_5_SONNET_20240620_DEPRECATED_MODEL_CONFIG","CLAUDE_3_7_SONNET_DEFAULT_MODEL_CONFIG","CLAUDE_3_HAIKU_DEFAULT_MODEL_CONFIG","CLAUDE_2_DEFAULT_MODEL_CONFIG","CLAUDE_INSTANT_DEFAULT_MODEL_CONFIG","MISTRAL_MEDIUM_MODEL_CONFIG","MISTRAL_CODESTRAL_MODEL_CONFIG","GEMINI_2_FLASH_PREVIEW_MODEL_CONFIG","GEMINI_2_FLASH_THINKING_PREVIEW_MODEL_CONFIG","GEMINI_2_FLASH_MODEL_CONFIG","GEMINI_2_FLASH_LITE_PREVIEW_MODEL_CONFIG","GEMINI_2_PRO_PREVIEW_MODEL_CONFIG","TOGETHERAI_LLAMA_3_3_70B_INSTRUCT_TURBO_MODEL_CONFIG","TOGETHERAI_QWEN_2_5_CODER_32B_INSTRUCT_MODEL_CONFIG","TOGETHERAI_QWEN_QWQ_32B_PREVIEW_MODEL_CONFIG","TOGETHERAI_QWEN_72B_INSTRUCT_MODEL_CONFIG","TOGETHERAI_DEEPSEEK_V3_MODEL_CONFIG","TOGETHERAI_DEEPSEEK_R1_MODEL_CONFIG","DEEPSEEK_CHAT_MODEL_CONFIG","DEEPSEEK_REASONER_MODEL_CONFIG","FIREWORKS_DEEPSEEK_R1_MODEL_CONFIG","SUPPORTED_MODEL_CONFIGS","isSupportedModel","model","maybeSupportedModel","some","m","GLOBAL_AGENTS_SID","getGlobalAgentAuthorName","agentId","GPT4","O1","O1_MINI","O1_HIGH_REASONING","O3_MINI","CLAUDE_INSTANT","CLAUDE_3_OPUS","CLAUDE_3_SONNET","CLAUDE_3_7_SONNET","CLAUDE_3_HAIKU","CLAUDE_2","MISTRAL_LARGE","MISTRAL_MEDIUM","MISTRAL_SMALL","GEMINI_PRO","DEEPSEEK_R1","CUSTOM_ORDER","DUST","SLACK","NOTION","GOOGLE_DRIVE","GITHUB","INTERCOM","HELPER","compareAgentsForSort","a","b","userFavorite","sId","scope","aIndex","indexOf","bIndex","localeCompare","sensitivity","LimitCodec","GetAgentConfigurationsQuerySchema","view","withUsage","withAuthors","withFeedbacks","limit","sort","GetAgentConfigurationsHistoryQuerySchema","GetAgentConfigurationsLeaderboardQuerySchema","DataSourceFilterParentsCodec","not","OptionalDataSourceFilterTagsCodec","partial","mode","DataSourceFilterCodec","intersection","RetrievalActionConfigurationSchema","relativeTimeFrame","topK","dataSources","dataSourceViewId","filter","DustAppRunActionConfigurationSchema","appWorkspaceId","appId","TablesQueryActionConfigurationSchema","tables","tableId","WebsearchActionConfigurationSchema","BrowseActionConfigurationSchema","ReasoningActionConfigurationSchema","temperature","ProcessActionConfigurationSchema","schema","multiActionsCommonFields","requiredMultiActionsCommonFields","ActionConfigurationSchema","ModelConfigurationSchema","IsSupportedModelSchema","i","PostOrPatchAgentConfigurationRequestBodySchema","assistant","instructions","pictureUrl","actions","templateId","maxStepsPerRun","visualizationEnabled","removeNulls","arr","isString","isEmptyString","str","trim","uniq","Array","from","Set","TABLE_PREFIX","MAX_FILE_SIZES","code","delimited","image","maxFileSizeToHumanReadable","size","decimals","toFixed","BIG_FILE_SIZE","isBigFileSize","ensureFileSize","contentType","fileSize","format","getFileFormat","cat","FILE_FORMATS","exts","supportedUploadableContentType","Object","keys","isSupportedFileContentType","isPublicySupportedUseCase","useCase","isSupportedImageContentType","isSupportedDelimitedTextContentType","getFileFormatCategory","extensionsForContentType","contentTypeForExtension","extension","_entries$find","entries","find","_ref","_","getSupportedFileExtensions","values","flatMap","getSupportedNonImageFileExtensions","getSupportedNonImageMimeTypes","_ref2","key","InternalPostMessagesRequestBodySchema","mentions","configurationId","timezone","profilePictureUrl","ContentFragmentBaseSchema","supersededContentFragmentId","getSupportedInlinedContentType","_getSupportedNonImage","first","second","rest","slice","concat","ContentFragmentInputWithFileIdSchema","fileId","isContentFragmentInputWithContentType","fragment","InternalPostContentFragmentRequestBodySchema","InternalPostConversationsRequestBodySchema","visibility","contentFragments","InternalPostBuilderSuggestionsRequestBodySchema","inputs","current_instructions","former_suggestions","BuilderSuggestionsResponseBodySchema","suggestions","reason","BuilderEmojiSuggestionsResponseBodySchema","emoji","backgroundColor","InternalPostBuilderProcessActionGenerateSchemaRequestBodySchema","PostRestrictedSpace","memberIds","isRestricted","PostUnrestrictedSpace","PostSpaceRequestBodySchema","PatchSpaceMembersRequestBodySchema","ContentSchema","parentsIn","PatchSpaceRequestBodySchema","PostDataSourceViewSchema","PostNotionSyncPayloadSchema","urls","method","GetPostNotionSyncResponseBodySchema","syncResults","timestamp","error_message","UpsertContextSchema","sync_type","FrontDataSourceDocumentSection","recursion","PostDataSourceDocumentRequestBodySchema","Int","parent_id","source_url","upsert_context","text","light_document_output","async","mime_type","PostDataSourceWithNameDocumentRequestBodySchema","PatchDataSourceTableRequestBodySchema","truncate","mimeType","sourceUrl","ParentsToAddRemoveSchema","parentsToAdd","parentsToRemove","ParentsInSchema","PatchDataSourceViewSchema","DATA_SOURCE_VIEW_CATEGORIES","isValidDataSourceViewCategory","category","isDataSourceViewCategoryWithoutApps","isWebsiteOrFolderCategory","APP_NAME_REGEXP","BrowseResultSchema","requestedUrl","browsedUrl","responseCode","errorMessage","BrowseActionOutputSchema","results","getDustAppRunResultsFileTitle","appName","resultsFileContentType","pop","BaseAction","generatedFiles","getGeneratedFiles","isTablesQueryConfiguration","isTablesQueryActionType","isDustAppRunConfiguration","isDustAppRunActionType","isBaseActionClass","action","isRetrievalConfiguration","isRetrievalActionType","isProcessConfiguration","isProcessActionType","isWebsearchConfiguration","isSearchLabelsConfiguration","isReasoningConfiguration","isWebsearchActionType","isBrowseConfiguration","isBrowseActionType","isConversationIncludeFileConfiguration","isConversationIncludeFileConfigurationActionType","throwIfInvalidAgentConfiguration","configation","forEach","templateConfiguration","agentConfiguration","PROCESS_SCHEMA_ALLOWED_TYPES","renderSchemaPropertiesAsJSONSchema","jsonSchema","length","f","required_data","PROCESS_ACTION_TOP_K","getTablesQueryResultsFileTitle","output","query_title","getTablesQueryResultsFileAttachments","resultsFileId","resultsFileSnippet","sectionFileId","fileTitle","resultsFileAttachment","sectionFileAttachment","WebsearchAppResultSchema","snippet","link","WebsearchAppActionOutputSchema","WebsearchResultSchema","reference","WebsearchActionOutputSchema","AGENT_CONFIGURATION_SCOPES","DEFAULT_MAX_STEPS_USE_PER_RUN","MAX_STEPS_USE_PER_RUN_LIMIT","TAILWIND_COLOR_NAMES","TAILWIND_COLOR_SHADES","generateTailwindBackgroundColors","tailwindColors","color","shade","push","ASSISTANT_CREATIVITY_LEVELS","AssistantCreativityLevelCodec","ASSISTANT_CREATIVITY_LEVEL_DISPLAY_NAMES","deterministic","factual","balanced","creative","ASSISTANT_CREATIVITY_LEVEL_TEMPERATURES","ASSISTANT_BUILDER_DRAWER_TABS","isAgentMention","isUserMessageType","ACTION_RUNNING_LABELS","browse_action","conversation_include_file_action","conversation_list_files_action","dust_app_run_action","process_action","reasoning_action","retrieval_action","search_labels_action","tables_query_action","websearch_action","isAgentMessageType","CONVERSATION_ERROR_TYPES","ConversationError","isTextContent","isContentFragmentMessageTypeModel","contentFragment","role","isUserMessageTypeModel","userMessage","TEMPLATES_TAG_CODES","TEMPLATES_TAGS_CONFIG","CONTENT","label","DATA","DESIGN","ENGINEERING","FINANCE","HIRING","KNOWLEDGE","MARKETING","OPERATIONS","PRODUCT","PRODUCT_MANAGEMENT","PRODUCTIVITY","SALES","UX_DESIGN","UX_RESEARCH","WRITING","isTemplateTagCodeArray","isArray","every","TemplateTagCodeTypeCodec","keyof","_extends","MULTI_ACTION_PRESETS","DUST_APP_RUN","RETRIEVAL_SEARCH","TABLES_QUERY","PROCESS","WEB_NAVIGATION","MultiActionPresetCodec","TemplateActionTypePreset","NonEmptyString","help","TemplateActionsPreset","TEMPLATE_VISIBILITIES","TemplateVisibilityCodec","CreateTemplateFormSchema","handle","timeFrameDuration","timeFrameUnit","helpActions","helpInstructions","presetActions","presetInstructions","presetModelId","presetTemperature","nonEmptyArray","validCommands","isGetFileRequest","identifier","messageUniqueId","params","isGetCodeToExecuteRequest","isSetContentHeightRequest","height","isSetErrorMessageRequest","isDownloadFileRequest","blob","Blob","isDisplayCodeRequest","isVisualizationRPCRequest","isContentFragmentType","CONNECTOR_PROVIDERS","isConnectorProvider","val","isDataSourceNameValid","trimmed","defaultSelectionConfiguration","isSelectAll","selectedResources","tagsFilter","GROUP_KINDS","isGroupKind","isSystemGroupKind","isGlobalGroupKind","prettifyGroupName","group","kind","DustGroupIdsHeader","getGroupIdsFromHeaders","groupIds","toLowerCase","getHeaderFromGroupIds","ActionResponseBaseSchema","run_id","created","Integer","run_type","run","blocks","block_type","success_count","error_count","traces","UnknownArray","specification_hash","isActionResponseBase","response","isRight","_process$env","process","env","_process$env$DUST_MAN","DUST_MANAGED_ANTHROPIC_API_KEY","_process$env$DUST_MAN2","DUST_MANAGED_AZURE_OPENAI_API_KEY","_process$env$DUST_MAN3","DUST_MANAGED_AZURE_OPENAI_ENDPOINT","_process$env$DUST_MAN4","DUST_MANAGED_OPENAI_API_KEY","_process$env$DUST_MAN5","DUST_MANAGED_TEXTSYNTH_API_KEY","_process$env$DUST_MAN6","DUST_MANAGED_MISTRAL_API_KEY","_process$env$DUST_MAN7","DUST_MANAGED_GOOGLE_AI_STUDIO_API_KEY","_process$env$DUST_MAN8","DUST_MANAGED_SERP_API_KEY","_process$env$DUST_MAN9","DUST_MANAGED_BROWSERLESS_API_KEY","_process$env$DUST_MAN10","DUST_MANAGED_TOGETHERAI_API_KEY","_process$env$DUST_MAN11","DUST_MANAGED_DEEPSEEK_API_KEY","_process$env$DUST_MAN12","DUST_MANAGED_FIREWORKS_API_KEY","credentialsFromProviders","providers","credentials","JSON","parse","api_key","endpoint","dustManagedCredentials","ANTHROPIC_API_KEY","AZURE_OPENAI_API_KEY","AZURE_OPENAI_ENDPOINT","MISTRAL_API_KEY","OPENAI_API_KEY","TEXTSYNTH_API_KEY","GOOGLE_AI_STUDIO_API_KEY","SERP_API_KEY","BROWSERLESS_API_KEY","TOGETHERAI_API_KEY","DEEPSEEK_API_KEY","FIREWORKS_API_KEY","CONNECTORS_ERROR_TYPES","isConnectorError","ConnectorsAPI","logger","_url","_secret","_logger","secret","createConnector","_createConnector","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","wrap","_callee$","_context","prev","next","_fetchWithError","encodeURIComponent","getDefaultHeaders","body","stringify","sent","abrupt","_resultFromResponse","stop","_x","apply","arguments","updateConfiguration","_updateConfiguration","_callee2","_callee2$","_context2","_x2","updateConnector","_updateConnector","_callee3","_ref3","_callee3$","_context3","_x3","stopConnector","_stopConnector","_callee4","_callee4$","_context4","_x4","pauseConnector","_pauseConnector","_callee5","_callee5$","_context5","_x5","unpauseConnector","_unpauseConnector","_callee6","_callee6$","_context6","_x6","resumeConnector","_resumeConnector","_callee7","_callee7$","_context7","_x7","syncConnector","_syncConnector","_callee8","_callee8$","_context8","_x8","deleteConnector","_deleteConnector","_callee9","_callee9$","_context9","_x9","_x10","getConnectorPermissions","_getConnectorPermissions","_callee10","_ref4","filterPermission","_ref4$viewType","viewType","queryParams","qs","_callee10$","_context10","URLSearchParams","append","_x11","setConnectorPermissions","_setConnectorPermissions","_callee11","_ref5","resources","_callee11$","_context11","info","_ref6","permission","internal_id","_x12","getConnector","_getConnector","_callee12","parsedId","_callee12$","_context12","parseInt","isNaN","_x13","getConnectorFromDataSource","_getConnectorFromDataSource","_callee13","_dataSource$connector","_callee13$","_context13","_x14","getConnectors","_getConnectors","_callee14","connectorIds","_callee14$","_context14","_x15","_x16","setConnectorConfig","_setConnectorConfig","_callee15","configKey","configValue","_callee15$","_context15","_x17","_x18","_x19","getConnectorConfig","_getConnectorConfig","_callee16","_callee16$","_context16","_x20","_x21","linkSlackChannelsWithAgent","_linkSlackChannelsWithAgent","_callee17","_ref7","slackChannelInternalIds","agentConfigurationId","_callee17$","_context17","connector_id","agent_configuration_id","slack_channel_internal_ids","_x22","getSlackChannelsLinkedWithAgent","_getSlackChannelsLinkedWithAgent","_callee18","_ref8","_callee18$","_context18","_x23","admin","_admin","_callee19","adminCommand","_callee19$","_context19","_x24","Authorization","_fetchWithError2","_callee20","init","now","_callee20$","_context20","Date","fetch","t0","connectorsError","_x25","_x26","_resultFromResponse2","_callee21","json","_json","_err","_err2","_callee21$","_context21","parseError","rawText","ok","_x27","MAX_CHUNK_SIZE","EMBEDDING_CONFIGS","openai","model_id","provider_id","splitter_id","max_chunk_size","mistral","isCoreAPIError","isRowMatchingSchema","row","_loop","_Object$entries$_i","_Object$entries","_i","k","schemaEntry","value_type","epoch","string_value","_ret","CoreAPISearchScopeSchema","CoreAPIDatasourceViewFilterSchema","data_source_id","view_filter","search_scope","MIN_SEARCH_QUERY_SIZE","CoreAPINodesSearchFilterSchema","data_source_views","excluded_node_mime_types","readonlyArray","node_ids","node_types","formatDataSourceDisplayName","part","word","charAt","toUpperCase","CoreAPI","_apiKey","apiKey","createProject","_createProject","deleteProject","_deleteProject","projectId","getDatasets","_getDatasets","getDataset","_getDataset","datasetName","datasetHash","createDataset","_createDataset","datasetId","dataset_id","cloneProject","_cloneProject","createRun","_createRun","workspace","groups","runType","specification","specificationHash","secrets","isSystemKey","_ref7$storeBlocksResu","storeBlocksResults","g","store_blocks_results","createRunStream","_createRunStream","_ref8$storeBlocksResu","hasRunId","rejectDustRunIdPromise","resolveDustRunIdPromise","dustRunIdPromise","parser","reader","streamChunks","Promise","resolve","reject","createParser","event","_data$content","getReader","_wrapAsyncGenerator","_yield$_awaitAsyncGen","_awaitAsyncGenerator","read","feed","TextDecoder","errorStr","errorSource","setImmediate","releaseLock","finish","chunkStream","dustRunId","deleteRun","_deleteRun","_ref9","runId","getRunsBatch","_getRunsBatch","_ref10","dustRunIds","run_ids","getRun","_getRun","_ref11","getRunStatus","_getRunStatus","_ref12","getSpecificationHashes","_getSpecificationHashes","_ref13","getSpecification","_getSpecification","_ref14","saveSpecification","_saveSpecification","_ref15","getRunBlock","_getRunBlock","_ref16","blockType","blockName","createDataSource","_createDataSource","_ref17","updateDataSource","_updateDataSource","_ref18","getDataSource","_getDataSource","_ref19","deleteDataSource","_deleteDataSource","_ref20","searchDataSource","_searchDataSource","_callee22","_callee22$","_context22","top_k","full_text","fullText","target_document_tokens","getDataSourceDocuments","_getDataSourceDocuments","_callee23","_ref21","pagination","documentIds","viewFilter","_callee23$","_context23","String","offset","_x28","getDataSourceDocument","_getDataSourceDocument","_callee24","_ref22","versionHash","_callee24$","_context24","_x29","getDataSourceDocumentVersions","_getDataSourceDocumentVersions","_callee25","_ref23","latest_hash","_ref23$limit","_ref23$offset","_callee25$","_context25","_x30","upsertDataSourceDocument","_upsertDataSourceDocument","_callee26","_ref24","_ref24$lightDocumentO","lightDocumentOutput","_callee26$","_context26","document_id","_x31","getDataSourceDocumentBlob","_getDataSourceDocumentBlob","_callee27","_ref25","_callee27$","_context27","_x32","updateDataSourceDocumentTags","_updateDataSourceDocumentTags","_callee28","_ref26","addTags","removeTags","_callee28$","_context28","add_tags","remove_tags","_x33","updateDataSourceDocumentParents","_updateDataSourceDocumentParents","_callee29","_ref27","_callee29$","_context29","_x34","deleteDataSourceDocument","_deleteDataSourceDocument","_callee30","_ref28","_callee30$","_context30","_x35","scrubDataSourceDocumentDeletedVersions","_scrubDataSourceDocumentDeletedVersions","_callee31","_ref29","_callee31$","_context31","_x36","tokenize","_tokenize","_callee32","_ref30","_callee32$","_context32","keepalive","_x37","tokenizeBatch","_tokenizeBatch","_callee33","_ref31","texts","_callee33$","_context33","_x38","dataSourceTokenize","_dataSourceTokenize","_callee34","_ref32","_callee34$","_context34","_x39","tableValidateCSVContent","_tableValidateCSVContent","_callee35","_ref33","bucket","bucketCSVPath","_callee35$","_context35","bucket_csv_path","_x40","upsertTable","_upsertTable","_callee36","_ref34","remoteDatabaseTableId","remoteDatabaseSecretId","_callee36$","_context36","table_id","remote_database_table_id","remote_database_secret_id","_x41","getTable","_getTable","_callee37","_ref35","_callee37$","_context37","_x42","getTables","_getTables","_callee38","_ref36","tableIds","_callee38$","_context38","_x43","_x44","deleteTable","_deleteTable","_callee39","_ref37","_callee39$","_context39","_x45","updateTableParents","_updateTableParents","_callee40","_ref38","_callee40$","_context40","_x46","upsertTableRows","_upsertTableRows","_callee41","_ref39","rows","_callee41$","_context41","_x47","tableUpsertCSVContent","_tableUpsertCSVContent","_callee42","_ref40","_callee42$","_context42","_x48","getTableRow","_getTableRow","_callee43","_ref41","rowId","_callee43$","_context43","_x49","getTableRows","_getTableRows","_callee44","_ref42","_callee44$","_context44","_x50","getDataSourceTableBlob","_getDataSourceTableBlob","_callee45","_ref43","_callee45$","_context45","_x51","deleteTableRow","_deleteTableRow","_callee46","_ref44","_callee46$","_context46","_x52","queryDatabase","_queryDatabase","_callee47","_ref45","_callee47$","_context47","_x53","getDataSourceFolders","_getDataSourceFolders","_callee48","_ref46","folderIds","_callee48$","_context48","_x54","_x55","searchNodes","_searchNodes","_callee49","_ref47","options","_callee49$","_context49","_x56","getDataSourceStats","_getDataSourceStats","_callee50","_ref48","_callee50$","_context50","_x57","searchTags","_searchTags","_callee51","_ref49","queryType","dataSourceViews","dataSourceViewsFilter","_callee51$","_context51","dsv","_dsv$parentsIn","dustAPIDataSourceId","query_type","_x58","getDataSourceFolder","_getDataSourceFolder","_callee52","_ref50","folderId","_callee52$","_context52","_x59","upsertDataSourceFolder","_upsertDataSourceFolder","_callee53","_ref51","providerVisibility","_callee53$","_context53","folder_id","provider_visibility","_x60","deleteDataSourceFolder","_deleteDataSourceFolder","_callee54","_ref52","_callee54$","_context54","_x61","_callee55","_callee55$","_context55","coreError","_x62","_x63","_callee56","_json2","_json3","_err3","_res","_err4","_callee56$","_context56","_x64","API_ERROR_TYPES","isAPIError","isAPIErrorResponse","labsTranscriptsProviders","createIoTsCodecFromArgs","codecProps","supportedResourceTypes","isSupportedResourceType","resourceType","assertNever","x","ROLES","ACTIVE_ROLES","keyObject","fromEntries","RoleSchema","ActiveRoleSchema","isActiveRoleType","formatUserFullName","user","firstName","lastName","Boolean","isAdmin","isBuilder","isUser","isOnlyUser","isOnlyBuilder","isOnlyAdmin","DustUserEmailHeader","getUserEmailFromHeaders","email","getHeaderFromUserEmail","InviteMemberFormSchema","MEMBERSHIP_ROLE_TYPES","isMembershipRoleType","MAX_MESSAGE_TIMEFRAMES","isMaxMessagesTimeframeType","SUBSCRIPTION_STATUSES","CreatePlanFormSchema","isSlackbotAllowed","isSlackAllowed","isNotionAllowed","isGoogleDriveAllowed","isGithubAllowed","isIntercomAllowed","isConfluenceAllowed","isWebCrawlerAllowed","maxMessages","NumberFromString","maxMessagesTimeframe","lifetime","dataSourcesCount","dataSourcesDocumentsCount","dataSourcesDocumentsSizeMb","maxUsers","maxVaults","EnterpriseUpgradeFormSchema","stripeSubscriptionId","planCode","SUPPORTED_OPERATIONS","hasRolePermissions","resourcePermission","DocumentViewRawContentKey","DocumentDeletionKey","UNIQUE_SPACE_KINDS","isUniqueSpaceKind","TRACKER_FREQUENCIES","FREQUENCY_DISPLAY_TEXT","never","daily","weekly","monthly","DEPTH_DISPLAY_TEXT","supportedEnterpriseConnectionStrategies","isSupportedEnterpriseConnectionStrategy","strategy","connectionStrategyToHumanReadable","isOAuthAPIError","OAuthAPI","apiUrl","createConnection","_createConnection","metadata","migratedCredentials","relatedCredential","migrated_credentials","related_credential","finalizeConnection","_finalizeConnection","redirectUri","redirect_uri","getAccessToken","_getAccessToken","postCredentials","_postCredentials","userId","user_id","workspace_id","getCredentials","_getCredentials","credentialsId","oAuthError","oauthError","OAUTH_ACCESS_TOKEN_CACHE_TTL","CACHE","Map","getOAuthConnectionAccessToken","_getOAuthConnectionAccessToken","cached","get","local_expiry","set","getConnectionCredentials","_getConnectionCredentials","OAUTH_USE_CASES","isOAuthUseCase","OAUTH_PROVIDERS","isOAuthProvider","isOAuthConnectionType","connection","connection_id","isValidZendeskSubdomain","isValidSalesforceDomain","endsWith","isValidSalesforceClientId","isValidSalesforceClientSecret","PROVIDERS_WITH_WORKSPACE_CONFIGURATIONS","CREDENTIALS_PROVIDERS","isCredentialProvider","isProviderWithWorkspaceConfiguration","SnowflakeCredentialsSchema","username","password","account","warehouse","CheckBigQueryCredentialsSchema","project_id","private_key_id","private_key","client_email","client_id","auth_uri","token_uri","auth_provider_x509_cert_url","client_x509_cert_url","universe_domain","BigQueryCredentialsWithLocationSchema","location","ApiKeyCredentialsSchema","SalesforceCredentialsSchema","client_secret","isSnowflakeCredentials","isModjoCredentials","isBigQueryWithLocationCredentials","isSalesforceCredentials","setupOAuthConnection","_setupOAuthConnection","dustClientFacingUrl","extraConfig","oauthPopup","window","authComplete","popupMessageEventListener","origin","_event$data","removeEventListener","close","addEventListener","checkPopupStatus","setInterval","closed","clearInterval","setTimeout","statsDClient","getStatsDClient","StatsD","redisClient","_redisClient","redisUri","client","createClient","on","console","log","increment","decrement","connect","cacheWithRedis","fn","resolver","ttlMs","REDIS_CACHE_URI","redisCli","cacheVal","result","_args","lock","PX","unlock","quit","locks","_lock","unlockFn","SLACK_USER_OPERATION_BOT_TOKEN","NODE_ENV","sendInitDbMessage","_sendInitDbMessage","service","commitId","jsonRes","child_process","execSync","channel","mrkdown","isDevelopment","isDustWorkspace","w","PRODUCTION_DUST_WORKSPACE_ID","WHITELISTABLE_FEATURES","isWhitelistableFeature","feature","generateMimeTypes","resourceTypes","reduce","acc","_extends2","MIME_TYPES","CONFLUENCE","MICROSOFT","SNOWFLAKE","WEBCRAWLER","ZENDESK","BIGQUERY","SALESFORCE","GONG","RateLimitError","rateLimiterRedisClient","getRedisClient","_getRedisClient","REDIS_URI","RATE_LIMITER_PREFIX","makeRateLimiterKey","rateLimiter","_rateLimiter","maxPerTimeframe","timeframeSeconds","redisKey","redis","zcountRes","remaining","totalTimeMs","zCount","getTime","zAdd","score","expire","distribution","expireRateLimiterKey","_expireRateLimiterKey","isExpired","getTimeframeSecondsFromLiteral","timeframeLiteral","withRetries","_temp","_ref$retries","retries","_ref$delayBetweenRetr","delayBetweenRetriesMs","errors","sleepTime","_loop$","t1","Math","pow","warn","attempt","delegateYield","readableStreamToReadable","webStream","Readable","fromWeb","createPageMetadataPrefix","pageNumber","transformStream","pageSelector","state","insidePage","pageDepth","currentPageBuffer","Parser","onopentag","attribs","ontext","onclosetag","htmlParsingTransform","onerror","destroy","decodeEntities","Transform","objectMode","transform","chunk","_encoding","callback","write","flush","end","pipe","HTML_TAGS","ROW","CELL","transformStreamToCSV","selector","currentRow","currentTag","lastTag","csv","TikaResponseCodec","pagePrefixesPerMimeType","supportedContentTypes","contentTypeConfig","handler","transformer","isTextExtractionSupportedContentType","DEFAULT_HANDLER","DEFAULT_TIMEOUT_IN_MS","TextExtraction","getAdditionalHeaders","enableOcr","fromBuffer","_fromBuffer","fileBuffer","queryTika","processResponse","fromStream","_fromStream","fileStream","responseStream","additionalHeaders","toWeb","duplex","_queryTika","_contentTypeConfig$co","_contentTypeConfig$co2","handlerType","decodedReponse","Accept","_contentTypeConfig$co3","processContentBySelector","processDefaultResponse","contentSelector","html","stream","contentDivs","currentPageContent","sendUserOperationMessage","_sendUserOperationMessage","SLACK_USER_OPERATION_CHANNEL_ID","concurrentExecutor","_concurrentExecutor","items","iterator","_ref$concurrency","concurrency","worker","_worker","_worker3","work","shift","item","index","_worker2","all","EnvironmentConfig","getEnvVariable","cachedValue","cache","getOptionalEnvVariable","isValidDate","date","valueOf","errorToString","normalizeError","once","setupGlobalErrorHandler","promise","uuid","panic","md5","crypto","createHash","update","digest","saltedKey","DUST_DEVELOPERS_SECRETS_SECRET","encrypt","iv","cipher","createCipheriv","encrypted","decrypt","decipher","createDecipheriv","decrypted","safeSubstring","start","isTrailingLoneSurrogate","charCodeAt","isLeadingLoneSurrogate","pluralize","count","sanitizeString","rawString","slugify","normalize","isSlugified","redactString","redacted","repeat","omission","safeParseJSON","stripNullBytes","InvalidStructuredDataHeaderError","ParsingCsvError","_Error2","getSanitizedHeaders","rawHeaders","curr","slugifiedName","conflictResolved","e","guessDelimiter","_guessDelimiter","delimiter","delimiterColsCount","_arr","d","records","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","firstRecord","secondRecord","to","skipEmptyLines","_asyncIterator","parseAndStringifyCsv","_parseAndStringifyCsv","tableCsv","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","columns","CsvError","header"],"mappings":"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"}