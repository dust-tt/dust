"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapFromEntries = void 0;
/**
 * @since 0.5.19
 */
var A = __importStar(require("fp-ts/lib/Array"));
var Either_1 = require("fp-ts/lib/Either");
var Map_1 = require("fp-ts/lib/Map");
var Semigroup_1 = require("fp-ts/lib/Semigroup");
var function_1 = require("fp-ts/function");
var t = __importStar(require("io-ts"));
var every = function (pk, pv) { return function (ma) {
    var entries = ma.entries();
    var e;
    while (!(e = entries.next()).done) {
        if (pk(e.value[0]) === false || pv(e.value[1]) === false) {
            return false;
        }
    }
    return true;
}; };
/**
 * @since 0.5.19
 */
function mapFromEntries(keyCodec, KO, valueCodec, name) {
    if (name === void 0) { name = "Map<" + keyCodec.name + ", " + valueCodec.name + ">"; }
    var arr = t.array(t.tuple([keyCodec, valueCodec]));
    var toArrayO = Map_1.toArray(KO);
    var fromArrayO = Map_1.fromFoldable(KO, Semigroup_1.getLastSemigroup(), A.Foldable);
    var everyO = every(keyCodec.is, valueCodec.is);
    return new t.Type(name, function (u) { return u instanceof Map && everyO(u); }, function (u, c) {
        return function_1.pipe(arr.validate(u, c), Either_1.chain(function (as) {
            var map = fromArrayO(as);
            return map.size !== as.length ? t.failure(u, c) : t.success(map);
        }));
    }, function (a) { return arr.encode(toArrayO(a)); });
}
exports.mapFromEntries = mapFromEntries;
