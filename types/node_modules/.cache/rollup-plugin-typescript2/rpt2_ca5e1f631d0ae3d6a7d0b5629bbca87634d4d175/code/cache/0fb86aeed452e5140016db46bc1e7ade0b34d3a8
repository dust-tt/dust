{"code":"export function isAgentMention(arg) {\n    return arg.configurationId !== undefined;\n}\nexport function isUserMention(arg) {\n    const maybeUserMention = arg;\n    return (maybeUserMention.provider !== undefined &&\n        maybeUserMention.providerId !== undefined);\n}\nexport function isUserMessageType(arg) {\n    return arg.type === \"user_message\";\n}\nexport function isAgentMessageType(arg) {\n    return arg.type === \"agent_message\";\n}\nexport function isContentFragmentType(arg) {\n    return arg.type === \"content_fragment\";\n}\n//# sourceMappingURL=conversation.js.map","references":["/Users/edouardwautier/Projects/dust/types/src/front/assistant/actions/database.ts","/Users/edouardwautier/Projects/dust/types/src/front/assistant/actions/dust_app_run.ts","/Users/edouardwautier/Projects/dust/types/src/front/assistant/actions/retrieval.ts","/Users/edouardwautier/Projects/dust/types/src/front/assistant/agent.ts","/Users/edouardwautier/Projects/dust/types/src/front/user.ts","/Users/edouardwautier/Projects/dust/types/src/shared/model_id.ts"],"map":"{\"version\":3,\"file\":\"conversation.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/front/assistant/conversation.ts\"],\"names\":[],\"mappings\":\"AAwBA,MAAM,UAAU,cAAc,CAAC,GAAgB;IAC7C,OAAQ,GAAoB,CAAC,eAAe,KAAK,SAAS,CAAC;AAC7D,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,GAAgB;IAC5C,MAAM,gBAAgB,GAAG,GAAkB,CAAC;IAC5C,OAAO,CACL,gBAAgB,CAAC,QAAQ,KAAK,SAAS;QACvC,gBAAgB,CAAC,UAAU,KAAK,SAAS,CAC1C,CAAC;AACJ,CAAC;AAyCD,MAAM,UAAU,iBAAiB,CAC/B,GAA6D;IAE7D,OAAO,GAAG,CAAC,IAAI,KAAK,cAAc,CAAC;AACrC,CAAC;AA0CD,MAAM,UAAU,kBAAkB,CAChC,GAA6D;IAE7D,OAAO,GAAG,CAAC,IAAI,KAAK,eAAe,CAAC;AACtC,CAAC;AA+BD,MAAM,UAAU,qBAAqB,CACnC,GAA6D;IAE7D,OAAO,GAAG,CAAC,IAAI,KAAK,kBAAkB,CAAC;AACzC,CAAC\"}","dtsmap":{"name":"/Users/edouardwautier/Projects/dust/types/node_modules/.cache/rollup-plugin-typescript2/placeholder/front/assistant/conversation.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"conversation.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/front/assistant/conversation.ts\"],\"names\":[],\"mappings\":\"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\"}"},"dts":{"name":"/Users/edouardwautier/Projects/dust/types/node_modules/.cache/rollup-plugin-typescript2/placeholder/front/assistant/conversation.d.ts","writeByteOrderMark":false,"text":"import { DatabaseQueryActionType } from \"../../front/assistant/actions/database\";\nimport { DustAppRunActionType } from \"../../front/assistant/actions/dust_app_run\";\nimport { RetrievalActionType } from \"../../front/assistant/actions/retrieval\";\nimport { AgentConfigurationType } from \"../../front/assistant/agent\";\nimport { UserType, WorkspaceType } from \"../../front/user\";\nimport { ModelId } from \"../../shared/model_id\";\n/**\n * Mentions\n */\nexport type AgentMention = {\n    configurationId: string;\n};\nexport type UserMention = {\n    provider: string;\n    providerId: string;\n};\nexport type MentionType = AgentMention | UserMention;\nexport type MessageVisibility = \"visible\" | \"deleted\";\nexport declare function isAgentMention(arg: MentionType): arg is AgentMention;\nexport declare function isUserMention(arg: MentionType): arg is UserMention;\nexport type ConversationMessageReactions = {\n    messageId: string;\n    reactions: MessageReactionType[];\n}[];\nexport type MessageReactionType = {\n    emoji: string;\n    users: {\n        userId: ModelId | null;\n        username: string;\n        fullName: string | null;\n    }[];\n};\n/**\n * User messages\n */\nexport type UserMessageContext = {\n    username: string;\n    timezone: string;\n    fullName: string | null;\n    email: string | null;\n    profilePictureUrl: string | null;\n};\nexport type UserMessageType = {\n    id: ModelId;\n    created: number;\n    type: \"user_message\";\n    sId: string;\n    visibility: MessageVisibility;\n    version: number;\n    user: UserType | null;\n    mentions: MentionType[];\n    content: string;\n    context: UserMessageContext;\n};\nexport declare function isUserMessageType(arg: UserMessageType | AgentMessageType | ContentFragmentType): arg is UserMessageType;\n/**\n * Agent messages\n */\nexport type AgentActionType = RetrievalActionType | DustAppRunActionType | DatabaseQueryActionType;\nexport type AgentMessageStatus = \"created\" | \"succeeded\" | \"failed\" | \"cancelled\";\n/**\n * Both `action` and `message` are optional (we could have a no-op agent basically).\n *\n * Since `action` and `message` are bundled together, it means that we will only be able to retry\n * them together in case of error of either. We store an error only here whether it's an error\n * coming from the action or from the message generation.\n */\nexport type AgentMessageType = {\n    id: ModelId;\n    created: number;\n    type: \"agent_message\";\n    sId: string;\n    visibility: MessageVisibility;\n    version: number;\n    parentMessageId: string | null;\n    configuration: AgentConfigurationType;\n    status: AgentMessageStatus;\n    action: AgentActionType | null;\n    content: string | null;\n    error: {\n        code: string;\n        message: string;\n    } | null;\n};\nexport declare function isAgentMessageType(arg: UserMessageType | AgentMessageType | ContentFragmentType): arg is AgentMessageType;\n/**\n * Content Fragments\n */\nexport type ContentFragmentContextType = {\n    username: string | null;\n    fullName: string | null;\n    email: string | null;\n    profilePictureUrl: string | null;\n};\nexport type ContentFragmentContentType = \"slack_thread_content\" | \"file_attachment\";\nexport type ContentFragmentType = {\n    id: ModelId;\n    sId: string;\n    created: number;\n    type: \"content_fragment\";\n    visibility: MessageVisibility;\n    version: number;\n    title: string;\n    content: string;\n    url: string | null;\n    contentType: ContentFragmentContentType;\n    context: ContentFragmentContextType;\n};\nexport declare function isContentFragmentType(arg: UserMessageType | AgentMessageType | ContentFragmentType): arg is ContentFragmentType;\n/**\n * Conversations\n */\nexport type ConversationVisibility = \"unlisted\" | \"workspace\" | \"deleted\";\n/**\n * content [][] structure is intended to allow retries (of agent messages) or edits (of user\n * messages).\n */\nexport type ConversationType = {\n    id: ModelId;\n    created: number;\n    sId: string;\n    owner: WorkspaceType;\n    title: string | null;\n    visibility: ConversationVisibility;\n    content: (UserMessageType[] | AgentMessageType[] | ContentFragmentType[])[];\n};\nexport type UserParticipant = {\n    username: string;\n    fullName: string | null;\n    pictureUrl: string | null;\n};\nexport type AgentParticipant = {\n    configurationId: string;\n    name: string;\n    pictureUrl: string | null;\n};\n/**\n * A lighter version of Conversation without the content (for menu display).\n */\nexport type ConversationWithoutContentType = {\n    id: ModelId;\n    created: number;\n    sId: string;\n    owner: WorkspaceType;\n    title: string | null;\n};\nexport type ParticipantActionType = \"posted\" | \"reacted\" | \"subscribed\";\n//# sourceMappingURL=conversation.d.ts.map"}}
