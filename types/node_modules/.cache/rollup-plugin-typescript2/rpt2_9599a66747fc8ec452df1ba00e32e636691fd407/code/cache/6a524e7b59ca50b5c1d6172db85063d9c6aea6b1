{"code":"/**\n * A Result is a type that can be either Ok or Err.\n * The main motivation behind this utils is to overcome the fact that Javascript does not\n * let you check the type of an object at runtime, so you cannot know if a function returned an error type\n * or a success type.\n *\n * Usage:\n * import {Result, Ok, Err} from \"@app/lib/result\"\n * function divide(numerator: number, denominator: number) : Result<number, Error> {\n *     if (denominator === 0) {\n *        return new Err(new Error(\"Cannot divide by zero\"));\n *      }\n *     return new Ok(numerator / denominator);\n * }\n */\nexport class Ok {\n    value;\n    constructor(value) {\n        this.value = value;\n    }\n    isOk() {\n        return true;\n    }\n    isErr() {\n        return false;\n    }\n}\nexport class Err {\n    error;\n    constructor(error) {\n        this.error = error;\n    }\n    isOk() {\n        return false;\n    }\n    isErr() {\n        return true;\n    }\n}\n//# sourceMappingURL=result.js.map","references":[],"map":"{\"version\":3,\"file\":\"result.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/front/lib/result.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;GAcG;AAEH,MAAM,OAAO,EAAE;IACM;IAAnB,YAAmB,KAAQ;QAAR,UAAK,GAAL,KAAK,CAAG;IAAG,CAAC;IAE/B,IAAI;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK;QACH,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAED,MAAM,OAAO,GAAG;IACK;IAAnB,YAAmB,KAAQ;QAAR,UAAK,GAAL,KAAK,CAAG;IAAG,CAAC;IAE/B,IAAI;QACF,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK;QACH,OAAO,IAAI,CAAC;IACd,CAAC;CACF\"}"}
