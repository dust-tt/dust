{"code":"/**\n * A Result is a type that can be either Ok or Err.\n * The main motivation behind this utils is to overcome the fact that Javascript does not\n * let you check the type of an object at runtime, so you cannot know if a function returned an error type\n * or a success type.\n *\n * Usage:\n * import {Result, Ok, Err} from \"@app/lib/result\"\n * function divide(numerator: number, denominator: number) : Result<number, Error> {\n *     if (denominator === 0) {\n *        return new Err(new Error(\"Cannot divide by zero\"));\n *      }\n *     return new Ok(numerator / denominator);\n * }\n */\nexport class Ok {\n    value;\n    constructor(value) {\n        this.value = value;\n    }\n    isOk() {\n        return true;\n    }\n    isErr() {\n        return false;\n    }\n}\nexport class Err {\n    error;\n    constructor(error) {\n        this.error = error;\n    }\n    isOk() {\n        return false;\n    }\n    isErr() {\n        return true;\n    }\n}\n//# sourceMappingURL=result.js.map","references":[],"map":"{\"version\":3,\"file\":\"result.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/front/lib/result.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;GAcG;AAEH,MAAM,OAAO,EAAE;IACM;IAAnB,YAAmB,KAAQ;QAAR,UAAK,GAAL,KAAK,CAAG;IAAG,CAAC;IAE/B,IAAI;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK;QACH,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAED,MAAM,OAAO,GAAG;IACK;IAAnB,YAAmB,KAAQ;QAAR,UAAK,GAAL,KAAK,CAAG;IAAG,CAAC;IAE/B,IAAI;QACF,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK;QACH,OAAO,IAAI,CAAC;IACd,CAAC;CACF\"}","dtsmap":{"name":"/Users/edouardwautier/Projects/dust/types/node_modules/.cache/rollup-plugin-typescript2/placeholder/front/lib/result.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"result.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/front/lib/result.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;GAcG;AAEH,qBAAa,EAAE,CAAC,CAAC;IACI,KAAK,EAAE,CAAC;gBAAR,KAAK,EAAE,CAAC;IAE3B,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;IAIrB,KAAK,IAAI,IAAI,IAAI,GAAG,CAAC,KAAK,CAAC;CAG5B;AAED,qBAAa,GAAG,CAAC,CAAC;IACG,KAAK,EAAE,CAAC;gBAAR,KAAK,EAAE,CAAC;IAE3B,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC,KAAK,CAAC;IAIzB,KAAK,IAAI,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC;CAGxB;AAED,MAAM,MAAM,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC\"}"},"dts":{"name":"/Users/edouardwautier/Projects/dust/types/node_modules/.cache/rollup-plugin-typescript2/placeholder/front/lib/result.d.ts","writeByteOrderMark":false,"text":"/**\n * A Result is a type that can be either Ok or Err.\n * The main motivation behind this utils is to overcome the fact that Javascript does not\n * let you check the type of an object at runtime, so you cannot know if a function returned an error type\n * or a success type.\n *\n * Usage:\n * import {Result, Ok, Err} from \"@app/lib/result\"\n * function divide(numerator: number, denominator: number) : Result<number, Error> {\n *     if (denominator === 0) {\n *        return new Err(new Error(\"Cannot divide by zero\"));\n *      }\n *     return new Ok(numerator / denominator);\n * }\n */\nexport declare class Ok<T> {\n    value: T;\n    constructor(value: T);\n    isOk(): this is Ok<T>;\n    isErr(): this is Err<never>;\n}\nexport declare class Err<E> {\n    error: E;\n    constructor(error: E);\n    isOk(): this is Ok<never>;\n    isErr(): this is Err<E>;\n}\nexport type Result<T, E> = Ok<T> | Err<E>;\n//# sourceMappingURL=result.d.ts.map"}}
