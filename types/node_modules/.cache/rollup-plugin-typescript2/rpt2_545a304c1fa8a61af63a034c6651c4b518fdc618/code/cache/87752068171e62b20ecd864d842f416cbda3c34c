{"code":"import { createParser } from \"eventsource-parser\";\nimport { Err, Ok } from \"../../front/lib/result\";\nimport { dustManagedCredentials } from \"../../front/lib/api/credentials\";\nconst { CORE_API = \"http://127.0.0.1:3001\" } = process.env;\nexport class CoreAPI {\n    constructor(logger) {\n        this._logger = logger;\n    }\n    async createProject() {\n        const response = await fetch(`${CORE_API}/projects`, {\n            method: \"POST\",\n        });\n        return _resultFromResponse(response);\n    }\n    async getDatasets({ projectId, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/datasets`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        });\n        return _resultFromResponse(response);\n    }\n    async getDataset({ projectId, datasetName, datasetHash, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/datasets/${datasetName}/${datasetHash}`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        });\n        return _resultFromResponse(response);\n    }\n    async createDataset({ projectId, datasetId, data, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/datasets`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                dataset_id: datasetId,\n                data,\n            }),\n        });\n        return _resultFromResponse(response);\n    }\n    async cloneProject({ projectId, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/clone`, {\n            method: \"POST\",\n        });\n        return _resultFromResponse(response);\n    }\n    async createRun({ projectId, runAsWorkspaceId, runType, specification, specificationHash, datasetId, inputs, config, credentials, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/runs`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-Dust-Workspace-Id\": runAsWorkspaceId,\n            },\n            body: JSON.stringify({\n                run_type: runType,\n                specification: specification,\n                specification_hash: specificationHash,\n                dataset_id: datasetId,\n                inputs: inputs,\n                config: config,\n                credentials: credentials,\n            }),\n        });\n        return _resultFromResponse(response);\n    }\n    async createRunStream({ projectId, runAsWorkspaceId, runType, specification, specificationHash, datasetId, inputs, config, credentials, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/runs/stream`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-Dust-Workspace-Id\": runAsWorkspaceId,\n            },\n            body: JSON.stringify({\n                run_type: runType,\n                specification: specification,\n                specification_hash: specificationHash,\n                dataset_id: datasetId,\n                inputs: inputs,\n                config: config,\n                credentials: credentials,\n            }),\n        });\n        if (!response.ok || !response.body) {\n            return _resultFromResponse(response);\n        }\n        let hasRunId = false;\n        let rejectDustRunIdPromise;\n        let resolveDustRunIdPromise;\n        const dustRunIdPromise = new Promise((resolve, reject) => {\n            rejectDustRunIdPromise = reject;\n            resolveDustRunIdPromise = resolve;\n        });\n        const parser = createParser((event) => {\n            if (event.type === \"event\") {\n                if (event.data) {\n                    try {\n                        const data = JSON.parse(event.data);\n                        if (data.content?.run_id && !hasRunId) {\n                            hasRunId = true;\n                            resolveDustRunIdPromise(data.content.run_id);\n                        }\n                    }\n                    catch (err) {\n                        this._logger.error({ error: err }, \"Failed parsing chunk from Core API\");\n                    }\n                }\n            }\n        });\n        const reader = response.body.getReader();\n        const logger = this._logger;\n        const streamChunks = async function* () {\n            try {\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done) {\n                        break;\n                    }\n                    parser.feed(new TextDecoder().decode(value));\n                    yield value;\n                }\n                if (!hasRunId) {\n                    // once the stream is entirely consumed, if we haven't received a run id, reject the promise\n                    setImmediate(() => {\n                        logger.error({}, \"No run id received\");\n                        rejectDustRunIdPromise(new Error(\"No run id received\"));\n                    });\n                }\n            }\n            catch (e) {\n                logger.error({\n                    error: e,\n                }, \"Error streaming chunks\");\n            }\n            finally {\n                reader.releaseLock();\n            }\n        };\n        return new Ok({ chunkStream: streamChunks(), dustRunId: dustRunIdPromise });\n    }\n    async getRunsBatch({ projectId, dustRunIds, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/runs/batch`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                run_ids: dustRunIds,\n            }),\n        });\n        return _resultFromResponse(response);\n    }\n    async getRun({ projectId, runId, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/runs/${runId}`, {\n            method: \"GET\",\n        });\n        return _resultFromResponse(response);\n    }\n    async getRunStatus({ projectId, runId, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/runs/${runId}/status`, {\n            method: \"GET\",\n        });\n        return _resultFromResponse(response);\n    }\n    async getSpecification({ projectId, specificationHash, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/specifications/${specificationHash}`, {\n            method: \"GET\",\n        });\n        return _resultFromResponse(response);\n    }\n    async getRunBlock({ projectId, runId, blockType, blockName, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/runs/${runId}/blocks/${blockType}/${blockName}`, {\n            method: \"GET\",\n        });\n        return _resultFromResponse(response);\n    }\n    async createDataSource({ projectId, dataSourceId, config, credentials, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/data_sources`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                data_source_id: dataSourceId,\n                config: config,\n                credentials: credentials,\n            }),\n        });\n        return _resultFromResponse(response);\n    }\n    async getDataSource({ projectId, dataSourceId, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/data_sources/${dataSourceId}`, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        });\n        return _resultFromResponse(response);\n    }\n    async deleteDataSource({ projectId, dataSourceName, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/data_sources/${dataSourceName}`, {\n            method: \"DELETE\",\n        });\n        return _resultFromResponse(response);\n    }\n    async searchDataSource(projectId, dataSourceName, payload) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/data_sources/${dataSourceName}/search`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                query: payload.query,\n                top_k: payload.topK,\n                filter: payload.filter,\n                full_text: payload.fullText,\n                credentials: payload.credentials,\n                target_document_tokens: payload.target_document_tokens,\n            }),\n        });\n        return _resultFromResponse(response);\n    }\n    async getDataSourceDocuments({ projectId, dataSourceName, limit, offset, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/data_sources/${dataSourceName}/documents?limit=${limit}&offset=${offset}`, {\n            method: \"GET\",\n        });\n        return _resultFromResponse(response);\n    }\n    async getDataSourceDocument({ projectId, dataSourceName, documentId, versionHash, }) {\n        const qs = versionHash ? `?version_hash=${versionHash}` : \"\";\n        const response = await fetch(`${CORE_API}/projects/${projectId}/data_sources/${dataSourceName}/documents/${encodeURIComponent(documentId)}${qs}`, {\n            method: \"GET\",\n        });\n        return _resultFromResponse(response);\n    }\n    async getDataSourceDocumentVersions({ projectId, dataSourceName, documentId, latest_hash, limit = 10, offset = 0, }) {\n        const params = new URLSearchParams({\n            limit: String(limit),\n            offset: String(offset),\n        });\n        if (latest_hash) {\n            params.append(\"latest_hash\", latest_hash);\n        }\n        const response = await fetch(`${CORE_API}/projects/${projectId}/data_sources/${dataSourceName}/documents/${encodeURIComponent(documentId)}/versions?${params.toString()}`, {\n            method: \"GET\",\n        });\n        return _resultFromResponse(response);\n    }\n    async upsertDataSourceDocument({ projectId, dataSourceName, documentId, timestamp, tags, parents, sourceUrl, section, credentials, lightDocumentOutput = false, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/data_sources/${dataSourceName}/documents`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                document_id: documentId,\n                timestamp,\n                section,\n                tags,\n                parents,\n                source_url: sourceUrl,\n                credentials,\n                light_document_output: lightDocumentOutput,\n            }),\n        });\n        return _resultFromResponse(response);\n    }\n    async updateDataSourceDocumentTags({ projectId, dataSourceName, documentId, addTags, removeTags, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/data_sources/${dataSourceName}/documents/${encodeURIComponent(documentId)}/tags`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                add_tags: addTags,\n                remove_tags: removeTags,\n            }),\n        });\n        return _resultFromResponse(response);\n    }\n    async updateDataSourceDocumentParents({ projectId, dataSourceName, documentId, parents, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/data_sources/${dataSourceName}/documents/${encodeURIComponent(documentId)}/parents`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                parents: parents,\n            }),\n        });\n        return _resultFromResponse(response);\n    }\n    async deleteDataSourceDocument({ projectId, dataSourceName, documentId, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/data_sources/${dataSourceName}/documents/${encodeURIComponent(documentId)}`, {\n            method: \"DELETE\",\n        });\n        return _resultFromResponse(response);\n    }\n    async tokenize({ text, modelId, providerId, }) {\n        const credentials = dustManagedCredentials();\n        const response = await fetch(`${CORE_API}/tokenize`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                text,\n                model_id: modelId,\n                provider_id: providerId,\n                credentials,\n            }),\n        });\n        return _resultFromResponse(response);\n    }\n    async createDatabase({ projectId, dataSourceName, databaseId, name, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/data_sources/${dataSourceName}/databases`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                database_id: databaseId,\n                name: name,\n            }),\n        });\n        return _resultFromResponse(response);\n    }\n    async getDatabase({ projectId, dataSourceName, databaseId, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/data_sources/${dataSourceName}/databases/${databaseId}`, {\n            method: \"GET\",\n        });\n        return _resultFromResponse(response);\n    }\n    async getDatabases({ projectId, dataSourceName, offset, limit, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/data_sources/${dataSourceName}/databases?offset=${offset}&limit=${limit}`, { method: \"GET\" });\n        return _resultFromResponse(response);\n    }\n    async upsertDatabaseTable({ projectId, dataSourceName, databaseId, tableId, name, description, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/data_sources/${dataSourceName}/databases/${databaseId}/tables`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                table_id: tableId,\n                name: name,\n                description: description,\n            }),\n        });\n        return _resultFromResponse(response);\n    }\n    async getDatabaseTable({ projectId, dataSourceName, databaseId, tableId, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/data_sources/${dataSourceName}/databases/${databaseId}/tables/${tableId}`, {\n            method: \"GET\",\n        });\n        return _resultFromResponse(response);\n    }\n    async getDatabaseTables({ projectId, dataSourceName, databaseId, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/data_sources/${dataSourceName}/databases/${databaseId}/tables`, {\n            method: \"GET\",\n        });\n        return _resultFromResponse(response);\n    }\n    async upsertDatabaseRows({ projectId, dataSourceName, databaseId, tableId, rows, truncate, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/data_sources/${dataSourceName}/databases/${databaseId}/tables/${tableId}/rows`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                rows,\n                truncate: truncate || false,\n            }),\n        });\n        return _resultFromResponse(response);\n    }\n    async getDatabaseRow({ projectId, dataSourceName, databaseId, tableId, rowId, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/data_sources/${dataSourceName}/databases/${databaseId}/tables/${tableId}/rows/${rowId}`, {\n            method: \"GET\",\n        });\n        return _resultFromResponse(response);\n    }\n    async getDatabaseRows({ projectId, dataSourceName, databaseId, tableId, limit, offset, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/data_sources/${dataSourceName}/databases/${databaseId}/tables/${tableId}/rows?limit=${limit}&offset=${offset}`, {\n            method: \"GET\",\n        });\n        return _resultFromResponse(response);\n    }\n    async queryDatabase({ projectId, dataSourceName, databaseId, query, }) {\n        const response = await fetch(`${CORE_API}/projects/${projectId}/data_sources/${dataSourceName}/databases/${databaseId}/query`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                query: query,\n            }),\n        });\n        return _resultFromResponse(response);\n    }\n}\nasync function _resultFromResponse(response) {\n    const jsonResponse = await response.json();\n    if (jsonResponse.error) {\n        return new Err(jsonResponse.error);\n    }\n    return new Ok(jsonResponse.response);\n}\n//# sourceMappingURL=core_api.js.map","references":["/Users/edouardwautier/Projects/dust/types/src/core/data_source.ts","/Users/edouardwautier/Projects/dust/types/src/front/project.ts","/Users/edouardwautier/Projects/dust/types/src/front/provider.ts","/Users/edouardwautier/Projects/dust/types/src/front/run.ts","/Users/edouardwautier/Projects/dust/types/src/front/lib/result.ts","/Users/edouardwautier/Projects/dust/types/src/shared/logger.ts","/Users/edouardwautier/Projects/dust/types/src/front/lib/api/credentials.ts"],"map":"{\"version\":3,\"file\":\"core_api.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/front/lib/core_api.ts\"],\"names\":[],\"mappings\":\"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\"}"}
