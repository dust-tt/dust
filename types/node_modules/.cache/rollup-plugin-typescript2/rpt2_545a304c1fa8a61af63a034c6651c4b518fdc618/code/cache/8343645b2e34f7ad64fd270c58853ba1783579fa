{"code":"import { createParser } from \"eventsource-parser\";\nimport { Err, Ok } from \"../../front/lib/result\";\nconst { DUST_PROD_API = \"https://dust.tt\", NODE_ENV } = process.env;\n/**\n * This help functions process a streamed response in the format of the Dust API for running\n * streamed apps.\n *\n * @param res an HTTP response ready to be consumed as a stream\n */\nexport async function processStreamedRunResponse(res, logger) {\n    if (!res.ok || !res.body) {\n        return new Err({\n            type: \"dust_api_error\",\n            message: `Error running streamed app: status_code=${res.status}`,\n        });\n    }\n    let hasRunId = false;\n    let rejectDustRunIdPromise;\n    let resolveDustRunIdPromise;\n    const dustRunIdPromise = new Promise((resolve, reject) => {\n        rejectDustRunIdPromise = reject;\n        resolveDustRunIdPromise = resolve;\n    });\n    let pendingEvents = [];\n    const parser = createParser((event) => {\n        if (event.type === \"event\") {\n            if (event.data) {\n                try {\n                    const data = JSON.parse(event.data);\n                    switch (data.type) {\n                        case \"error\": {\n                            pendingEvents.push({\n                                type: \"error\",\n                                content: {\n                                    code: data.content.code,\n                                    message: data.content.message,\n                                },\n                            });\n                            break;\n                        }\n                        case \"run_status\": {\n                            pendingEvents.push({\n                                type: data.type,\n                                content: data.content,\n                            });\n                            break;\n                        }\n                        case \"block_status\": {\n                            pendingEvents.push({\n                                type: data.type,\n                                content: data.content,\n                            });\n                            break;\n                        }\n                        case \"block_execution\": {\n                            pendingEvents.push({\n                                type: data.type,\n                                content: data.content,\n                            });\n                            break;\n                        }\n                        case \"tokens\": {\n                            pendingEvents.push({\n                                type: \"tokens\",\n                                content: data.content,\n                            });\n                            break;\n                        }\n                        case \"function_call\": {\n                            pendingEvents.push({\n                                type: \"function_call\",\n                                content: data.content,\n                            });\n                            break;\n                        }\n                        case \"function_call_arguments_tokens\": {\n                            pendingEvents.push({\n                                type: \"function_call_arguments_tokens\",\n                                content: data.content,\n                            });\n                            break;\n                        }\n                        case \"final\": {\n                            pendingEvents.push({\n                                type: \"final\",\n                            });\n                        }\n                    }\n                    if (data.content?.run_id && !hasRunId) {\n                        hasRunId = true;\n                        resolveDustRunIdPromise(data.content.run_id);\n                    }\n                }\n                catch (err) {\n                    logger.error({ error: err }, \"Failed parsing chunk from Dust API\");\n                }\n            }\n        }\n    });\n    const reader = res.body.getReader();\n    const streamEvents = async function* () {\n        try {\n            while (true) {\n                const { done, value } = await reader.read();\n                if (done) {\n                    break;\n                }\n                parser.feed(new TextDecoder().decode(value));\n                for (const event of pendingEvents) {\n                    yield event;\n                }\n                pendingEvents = [];\n            }\n            if (!hasRunId) {\n                // once the stream is entirely consumed, if we haven't received a run id, reject the promise\n                setImmediate(() => {\n                    logger.error({}, \"No run id received.\");\n                    rejectDustRunIdPromise(new Error(\"No run id received\"));\n                });\n            }\n        }\n        catch (e) {\n            yield {\n                type: \"error\",\n                content: {\n                    code: \"stream_error\",\n                    message: \"Error streaming chunks\",\n                },\n            };\n            logger.error({\n                error: e,\n            }, \"Error streaming chunks.\");\n        }\n        finally {\n            reader.releaseLock();\n        }\n    };\n    return new Ok({ eventStream: streamEvents(), dustRunId: dustRunIdPromise });\n}\nexport class DustAPI {\n    _credentials;\n    _useLocalInDev;\n    _logger;\n    _urlOverride;\n    /**\n     * @param credentials DustAPICrededentials\n     */\n    constructor(credentials, logger, { useLocalInDev, urlOverride, } = { useLocalInDev: false }) {\n        this._credentials = credentials;\n        this._logger = logger;\n        this._useLocalInDev = useLocalInDev;\n        this._urlOverride = urlOverride;\n    }\n    workspaceId() {\n        return this._credentials.workspaceId;\n    }\n    apiUrl() {\n        if (this._urlOverride) {\n            return this._urlOverride;\n        }\n        return this._useLocalInDev && NODE_ENV === \"development\"\n            ? \"http://localhost:3000\"\n            : DUST_PROD_API;\n    }\n    /**\n     * This functions talks directly to the Dust production API to create a run.\n     *\n     * @param app DustAppType the app to run streamed\n     * @param config DustAppConfigType the app config\n     * @param inputs any[] the app inputs\n     */\n    async runApp(app, config, inputs, { useWorkspaceCredentials } = {\n        useWorkspaceCredentials: false,\n    }) {\n        let url = `${this.apiUrl()}/api/v1/w/${app.workspaceId}/apps/${app.appId}/runs`;\n        if (useWorkspaceCredentials) {\n            url += \"?use_workspace_credentials=true\";\n        }\n        const res = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${this._credentials.apiKey}`,\n            },\n            body: JSON.stringify({\n                specification_hash: app.appHash,\n                config: config,\n                stream: false,\n                blocking: true,\n                inputs: inputs,\n            }),\n        });\n        const json = await res.json();\n        if (json.error) {\n            return new Err(json.error);\n        }\n        return new Ok(json.run);\n    }\n    /**\n     * This functions talks directly to the Dust production API to create a streamed run.\n     *\n     * @param app DustAppType the app to run streamed\n     * @param config DustAppConfigType the app config\n     * @param inputs any[] the app inputs\n     */\n    async runAppStreamed(app, config, inputs, { useWorkspaceCredentials } = {\n        useWorkspaceCredentials: false,\n    }) {\n        let url = `${this.apiUrl()}/api/v1/w/${app.workspaceId}/apps/${app.appId}/runs`;\n        if (useWorkspaceCredentials) {\n            url += \"?use_workspace_credentials=true\";\n        }\n        const res = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${this._credentials.apiKey}`,\n            },\n            body: JSON.stringify({\n                specification_hash: app.appHash,\n                config: config,\n                stream: true,\n                blocking: false,\n                inputs: inputs,\n            }),\n        });\n        return processStreamedRunResponse(res, this._logger);\n    }\n    /**\n     * This actions talks to the Dust production API to retrieve the list of data sources of the\n     * specified workspace id.\n     *\n     * @param workspaceId string the workspace id to fetch data sources for\n     */\n    async getDataSources(workspaceId) {\n        const res = await fetch(`${this.apiUrl()}/api/v1/w/${workspaceId}/data_sources`, {\n            method: \"GET\",\n            headers: {\n                Authorization: `Bearer ${this._credentials.apiKey}`,\n            },\n        });\n        const json = await res.json();\n        if (json.error) {\n            return new Err(json.error);\n        }\n        return new Ok(json.data_sources);\n    }\n    async getAgentConfigurations() {\n        const res = await fetch(`${this.apiUrl()}/api/v1/w/${this.workspaceId()}/assistant/agent_configurations`, {\n            method: \"GET\",\n            headers: {\n                Authorization: `Bearer ${this._credentials.apiKey}`,\n                \"Content-Type\": \"application/json\",\n            },\n        });\n        const json = await res.json();\n        if (json.error) {\n            return new Err(json.error);\n        }\n        return new Ok(json.agentConfigurations);\n    }\n    async postContentFragment({ conversationId, contentFragment, }) {\n        const res = await fetch(`${this.apiUrl()}/api/v1/w/${this.workspaceId()}/assistant/conversations/${conversationId}/content_fragments`, {\n            method: \"POST\",\n            headers: {\n                Authorization: `Bearer ${this._credentials.apiKey}`,\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                ...contentFragment,\n            }),\n        });\n        const json = await res.json();\n        if (json.error) {\n            return new Err(json.error);\n        }\n        return new Ok(json.contentFragment);\n    }\n    // When creating a conversation with a user message, the API returns only after the user message\n    // was created (and if applicable the assocaited agent messages).\n    async createConversation({ title, visibility, message, contentFragment, }) {\n        const res = await fetch(`${this.apiUrl()}/api/v1/w/${this.workspaceId()}/assistant/conversations`, {\n            method: \"POST\",\n            headers: {\n                Authorization: `Bearer ${this._credentials.apiKey}`,\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                title,\n                visibility,\n                message,\n                contentFragment,\n            }),\n        });\n        const json = await res.json();\n        if (json.error) {\n            return new Err(json.error);\n        }\n        return new Ok(json);\n    }\n    async postUserMessage({ conversationId, message, }) {\n        const res = await fetch(`${this.apiUrl()}/api/v1/w/${this.workspaceId()}/assistant/conversations/${conversationId}/messages`, {\n            method: \"POST\",\n            headers: {\n                Authorization: `Bearer ${this._credentials.apiKey}`,\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                ...message,\n            }),\n        });\n        const json = await res.json();\n        if (json.error) {\n            return new Err(json.error);\n        }\n        return new Ok(json.message);\n    }\n    async streamAgentMessageEvents({ conversation, message, }) {\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${this._credentials.apiKey}`,\n        };\n        const res = await fetch(`${this.apiUrl()}/api/v1/w/${this.workspaceId()}/assistant/conversations/${conversation.sId}/messages/${message.sId}/events`, {\n            method: \"GET\",\n            headers: headers,\n        });\n        if (!res.ok || !res.body) {\n            return new Err({\n                type: \"dust_api_error\",\n                message: `Error running streamed app: status_code=${res.status}  - message=${await res.text()}`,\n            });\n        }\n        let pendingEvents = [];\n        const parser = createParser((event) => {\n            if (event.type === \"event\") {\n                if (event.data) {\n                    try {\n                        const data = JSON.parse(event.data).data;\n                        switch (data.type) {\n                            case \"user_message_error\": {\n                                pendingEvents.push(data);\n                                break;\n                            }\n                            case \"agent_error\": {\n                                pendingEvents.push(data);\n                                break;\n                            }\n                            case \"agent_action_success\": {\n                                pendingEvents.push(data);\n                                break;\n                            }\n                            case \"generation_tokens\": {\n                                pendingEvents.push(data);\n                                break;\n                            }\n                            case \"agent_generation_success\": {\n                                pendingEvents.push(data);\n                                break;\n                            }\n                        }\n                    }\n                    catch (err) {\n                        this._logger.error({ error: err }, \"Failed parsing chunk from Dust API\");\n                    }\n                }\n            }\n        });\n        const reader = res.body.getReader();\n        const logger = this._logger;\n        const streamEvents = async function* () {\n            try {\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done) {\n                        break;\n                    }\n                    parser.feed(new TextDecoder().decode(value));\n                    for (const event of pendingEvents) {\n                        yield event;\n                    }\n                    pendingEvents = [];\n                }\n            }\n            catch (e) {\n                yield {\n                    type: \"error\",\n                    content: {\n                        code: \"stream_error\",\n                        message: \"Error streaming chunks\",\n                    },\n                };\n                logger.error({\n                    error: e,\n                }, \"Error streaming chunks.\");\n            }\n            finally {\n                reader.releaseLock();\n            }\n        };\n        return new Ok({ eventStream: streamEvents() });\n    }\n    async getConversation({ conversationId }) {\n        const res = await fetch(`${this.apiUrl()}/api/v1/w/${this.workspaceId()}/assistant/conversations/${conversationId}`, {\n            method: \"GET\",\n            headers: {\n                Authorization: `Bearer ${this._credentials.apiKey}`,\n                \"Content-Type\": \"application/json\",\n            },\n        });\n        const json = await res.json();\n        if (json.error) {\n            return new Err(json.error);\n        }\n        return new Ok(json.conversation);\n    }\n}\n//# sourceMappingURL=dust_api.js.map","references":["/Users/edouardwautier/Projects/dust/types/node_modules/io-ts/lib/index.d.ts","/Users/edouardwautier/Projects/dust/types/src/front/lib/result.ts","/Users/edouardwautier/Projects/dust/types/src/front/run.ts","/Users/edouardwautier/Projects/dust/types/src/front/data_source.ts","/Users/edouardwautier/Projects/dust/types/src/shared/logger.ts","/Users/edouardwautier/Projects/dust/types/src/front/assistant/agent.ts","/Users/edouardwautier/Projects/dust/types/src/front/api_handlers/public/assistant.ts","/Users/edouardwautier/Projects/dust/types/src/front/assistant/conversation.ts","/Users/edouardwautier/Projects/dust/types/src/front/lib/api/assistant/conversation.ts","/Users/edouardwautier/Projects/dust/types/src/front/lib/api/assistant/agent.ts","/Users/edouardwautier/Projects/dust/types/src/front/lib/api/assistant/generation.ts"],"map":"{\"version\":3,\"file\":\"dust_api.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/front/lib/dust_api.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAElD,OAAO,EAAE,GAAG,EAAE,EAAE,EAAU,MAAM,wBAAwB,CAAC;AAwBzD,MAAM,EAAE,aAAa,GAAG,iBAAiB,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC;AAwHpE;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAC9C,GAAa,EACb,MAAuB;IAEvB,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE;QACxB,OAAO,IAAI,GAAG,CAAC;YACb,IAAI,EAAE,gBAAgB;YACtB,OAAO,EAAE,2CAA2C,GAAG,CAAC,MAAM,EAAE;SACjE,CAAC,CAAC;KACJ;IAED,IAAI,QAAQ,GAAG,KAAK,CAAC;IACrB,IAAI,sBAA4C,CAAC;IACjD,IAAI,uBAAgD,CAAC;IACrD,MAAM,gBAAgB,GAAG,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC/D,sBAAsB,GAAG,MAAM,CAAC;QAChC,uBAAuB,GAAG,OAAO,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,IAAI,aAAa,GASX,EAAE,CAAC;IAET,MAAM,MAAM,GAAG,YAAY,CAAC,CAAC,KAAK,EAAE,EAAE;QACpC,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,EAAE;YAC1B,IAAI,KAAK,CAAC,IAAI,EAAE;gBACd,IAAI;oBACF,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBAEpC,QAAQ,IAAI,CAAC,IAAI,EAAE;wBACjB,KAAK,OAAO,CAAC,CAAC;4BACZ,aAAa,CAAC,IAAI,CAAC;gCACjB,IAAI,EAAE,OAAO;gCACb,OAAO,EAAE;oCACP,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;oCACvB,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;iCAC9B;6BACwB,CAAC,CAAC;4BAC7B,MAAM;yBACP;wBACD,KAAK,YAAY,CAAC,CAAC;4BACjB,aAAa,CAAC,IAAI,CAAC;gCACjB,IAAI,EAAE,IAAI,CAAC,IAAI;gCACf,OAAO,EAAE,IAAI,CAAC,OAAO;6BACtB,CAAC,CAAC;4BACH,MAAM;yBACP;wBACD,KAAK,cAAc,CAAC,CAAC;4BACnB,aAAa,CAAC,IAAI,CAAC;gCACjB,IAAI,EAAE,IAAI,CAAC,IAAI;gCACf,OAAO,EAAE,IAAI,CAAC,OAAO;6BACtB,CAAC,CAAC;4BACH,MAAM;yBACP;wBACD,KAAK,iBAAiB,CAAC,CAAC;4BACtB,aAAa,CAAC,IAAI,CAAC;gCACjB,IAAI,EAAE,IAAI,CAAC,IAAI;gCACf,OAAO,EAAE,IAAI,CAAC,OAAO;6BACtB,CAAC,CAAC;4BACH,MAAM;yBACP;wBACD,KAAK,QAAQ,CAAC,CAAC;4BACb,aAAa,CAAC,IAAI,CAAC;gCACjB,IAAI,EAAE,QAAQ;gCACd,OAAO,EAAE,IAAI,CAAC,OAAO;6BACG,CAAC,CAAC;4BAC5B,MAAM;yBACP;wBACD,KAAK,eAAe,CAAC,CAAC;4BACpB,aAAa,CAAC,IAAI,CAAC;gCACjB,IAAI,EAAE,eAAe;gCACrB,OAAO,EAAE,IAAI,CAAC,OAAO;6BACS,CAAC,CAAC;4BAClC,MAAM;yBACP;wBACD,KAAK,gCAAgC,CAAC,CAAC;4BACrC,aAAa,CAAC,IAAI,CAAC;gCACjB,IAAI,EAAE,gCAAgC;gCACtC,OAAO,EAAE,IAAI,CAAC,OAAO;6BACwB,CAAC,CAAC;4BACjD,MAAM;yBACP;wBACD,KAAK,OAAO,CAAC,CAAC;4BACZ,aAAa,CAAC,IAAI,CAAC;gCACjB,IAAI,EAAE,OAAO;6BACU,CAAC,CAAC;yBAC5B;qBACF;oBACD,IAAI,IAAI,CAAC,OAAO,EAAE,MAAM,IAAI,CAAC,QAAQ,EAAE;wBACrC,QAAQ,GAAG,IAAI,CAAC;wBAChB,uBAAuB,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;qBAC9C;iBACF;gBAAC,OAAO,GAAG,EAAE;oBACZ,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,oCAAoC,CAAC,CAAC;iBACpE;aACF;SACF;IACH,CAAC,CAAC,CAAC;IAEH,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;IAEpC,MAAM,YAAY,GAAG,KAAK,SAAS,CAAC;QAClC,IAAI;YACF,OAAO,IAAI,EAAE;gBACX,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;gBAC5C,IAAI,IAAI,EAAE;oBACR,MAAM;iBACP;gBACD,MAAM,CAAC,IAAI,CAAC,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC7C,KAAK,MAAM,KAAK,IAAI,aAAa,EAAE;oBACjC,MAAM,KAAK,CAAC;iBACb;gBACD,aAAa,GAAG,EAAE,CAAC;aACpB;YACD,IAAI,CAAC,QAAQ,EAAE;gBACb,4FAA4F;gBAC5F,YAAY,CAAC,GAAG,EAAE;oBAChB,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE,qBAAqB,CAAC,CAAC;oBACxC,sBAAsB,CAAC,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBAC1D,CAAC,CAAC,CAAC;aACJ;SACF;QAAC,OAAO,CAAC,EAAE;YACV,MAAM;gBACJ,IAAI,EAAE,OAAO;gBACb,OAAO,EAAE;oBACP,IAAI,EAAE,cAAc;oBACpB,OAAO,EAAE,wBAAwB;iBAClC;aACwB,CAAC;YAC5B,MAAM,CAAC,KAAK,CACV;gBACE,KAAK,EAAE,CAAC;aACT,EACD,yBAAyB,CAC1B,CAAC;SACH;gBAAS;YACR,MAAM,CAAC,WAAW,EAAE,CAAC;SACtB;IACH,CAAC,CAAC;IAEF,OAAO,IAAI,EAAE,CAAC,EAAE,WAAW,EAAE,YAAY,EAAE,EAAE,SAAS,EAAE,gBAAgB,EAAE,CAAC,CAAC;AAC9E,CAAC;AAED,MAAM,OAAO,OAAO;IAClB,YAAY,CAAqB;IACjC,cAAc,CAAU;IACxB,OAAO,CAAkB;IACzB,YAAY,CAAU;IAEtB;;OAEG;IACH,YACE,WAA+B,EAC/B,MAAuB,EACvB,EACE,aAAa,EACb,WAAW,MAIT,EAAE,aAAa,EAAE,KAAK,EAAE;QAE5B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IAClC,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC;IACvC,CAAC;IAED,MAAM;QACJ,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,OAAO,IAAI,CAAC,YAAY,CAAC;SAC1B;QACD,OAAO,IAAI,CAAC,cAAc,IAAI,QAAQ,KAAK,aAAa;YACtD,CAAC,CAAC,uBAAuB;YACzB,CAAC,CAAC,aAAa,CAAC;IACpB,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,MAAM,CACV,GAAgB,EAChB,MAAyB,EACzB,MAAiB,EACjB,EAAE,uBAAuB,KAA2C;QAClE,uBAAuB,EAAE,KAAK;KAC/B;QAED,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,aAAa,GAAG,CAAC,WAAW,SACpD,GAAG,CAAC,KACN,OAAO,CAAC;QACR,IAAI,uBAAuB,EAAE;YAC3B,GAAG,IAAI,iCAAiC,CAAC;SAC1C;QACD,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;YAC3B,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;gBAClC,aAAa,EAAE,UAAU,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;aACpD;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,kBAAkB,EAAE,GAAG,CAAC,OAAO;gBAC/B,MAAM,EAAE,MAAM;gBACd,MAAM,EAAE,KAAK;gBACb,QAAQ,EAAE,IAAI;gBACd,MAAM,EAAE,MAAM;aACf,CAAC;SACH,CAAC,CAAC;QAEH,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;QAC9B,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,KAA6B,CAAC,CAAC;SACpD;QACD,OAAO,IAAI,EAAE,CAAC,IAAI,CAAC,GAAc,CAAC,CAAC;IACrC,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,cAAc,CAClB,GAAgB,EAChB,MAAyB,EACzB,MAAa,EACb,EAAE,uBAAuB,KAA2C;QAClE,uBAAuB,EAAE,KAAK;KAC/B;QAED,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,aAAa,GAAG,CAAC,WAAW,SACpD,GAAG,CAAC,KACN,OAAO,CAAC;QACR,IAAI,uBAAuB,EAAE;YAC3B,GAAG,IAAI,iCAAiC,CAAC;SAC1C;QACD,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;YAC3B,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;gBAClC,aAAa,EAAE,UAAU,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;aACpD;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,kBAAkB,EAAE,GAAG,CAAC,OAAO;gBAC/B,MAAM,EAAE,MAAM;gBACd,MAAM,EAAE,IAAI;gBACZ,QAAQ,EAAE,KAAK;gBACf,MAAM,EAAE,MAAM;aACf,CAAC;SACH,CAAC,CAAC;QAEH,OAAO,0BAA0B,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,cAAc,CAAC,WAAmB;QACtC,MAAM,GAAG,GAAG,MAAM,KAAK,CACrB,GAAG,IAAI,CAAC,MAAM,EAAE,aAAa,WAAW,eAAe,EACvD;YACE,MAAM,EAAE,KAAK;YACb,OAAO,EAAE;gBACP,aAAa,EAAE,UAAU,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;aACpD;SACF,CACF,CAAC;QAEF,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;QAC9B,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,KAA6B,CAAC,CAAC;SACpD;QACD,OAAO,IAAI,EAAE,CAAC,IAAI,CAAC,YAAgC,CAAC,CAAC;IACvD,CAAC;IAED,KAAK,CAAC,sBAAsB;QAC1B,MAAM,GAAG,GAAG,MAAM,KAAK,CACrB,GAAG,IAAI,CAAC,MAAM,EAAE,aAAa,IAAI,CAAC,WAAW,EAAE,iCAAiC,EAChF;YACE,MAAM,EAAE,KAAK;YACb,OAAO,EAAE;gBACP,aAAa,EAAE,UAAU,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;gBACnD,cAAc,EAAE,kBAAkB;aACnC;SACF,CACF,CAAC;QAEF,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;QAE9B,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,KAA6B,CAAC,CAAC;SACpD;QACD,OAAO,IAAI,EAAE,CAAC,IAAI,CAAC,mBAA+C,CAAC,CAAC;IACtE,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,EACxB,cAAc,EACd,eAAe,GAIhB;QACC,MAAM,GAAG,GAAG,MAAM,KAAK,CACrB,GAAG,IAAI,CAAC,MAAM,EAAE,aAAa,IAAI,CAAC,WAAW,EAAE,4BAA4B,cAAc,oBAAoB,EAC7G;YACE,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,aAAa,EAAE,UAAU,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;gBACnD,cAAc,EAAE,kBAAkB;aACnC;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,GAAG,eAAe;aACnB,CAAC;SACH,CACF,CAAC;QAEF,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;QAE9B,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,KAA6B,CAAC,CAAC;SACpD;QACD,OAAO,IAAI,EAAE,CAAC,IAAI,CAAC,eAAsC,CAAC,CAAC;IAC7D,CAAC;IAED,gGAAgG;IAChG,iEAAiE;IACjE,KAAK,CAAC,kBAAkB,CAAC,EACvB,KAAK,EACL,UAAU,EACV,OAAO,EACP,eAAe,GAC2C;QAM1D,MAAM,GAAG,GAAG,MAAM,KAAK,CACrB,GAAG,IAAI,CAAC,MAAM,EAAE,aAAa,IAAI,CAAC,WAAW,EAAE,0BAA0B,EACzE;YACE,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,aAAa,EAAE,UAAU,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;gBACnD,cAAc,EAAE,kBAAkB;aACnC;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,KAAK;gBACL,UAAU;gBACV,OAAO;gBACP,eAAe;aAChB,CAAC;SACH,CACF,CAAC;QAEF,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;QAC9B,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,KAA6B,CAAC,CAAC;SACpD;QAED,OAAO,IAAI,EAAE,CACX,IAAoE,CACrE,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,EACpB,cAAc,EACd,OAAO,GAIR;QACC,MAAM,GAAG,GAAG,MAAM,KAAK,CACrB,GAAG,IAAI,CAAC,MAAM,EAAE,aAAa,IAAI,CAAC,WAAW,EAAE,4BAA4B,cAAc,WAAW,EACpG;YACE,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,aAAa,EAAE,UAAU,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;gBACnD,cAAc,EAAE,kBAAkB;aACnC;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,GAAG,OAAO;aACX,CAAC;SACH,CACF,CAAC;QAEF,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;QAC9B,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,KAA6B,CAAC,CAAC;SACpD;QAED,OAAO,IAAI,EAAE,CAAC,IAAI,CAAC,OAA0B,CAAC,CAAC;IACjD,CAAC;IAED,KAAK,CAAC,wBAAwB,CAAC,EAC7B,YAAY,EACZ,OAAO,GAIR;QACC,MAAM,OAAO,GAAG;YACd,cAAc,EAAE,kBAAkB;YAClC,aAAa,EAAE,UAAU,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;SACpD,CAAC;QAEF,MAAM,GAAG,GAAG,MAAM,KAAK,CACrB,GAAG,IAAI,CAAC,MAAM,EAAE,aAAa,IAAI,CAAC,WAAW,EAAE,4BAC7C,YAAY,CAAC,GACf,aAAa,OAAO,CAAC,GAAG,SAAS,EACjC;YACE,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,OAAO;SACjB,CACF,CAAC;QAEF,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE;YACxB,OAAO,IAAI,GAAG,CAAC;gBACb,IAAI,EAAE,gBAAgB;gBACtB,OAAO,EAAE,2CACP,GAAG,CAAC,MACN,eAAe,MAAM,GAAG,CAAC,IAAI,EAAE,EAAE;aAClC,CAAC,CAAC;SACJ;QAED,IAAI,aAAa,GAMX,EAAE,CAAC;QAET,MAAM,MAAM,GAAG,YAAY,CAAC,CAAC,KAAK,EAAE,EAAE;YACpC,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,EAAE;gBAC1B,IAAI,KAAK,CAAC,IAAI,EAAE;oBACd,IAAI;wBACF,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;wBACzC,QAAQ,IAAI,CAAC,IAAI,EAAE;4BACjB,KAAK,oBAAoB,CAAC,CAAC;gCACzB,aAAa,CAAC,IAAI,CAAC,IAA6B,CAAC,CAAC;gCAClD,MAAM;6BACP;4BACD,KAAK,aAAa,CAAC,CAAC;gCAClB,aAAa,CAAC,IAAI,CAAC,IAAuB,CAAC,CAAC;gCAC5C,MAAM;6BACP;4BACD,KAAK,sBAAsB,CAAC,CAAC;gCAC3B,aAAa,CAAC,IAAI,CAAC,IAA+B,CAAC,CAAC;gCACpD,MAAM;6BACP;4BACD,KAAK,mBAAmB,CAAC,CAAC;gCACxB,aAAa,CAAC,IAAI,CAAC,IAA6B,CAAC,CAAC;gCAClD,MAAM;6BACP;4BACD,KAAK,0BAA0B,CAAC,CAAC;gCAC/B,aAAa,CAAC,IAAI,CAAC,IAAmC,CAAC,CAAC;gCACxD,MAAM;6BACP;yBACF;qBACF;oBAAC,OAAO,GAAG,EAAE;wBACZ,IAAI,CAAC,OAAO,CAAC,KAAK,CAChB,EAAE,KAAK,EAAE,GAAG,EAAE,EACd,oCAAoC,CACrC,CAAC;qBACH;iBACF;aACF;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;QACpC,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;QAE5B,MAAM,YAAY,GAAG,KAAK,SAAS,CAAC;YAClC,IAAI;gBACF,OAAO,IAAI,EAAE;oBACX,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;oBAC5C,IAAI,IAAI,EAAE;wBACR,MAAM;qBACP;oBACD,MAAM,CAAC,IAAI,CAAC,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC7C,KAAK,MAAM,KAAK,IAAI,aAAa,EAAE;wBACjC,MAAM,KAAK,CAAC;qBACb;oBACD,aAAa,GAAG,EAAE,CAAC;iBACpB;aACF;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM;oBACJ,IAAI,EAAE,OAAO;oBACb,OAAO,EAAE;wBACP,IAAI,EAAE,cAAc;wBACpB,OAAO,EAAE,wBAAwB;qBAClC;iBACwB,CAAC;gBAC5B,MAAM,CAAC,KAAK,CACV;oBACE,KAAK,EAAE,CAAC;iBACT,EACD,yBAAyB,CAC1B,CAAC;aACH;oBAAS;gBACR,MAAM,CAAC,WAAW,EAAE,CAAC;aACtB;QACH,CAAC,CAAC;QAEF,OAAO,IAAI,EAAE,CAAC,EAAE,WAAW,EAAE,YAAY,EAAE,EAAE,CAAC,CAAC;IACjD,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,EAAE,cAAc,EAA8B;QAClE,MAAM,GAAG,GAAG,MAAM,KAAK,CACrB,GAAG,IAAI,CAAC,MAAM,EAAE,aAAa,IAAI,CAAC,WAAW,EAAE,4BAA4B,cAAc,EAAE,EAC3F;YACE,MAAM,EAAE,KAAK;YACb,OAAO,EAAE;gBACP,aAAa,EAAE,UAAU,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;gBACnD,cAAc,EAAE,kBAAkB;aACnC;SACF,CACF,CAAC;QAEF,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;QAE9B,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,KAA6B,CAAC,CAAC;SACpD;QACD,OAAO,IAAI,EAAE,CAAC,IAAI,CAAC,YAAgC,CAAC,CAAC;IACvD,CAAC;CACF\"}"}
