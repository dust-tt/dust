{"code":"import * as child_process from \"child_process\";\nexport async function sendInitDbMessage({ service, logger, }) {\n    const { SLACK_USER_OPERATION_BOT_TOKEN } = process.env;\n    if (!SLACK_USER_OPERATION_BOT_TOKEN) {\n        logger.info({}, \"SLACK_USER_OPERATION_BOT_TOKEN is not set\");\n        return;\n    }\n    // get the current commit id\n    let commitId = \"unknown\";\n    try {\n        commitId = child_process.execSync(\"git rev-parse HEAD\").toString().trim();\n    }\n    catch (error) {\n        logger.error({}, \"Failed to get commit id\");\n    }\n    const message = `papertrail: \\`initdb\\` has been initiated. Service: \\`${service}\\`. CommitId: \\`${commitId}\\``;\n    try {\n        const res = await fetch(\"https://slack.com/api/chat.postMessage\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${SLACK_USER_OPERATION_BOT_TOKEN}`,\n            },\n            body: JSON.stringify({\n                channel: \"deployments\",\n                text: \"\",\n                blocks: [\n                    {\n                        type: \"section\",\n                        text: {\n                            type: \"mrkdwn\",\n                            text: message,\n                        },\n                    },\n                ],\n                mrkdown: true,\n            }),\n        });\n        const jsonRes = await res.json();\n        if (!jsonRes.ok) {\n            logger.error({ error: jsonRes.error }, \"Failed to send slack message(1).\");\n        }\n    }\n    catch (error) {\n        logger.error({ error: error }, \"Failed to send slack message(2).\");\n    }\n}\n//# sourceMappingURL=deployment.js.map","references":["/Users/edouardwautier/Projects/dust/types/src/shared/logger.ts"],"map":"{\"version\":3,\"file\":\"deployment.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/shared/deployment.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,KAAK,aAAa,MAAM,eAAe,CAAC;AAI/C,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAAC,EACtC,OAAO,EACP,MAAM,GAIP;IACC,MAAM,EAAE,8BAA8B,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC;IAEvD,IAAI,CAAC,8BAA8B,EAAE;QACnC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,2CAA2C,CAAC,CAAC;QAC7D,OAAO;KACR;IAED,4BAA4B;IAC5B,IAAI,QAAQ,GAAG,SAAS,CAAC;IAEzB,IAAI;QACF,QAAQ,GAAG,aAAa,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;KAC3E;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE,yBAAyB,CAAC,CAAC;KAC7C;IAED,MAAM,OAAO,GAAG,yDAAyD,OAAO,mBAAmB,QAAQ,IAAI,CAAC;IAEhH,IAAI;QACF,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,wCAAwC,EAAE;YAChE,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;gBAClC,aAAa,EAAE,UAAU,8BAA8B,EAAE;aAC1D;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,OAAO,EAAE,aAAa;gBACtB,IAAI,EAAE,EAAE;gBACR,MAAM,EAAE;oBACN;wBACE,IAAI,EAAE,SAAS;wBACf,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;4BACd,IAAI,EAAE,OAAO;yBACd;qBACF;iBACF;gBACD,OAAO,EAAE,IAAI;aACd,CAAC;SACH,CAAC,CAAC;QAEH,MAAM,OAAO,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;QACjC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE;YACf,MAAM,CAAC,KAAK,CACV,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,EACxB,kCAAkC,CACnC,CAAC;SACH;KACF;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,kCAAkC,CAAC,CAAC;KACpE;AACH,CAAC\"}","dtsmap":{"name":"/Users/edouardwautier/Projects/dust/types/node_modules/.cache/rollup-plugin-typescript2/placeholder/shared/deployment.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"deployment.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/shared/deployment.ts\"],\"names\":[],\"mappings\":\"AAEA,OAAO,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAE3C,wBAAsB,iBAAiB,CAAC,EACtC,OAAO,EACP,MAAM,GACP,EAAE;IACD,OAAO,EAAE,MAAM,CAAC;IAChB,MAAM,EAAE,eAAe,CAAC;CACzB,iBAoDA\"}"},"dts":{"name":"/Users/edouardwautier/Projects/dust/types/node_modules/.cache/rollup-plugin-typescript2/placeholder/shared/deployment.d.ts","writeByteOrderMark":false,"text":"import { LoggerInterface } from \"./logger\";\nexport declare function sendInitDbMessage({ service, logger, }: {\n    service: string;\n    logger: LoggerInterface;\n}): Promise<void>;\n//# sourceMappingURL=deployment.d.ts.map"}}
